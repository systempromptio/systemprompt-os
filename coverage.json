{
    "numTotalTestSuites": 443,
    "numPassedTestSuites": 433,
    "numFailedTestSuites": 10,
    "numPendingTestSuites": 0,
    "numTotalTests": 876,
    "numPassedTests": 865,
    "numFailedTests": 11,
    "numPendingTests": 0,
    "numTodoTests": 0,
    "snapshot": {
        "added": 0,
        "failure": false,
        "filesAdded": 0,
        "filesRemoved": 0,
        "filesRemovedList": [],
        "filesUnmatched": 0,
        "filesUpdated": 0,
        "matched": 0,
        "total": 0,
        "unchecked": 0,
        "uncheckedKeysByFile": [],
        "unmatched": 0,
        "updated": 0,
        "didUpdate": false
    },
    "startTime": 1753117422929,
    "success": false,
    "testResults": [
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Main Entry Point"
                    ],
                    "fullName": "Main Entry Point should start server on import",
                    "status": "passed",
                    "title": "should start server on import",
                    "duration": 67.23877799510956,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Main Entry Point"
                    ],
                    "fullName": "Main Entry Point should handle server startup errors",
                    "status": "passed",
                    "title": "should handle server startup errors",
                    "duration": 19.10471200942993,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Main Entry Point"
                    ],
                    "fullName": "Main Entry Point should handle SIGTERM signal",
                    "status": "passed",
                    "title": "should handle SIGTERM signal",
                    "duration": 11.297123968601227,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Main Entry Point"
                    ],
                    "fullName": "Main Entry Point should handle SIGINT signal",
                    "status": "passed",
                    "title": "should handle SIGINT signal",
                    "duration": 13.351624011993408,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424679,
            "endTime": 1753117424790.3516,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/index.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "ModuleLoader",
                        "constructor"
                    ],
                    "fullName": "ModuleLoader constructor should create instance with default config path",
                    "status": "passed",
                    "title": "should create instance with default config path",
                    "duration": 7.490517020225525,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleLoader",
                        "constructor"
                    ],
                    "fullName": "ModuleLoader constructor should create instance with custom config path",
                    "status": "passed",
                    "title": "should create instance with custom config path",
                    "duration": 0.6120629906654358,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleLoader",
                        "loadModules"
                    ],
                    "fullName": "ModuleLoader loadModules should handle missing config file gracefully",
                    "status": "passed",
                    "title": "should handle missing config file gracefully",
                    "duration": 50.25288099050522,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleLoader",
                        "loadModules"
                    ],
                    "fullName": "ModuleLoader loadModules should load core modules when no config exists",
                    "status": "passed",
                    "title": "should load core modules when no config exists",
                    "duration": 42.18348103761673,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleLoader",
                        "getRegistry"
                    ],
                    "fullName": "ModuleLoader getRegistry should return module registry",
                    "status": "passed",
                    "title": "should return module registry",
                    "duration": 0.6822649836540222,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleLoader",
                        "getAllModules"
                    ],
                    "fullName": "ModuleLoader getAllModules should return empty array initially",
                    "status": "passed",
                    "title": "should return empty array initially",
                    "duration": 0.7595359683036804,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleLoader",
                        "shutdown"
                    ],
                    "fullName": "ModuleLoader shutdown should shutdown gracefully",
                    "status": "passed",
                    "title": "should shutdown gracefully",
                    "duration": 0.7183149456977844,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleLoader",
                        "singleton management"
                    ],
                    "fullName": "ModuleLoader singleton management should return same instance when called multiple times",
                    "status": "passed",
                    "title": "should return same instance when called multiple times",
                    "duration": 0.8403580188751221,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleLoader",
                        "singleton management"
                    ],
                    "fullName": "ModuleLoader singleton management should create new instance after reset",
                    "status": "passed",
                    "title": "should create new instance after reset",
                    "duration": 0.893248975276947,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleLoader",
                        "resetModuleLoader"
                    ],
                    "fullName": "ModuleLoader resetModuleLoader should handle reset when no instance exists",
                    "status": "passed",
                    "title": "should handle reset when no instance exists",
                    "duration": 1.2393560409545898,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleLoader",
                        "resetModuleLoader"
                    ],
                    "fullName": "ModuleLoader resetModuleLoader should reset singleton instance",
                    "status": "passed",
                    "title": "should reset singleton instance",
                    "duration": 0.7360150218009949,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424449,
            "endTime": 1753117424558.736,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/loader.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "ModuleRegistry",
                        "constructor"
                    ],
                    "fullName": "ModuleRegistry constructor should create a new registry instance and register core modules",
                    "status": "passed",
                    "title": "should create a new registry instance and register core modules",
                    "duration": 2.6507850289344788,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleRegistry",
                        "get"
                    ],
                    "fullName": "ModuleRegistry get should return a registered module",
                    "status": "passed",
                    "title": "should return a registered module",
                    "duration": 0.2306840419769287,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleRegistry",
                        "get"
                    ],
                    "fullName": "ModuleRegistry get should return undefined for non-existent module",
                    "status": "passed",
                    "title": "should return undefined for non-existent module",
                    "duration": 0.16887301206588745,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleRegistry",
                        "getAll"
                    ],
                    "fullName": "ModuleRegistry getAll should return all registered modules",
                    "status": "passed",
                    "title": "should return all registered modules",
                    "duration": 1.3654990196228027,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleRegistry",
                        "has"
                    ],
                    "fullName": "ModuleRegistry has should return true for registered module",
                    "status": "passed",
                    "title": "should return true for registered module",
                    "duration": 0.20966500043869019,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleRegistry",
                        "has"
                    ],
                    "fullName": "ModuleRegistry has should return false for non-existent module",
                    "status": "passed",
                    "title": "should return false for non-existent module",
                    "duration": 0.1436530351638794,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleRegistry",
                        "module interface"
                    ],
                    "fullName": "ModuleRegistry module interface should ensure all modules implement ModuleInterface",
                    "status": "passed",
                    "title": "should ensure all modules implement ModuleInterface",
                    "duration": 1.4702709913253784,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleRegistry",
                        "initializeAll"
                    ],
                    "fullName": "ModuleRegistry initializeAll should initialize all modules",
                    "status": "passed",
                    "title": "should initialize all modules",
                    "duration": 3.5903850197792053,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleRegistry",
                        "shutdownAll"
                    ],
                    "fullName": "ModuleRegistry shutdownAll should stop all modules",
                    "status": "passed",
                    "title": "should stop all modules",
                    "duration": 0.694582998752594,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ModuleRegistry",
                        "register"
                    ],
                    "fullName": "ModuleRegistry register should register a new module",
                    "status": "passed",
                    "title": "should register a new module",
                    "duration": 0.6481840014457703,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424317,
            "endTime": 1753117424329.6482,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/registry.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "ServerConfig",
                        "default configuration"
                    ],
                    "fullName": "ServerConfig default configuration should load default configuration values",
                    "status": "passed",
                    "title": "should load default configuration values",
                    "duration": 35.924977004528046,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ServerConfig",
                        "default configuration"
                    ],
                    "fullName": "ServerConfig default configuration should have correct token expiry defaults",
                    "status": "passed",
                    "title": "should have correct token expiry defaults",
                    "duration": 29.635371029376984,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ServerConfig",
                        "environment variable overrides"
                    ],
                    "fullName": "ServerConfig environment variable overrides should use environment variables when set",
                    "status": "passed",
                    "title": "should use environment variables when set",
                    "duration": 20.711483001708984,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ServerConfig",
                        "environment variable overrides"
                    ],
                    "fullName": "ServerConfig environment variable overrides should parse numeric environment variables",
                    "status": "passed",
                    "title": "should parse numeric environment variables",
                    "duration": 20.858056008815765,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ServerConfig",
                        "environment variable overrides"
                    ],
                    "fullName": "ServerConfig environment variable overrides should construct BASEURL from PORT",
                    "status": "passed",
                    "title": "should construct BASEURL from PORT",
                    "duration": 36.733778953552246,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ServerConfig",
                        "environment variable overrides"
                    ],
                    "fullName": "ServerConfig environment variable overrides should use custom BASEURL when provided",
                    "status": "passed",
                    "title": "should use custom BASEURL when provided",
                    "duration": 25.464142978191376,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ServerConfig",
                        "CONFIG proxy behavior"
                    ],
                    "fullName": "ServerConfig CONFIG proxy behavior should always return fresh values",
                    "status": "passed",
                    "title": "should always return fresh values",
                    "duration": 22.5433030128479,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ServerConfig",
                        "CONFIG proxy behavior"
                    ],
                    "fullName": "ServerConfig CONFIG proxy behavior should prevent modification",
                    "status": "passed",
                    "title": "should prevent modification",
                    "duration": 38.93470495939255,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ServerConfig",
                        "production validation"
                    ],
                    "fullName": "ServerConfig production validation should warn when BASEURL contains localhost in production",
                    "status": "failed",
                    "title": "should warn when BASEURL contains localhost in production",
                    "duration": 51.34903299808502,
                    "failureMessages": [
                        "AssertionError: expected \"spy\" to be called with arguments: [ Array(1) ]\n\nReceived: \n\n\n\nNumber of calls: 0\n\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:1465:13)\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/chai/chai.js:1706:25)\n    at /var/www/html/systemprompt-os/tests/unit/server/config.spec.ts:123:23\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)"
                    ],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ServerConfig",
                        "production validation"
                    ],
                    "fullName": "ServerConfig production validation should not warn when BASEURL is valid in production",
                    "status": "passed",
                    "title": "should not warn when BASEURL is valid in production",
                    "duration": 23.81945502758026,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ServerConfig",
                        "configuration validation"
                    ],
                    "fullName": "ServerConfig configuration validation should validate required fields are present",
                    "status": "passed",
                    "title": "should validate required fields are present",
                    "duration": 20.18179601430893,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424160,
            "endTime": 1753117424486.182,
            "status": "failed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/config.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Server",
                        "createApp"
                    ],
                    "fullName": "Server createApp should create and configure Express app",
                    "status": "passed",
                    "title": "should create and configure Express app",
                    "duration": 688.8630529642105,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server",
                        "createApp"
                    ],
                    "fullName": "Server createApp should load modules",
                    "status": "passed",
                    "title": "should load modules",
                    "duration": 217.43601101636887,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server",
                        "createApp"
                    ],
                    "fullName": "Server createApp should setup body parsing middleware",
                    "status": "passed",
                    "title": "should setup body parsing middleware",
                    "duration": 220.6564919948578,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server",
                        "createApp"
                    ],
                    "fullName": "Server createApp should setup external API",
                    "status": "passed",
                    "title": "should setup external API",
                    "duration": 183.16249799728394,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server",
                        "createApp"
                    ],
                    "fullName": "Server createApp should setup root endpoint",
                    "status": "passed",
                    "title": "should setup root endpoint",
                    "duration": 59.39833199977875,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server",
                        "startServer"
                    ],
                    "fullName": "Server startServer should start server on configured port",
                    "status": "passed",
                    "title": "should start server on configured port",
                    "duration": 32.457379043102264,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server",
                        "startServer"
                    ],
                    "fullName": "Server startServer should handle server startup errors",
                    "status": "passed",
                    "title": "should handle server startup errors",
                    "duration": 19.46477299928665,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server",
                        "startServer"
                    ],
                    "fullName": "Server startServer should return HTTP server instance",
                    "status": "passed",
                    "title": "should return HTTP server instance",
                    "duration": 22.481545984745026,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server",
                        "endpoints"
                    ],
                    "fullName": "Server endpoints should handle root endpoint request",
                    "status": "passed",
                    "title": "should handle root endpoint request",
                    "duration": 19.369823038578033,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server",
                        "error handling"
                    ],
                    "fullName": "Server error handling should handle CORS errors gracefully",
                    "status": "passed",
                    "title": "should handle CORS errors gracefully",
                    "duration": 16.333962976932526,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server",
                        "error handling"
                    ],
                    "fullName": "Server error handling should handle listen errors",
                    "status": "passed",
                    "title": "should handle listen errors",
                    "duration": 15.562650978565216,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server",
                        "graceful shutdown"
                    ],
                    "fullName": "Server graceful shutdown should shutdown modules on server close",
                    "status": "passed",
                    "title": "should shutdown modules on server close",
                    "duration": 15.780135989189148,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423605,
            "endTime": 1753117425116.78,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/index.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "MCPHandler",
                        "constructor"
                    ],
                    "fullName": "MCPHandler constructor should set up cleanup interval",
                    "status": "passed",
                    "title": "should set up cleanup interval",
                    "duration": 7.777086973190308,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPHandler",
                        "setupRoutes"
                    ],
                    "fullName": "MCPHandler setupRoutes should set up routes on the Express app",
                    "status": "passed",
                    "title": "should set up routes on the Express app",
                    "duration": 1.8657640218734741,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPHandler",
                        "getServerForSession"
                    ],
                    "fullName": "MCPHandler getServerForSession should return undefined for non-existent session",
                    "status": "passed",
                    "title": "should return undefined for non-existent session",
                    "duration": 1.0170519948005676,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPHandler",
                        "getServerForSession"
                    ],
                    "fullName": "MCPHandler getServerForSession should return server for existing session",
                    "status": "passed",
                    "title": "should return server for existing session",
                    "duration": 2.4289309978485107,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPHandler",
                        "getAllServers"
                    ],
                    "fullName": "MCPHandler getAllServers should return empty array when no sessions exist",
                    "status": "passed",
                    "title": "should return empty array when no sessions exist",
                    "duration": 0.899619996547699,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPHandler",
                        "getServer"
                    ],
                    "fullName": "MCPHandler getServer should return new server when no sessions exist",
                    "status": "passed",
                    "title": "should return new server when no sessions exist",
                    "duration": 0.7094449996948242,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPHandler",
                        "getServer"
                    ],
                    "fullName": "MCPHandler getServer should return existing server when sessions exist",
                    "status": "passed",
                    "title": "should return existing server when sessions exist",
                    "duration": 1.1054929494857788,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPHandler",
                        "cleanupSession"
                    ],
                    "fullName": "MCPHandler cleanupSession should remove session from sessions map",
                    "status": "passed",
                    "title": "should remove session from sessions map",
                    "duration": 0.854216992855072,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPHandler",
                        "getActiveSessionCount"
                    ],
                    "fullName": "MCPHandler getActiveSessionCount should return 0 when no sessions exist",
                    "status": "passed",
                    "title": "should return 0 when no sessions exist",
                    "duration": 0.7396450042724609,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPHandler",
                        "shutdown"
                    ],
                    "fullName": "MCPHandler shutdown should clear cleanup interval",
                    "status": "passed",
                    "title": "should clear cleanup interval",
                    "duration": 0.8948789834976196,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPHandler",
                        "session management"
                    ],
                    "fullName": "MCPHandler session management should create new session for request without session ID",
                    "status": "passed",
                    "title": "should create new session for request without session ID",
                    "duration": 1.2906270027160645,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPHandler",
                        "session management"
                    ],
                    "fullName": "MCPHandler session management should reuse existing session for request with session ID",
                    "status": "passed",
                    "title": "should reuse existing session for request with session ID",
                    "duration": 1.239615023136139,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPHandler",
                        "session management"
                    ],
                    "fullName": "MCPHandler session management should clean up old sessions",
                    "status": "passed",
                    "title": "should clean up old sessions",
                    "duration": 2.0588130354881287,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPHandler",
                        "request handlers"
                    ],
                    "fullName": "MCPHandler request handlers should register all required request handlers",
                    "status": "passed",
                    "title": "should register all required request handlers",
                    "duration": 1.3244370222091675,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPHandler",
                        "error handling"
                    ],
                    "fullName": "MCPHandler error handling should handle non-existent session",
                    "status": "passed",
                    "title": "should handle non-existent session",
                    "duration": 2.120312988758087,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPHandler",
                        "error handling"
                    ],
                    "fullName": "MCPHandler error handling should handle transport errors",
                    "status": "passed",
                    "title": "should handle transport errors",
                    "duration": 15.043545007705688,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Global MCP Handler instance"
                    ],
                    "fullName": "Global MCP Handler instance should set and get MCP handler instance",
                    "status": "passed",
                    "title": "should set and get MCP handler instance",
                    "duration": 0.4369490146636963,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Global MCP Handler instance"
                    ],
                    "fullName": "Global MCP Handler instance should return null when no instance is set",
                    "status": "passed",
                    "title": "should return null when no instance is set",
                    "duration": 0.31238603591918945,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424570,
            "endTime": 1753117424618.3125,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp-handler.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "MCP Server",
                        "setupMCPServers"
                    ],
                    "fullName": "MCP Server setupMCPServers should setup MCP servers with registry",
                    "status": "passed",
                    "title": "should setup MCP servers with registry",
                    "duration": 31.967328011989594,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Server",
                        "setupMCPServers"
                    ],
                    "fullName": "MCP Server setupMCPServers should handle custom loader errors gracefully",
                    "status": "passed",
                    "title": "should handle custom loader errors gracefully",
                    "duration": 2.066053032875061,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Server",
                        "MCPHandler"
                    ],
                    "fullName": "MCP Server MCPHandler should create handler instance",
                    "status": "passed",
                    "title": "should create handler instance",
                    "duration": 1.591862976551056,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424648,
            "endTime": 1753117424684.5918,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Server Middleware",
                        "rateLimitMiddleware"
                    ],
                    "fullName": "Server Middleware rateLimitMiddleware should allow requests within rate limit",
                    "status": "passed",
                    "title": "should allow requests within rate limit",
                    "duration": 92.63523697853088,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server Middleware",
                        "rateLimitMiddleware"
                    ],
                    "fullName": "Server Middleware rateLimitMiddleware should block requests exceeding rate limit",
                    "status": "passed",
                    "title": "should block requests exceeding rate limit",
                    "duration": 14.054464995861053,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server Middleware",
                        "rateLimitMiddleware"
                    ],
                    "fullName": "Server Middleware rateLimitMiddleware should reset rate limit after window expires",
                    "status": "passed",
                    "title": "should reset rate limit after window expires",
                    "duration": 9.35332602262497,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server Middleware",
                        "rateLimitMiddleware"
                    ],
                    "fullName": "Server Middleware rateLimitMiddleware should track rate limits per IP",
                    "status": "passed",
                    "title": "should track rate limits per IP",
                    "duration": 11.328352987766266,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server Middleware",
                        "rateLimitMiddleware"
                    ],
                    "fullName": "Server Middleware rateLimitMiddleware should handle undefined IP gracefully",
                    "status": "passed",
                    "title": "should handle undefined IP gracefully",
                    "duration": 8.26990795135498,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server Middleware",
                        "rateLimitMiddleware"
                    ],
                    "fullName": "Server Middleware rateLimitMiddleware should use default values when no parameters provided",
                    "status": "passed",
                    "title": "should use default values when no parameters provided",
                    "duration": 6.840421974658966,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server Middleware",
                        "rateLimitMiddleware"
                    ],
                    "fullName": "Server Middleware rateLimitMiddleware should calculate retry-after correctly",
                    "status": "passed",
                    "title": "should calculate retry-after correctly",
                    "duration": 14.457221984863281,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server Middleware",
                        "validateProtocolVersion"
                    ],
                    "fullName": "Server Middleware validateProtocolVersion should allow requests without protocol version header",
                    "status": "passed",
                    "title": "should allow requests without protocol version header",
                    "duration": 20.340315997600555,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server Middleware",
                        "validateProtocolVersion"
                    ],
                    "fullName": "Server Middleware validateProtocolVersion should allow supported protocol versions",
                    "status": "passed",
                    "title": "should allow supported protocol versions",
                    "duration": 8.847716987133026,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server Middleware",
                        "validateProtocolVersion"
                    ],
                    "fullName": "Server Middleware validateProtocolVersion should reject unsupported protocol versions",
                    "status": "passed",
                    "title": "should reject unsupported protocol versions",
                    "duration": 35.26223599910736,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server Middleware",
                        "requestSizeLimit"
                    ],
                    "fullName": "Server Middleware requestSizeLimit should allow requests within size limit",
                    "status": "passed",
                    "title": "should allow requests within size limit",
                    "duration": 9.507350027561188,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server Middleware",
                        "requestSizeLimit"
                    ],
                    "fullName": "Server Middleware requestSizeLimit should block requests exceeding size limit",
                    "status": "passed",
                    "title": "should block requests exceeding size limit",
                    "duration": 24.08246499300003,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server Middleware",
                        "requestSizeLimit"
                    ],
                    "fullName": "Server Middleware requestSizeLimit should handle missing content-length header",
                    "status": "passed",
                    "title": "should handle missing content-length header",
                    "duration": 13.578523993492126,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server Middleware",
                        "requestSizeLimit"
                    ],
                    "fullName": "Server Middleware requestSizeLimit should use default size limit of 10MB",
                    "status": "passed",
                    "title": "should use default size limit of 10MB",
                    "duration": 22.470148980617523,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server Middleware",
                        "cleanup interval"
                    ],
                    "fullName": "Server Middleware cleanup interval should clean up expired rate limit entries",
                    "status": "passed",
                    "title": "should clean up expired rate limit entries",
                    "duration": 29.486407995224,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423605,
            "endTime": 1753117423926.4863,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/middleware.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Server Types",
                        "MCPErrorCode Enum"
                    ],
                    "fullName": "Server Types MCPErrorCode Enum should have correct JSON-RPC 2.0 error codes",
                    "status": "passed",
                    "title": "should have correct JSON-RPC 2.0 error codes",
                    "duration": 2.0748629570007324,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server Types",
                        "MCPErrorCode Enum"
                    ],
                    "fullName": "Server Types MCPErrorCode Enum should have all expected enum keys",
                    "status": "passed",
                    "title": "should have all expected enum keys",
                    "duration": 1.0536220073699951,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server Types",
                        "MCPErrorCode Enum"
                    ],
                    "fullName": "Server Types MCPErrorCode Enum should support reverse lookup for numeric enums",
                    "status": "passed",
                    "title": "should support reverse lookup for numeric enums",
                    "duration": 0.4632490277290344,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Server Types",
                        "MCPErrorCode Enum"
                    ],
                    "fullName": "Server Types MCPErrorCode Enum should be usable in error responses",
                    "status": "passed",
                    "title": "should be usable in error responses",
                    "duration": 0.2619650363922119,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424918,
            "endTime": 1753117424922.262,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/types.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Utility Helpers",
                        "String utilities"
                    ],
                    "fullName": "Utility Helpers String utilities should capitalize strings",
                    "status": "passed",
                    "title": "should capitalize strings",
                    "duration": 1.447089970111847,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Utility Helpers",
                        "String utilities"
                    ],
                    "fullName": "Utility Helpers String utilities should trim whitespace",
                    "status": "passed",
                    "title": "should trim whitespace",
                    "duration": 0.31298696994781494,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Utility Helpers",
                        "String utilities"
                    ],
                    "fullName": "Utility Helpers String utilities should slugify strings",
                    "status": "passed",
                    "title": "should slugify strings",
                    "duration": 0.33268702030181885,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Utility Helpers",
                        "Array utilities"
                    ],
                    "fullName": "Utility Helpers Array utilities should chunk arrays",
                    "status": "passed",
                    "title": "should chunk arrays",
                    "duration": 1.017130970954895,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Utility Helpers",
                        "Array utilities"
                    ],
                    "fullName": "Utility Helpers Array utilities should flatten arrays",
                    "status": "passed",
                    "title": "should flatten arrays",
                    "duration": 0.27884596586227417,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Utility Helpers",
                        "Array utilities"
                    ],
                    "fullName": "Utility Helpers Array utilities should remove duplicates",
                    "status": "passed",
                    "title": "should remove duplicates",
                    "duration": 0.19920504093170166,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Utility Helpers",
                        "Object utilities"
                    ],
                    "fullName": "Utility Helpers Object utilities should deep clone objects",
                    "status": "passed",
                    "title": "should deep clone objects",
                    "duration": 0.5110310316085815,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Utility Helpers",
                        "Object utilities"
                    ],
                    "fullName": "Utility Helpers Object utilities should merge objects",
                    "status": "passed",
                    "title": "should merge objects",
                    "duration": 0.28657597303390503,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Utility Helpers",
                        "Object utilities"
                    ],
                    "fullName": "Utility Helpers Object utilities should pick properties",
                    "status": "passed",
                    "title": "should pick properties",
                    "duration": 0.21775496006011963,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Utility Helpers",
                        "Date utilities"
                    ],
                    "fullName": "Utility Helpers Date utilities should format dates",
                    "status": "passed",
                    "title": "should format dates",
                    "duration": 0.17357397079467773,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Utility Helpers",
                        "Date utilities"
                    ],
                    "fullName": "Utility Helpers Date utilities should calculate date differences",
                    "status": "passed",
                    "title": "should calculate date differences",
                    "duration": 0.17499399185180664,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Utility Helpers",
                        "Validation utilities"
                    ],
                    "fullName": "Utility Helpers Validation utilities should validate URLs",
                    "status": "passed",
                    "title": "should validate URLs",
                    "duration": 0.2604449987411499,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Utility Helpers",
                        "Validation utilities"
                    ],
                    "fullName": "Utility Helpers Validation utilities should validate JSON",
                    "status": "passed",
                    "title": "should validate JSON",
                    "duration": 0.26248598098754883,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424253,
            "endTime": 1753117424259.2625,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/utils/helpers.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates 550e8400-e29b-41d4-a716-446655440000 as true (standard UUID)",
                    "status": "passed",
                    "title": "validates 550e8400-e29b-41d4-a716-446655440000 as true (standard UUID)",
                    "duration": 1.6900750398635864,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates 6ba7b810-9dad-11d1-80b4-00c04fd430c8 as true (UUID v1)",
                    "status": "passed",
                    "title": "validates 6ba7b810-9dad-11d1-80b4-00c04fd430c8 as true (UUID v1)",
                    "duration": 0.36536699533462524,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates 00000000-0000-0000-0000-000000000000 as true (nil UUID)",
                    "status": "passed",
                    "title": "validates 00000000-0000-0000-0000-000000000000 as true (nil UUID)",
                    "duration": 0.16809296607971191,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates c9f57622-bb3f-11ed-afa1-0242ac120002 as true (UUID v1)",
                    "status": "passed",
                    "title": "validates c9f57622-bb3f-11ed-afa1-0242ac120002 as true (UUID v1)",
                    "duration": 0.16616302728652954,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates 9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d as true (UUID v4)",
                    "status": "passed",
                    "title": "validates 9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d as true (UUID v4)",
                    "duration": 0.16033399105072021,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates a6fa3124-d8f5-5e45-8b5b-73e524d7c2f2 as true (UUID v5)",
                    "status": "passed",
                    "title": "validates a6fa3124-d8f5-5e45-8b5b-73e524d7c2f2 as true (UUID v5)",
                    "duration": 0.17506402730941772,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates 550E8400-E29B-41D4-A716-446655440000 as true (uppercase UUID)",
                    "status": "passed",
                    "title": "validates 550E8400-E29B-41D4-A716-446655440000 as true (uppercase UUID)",
                    "duration": 0.19264400005340576,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates 550e8400-E29B-41d4-A716-446655440000 as true (mixed case UUID)",
                    "status": "passed",
                    "title": "validates 550e8400-E29B-41d4-A716-446655440000 as true (mixed case UUID)",
                    "duration": 0.2255050539970398,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates not-a-uuid as false (invalid format)",
                    "status": "passed",
                    "title": "validates not-a-uuid as false (invalid format)",
                    "duration": 0.2338150143623352,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates 550e8400-e29b-41d4-a716 as false (too short)",
                    "status": "passed",
                    "title": "validates 550e8400-e29b-41d4-a716 as false (too short)",
                    "duration": 0.1459229588508606,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates 550e8400-e29b-41d4-a716-446655440000-extra as false (too long)",
                    "status": "passed",
                    "title": "validates 550e8400-e29b-41d4-a716-446655440000-extra as false (too long)",
                    "duration": 0.159773051738739,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates 550e8400-e29b-41d4-a716-44665544000g as false (invalid character)",
                    "status": "passed",
                    "title": "validates 550e8400-e29b-41d4-a716-44665544000g as false (invalid character)",
                    "duration": 0.18422400951385498,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates  as false (empty string)",
                    "status": "passed",
                    "title": "validates  as false (empty string)",
                    "duration": 0.2157040238380432,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates     as false (whitespace only)",
                    "status": "passed",
                    "title": "validates     as false (whitespace only)",
                    "duration": 0.22783499956130981,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates \t\n as false (special whitespace)",
                    "status": "passed",
                    "title": "validates \t\n as false (special whitespace)",
                    "duration": 0.17510300874710083,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates 123 as false (number input)",
                    "status": "passed",
                    "title": "validates 123 as false (number input)",
                    "duration": 0.14232301712036133,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates {} as false (object input)",
                    "status": "passed",
                    "title": "validates {} as false (object input)",
                    "duration": 0.18618398904800415,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates [] as false (array input)",
                    "status": "passed",
                    "title": "validates [] as false (array input)",
                    "duration": 0.10826200246810913,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates true as false (boolean input)",
                    "status": "passed",
                    "title": "validates true as false (boolean input)",
                    "duration": 0.09563201665878296,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates null as false (null input)",
                    "status": "passed",
                    "title": "validates null as false (null input)",
                    "duration": 0.09166198968887329,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "isValidUUID"
                    ],
                    "fullName": "ID Validation Utils isValidUUID validates undefined as false (undefined input)",
                    "status": "passed",
                    "title": "validates undefined as false (undefined input)",
                    "duration": 0.10159200429916382,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "validateTaskId"
                    ],
                    "fullName": "ID Validation Utils validateTaskId handles 550e8400-e29b-41d4-a716-446655440000 correctly",
                    "status": "passed",
                    "title": "handles 550e8400-e29b-41d4-a716-446655440000 correctly",
                    "duration": 0.23244500160217285,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "validateTaskId"
                    ],
                    "fullName": "ID Validation Utils validateTaskId handles task_550e8400-e29b-41d4-a716-446655440000 correctly",
                    "status": "passed",
                    "title": "handles task_550e8400-e29b-41d4-a716-446655440000 correctly",
                    "duration": 0.14119303226470947,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "validateTaskId"
                    ],
                    "fullName": "ID Validation Utils validateTaskId handles  correctly",
                    "status": "passed",
                    "title": "handles  correctly",
                    "duration": 1.2637970447540283,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "validateTaskId"
                    ],
                    "fullName": "ID Validation Utils validateTaskId handles invalid-id correctly",
                    "status": "passed",
                    "title": "handles invalid-id correctly",
                    "duration": 0.2799760103225708,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "validateTaskId"
                    ],
                    "fullName": "ID Validation Utils validateTaskId handles 123 correctly",
                    "status": "passed",
                    "title": "handles 123 correctly",
                    "duration": 0.29924702644348145,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "validateTaskId"
                    ],
                    "fullName": "ID Validation Utils validateTaskId handles task_invalid correctly",
                    "status": "passed",
                    "title": "handles task_invalid correctly",
                    "duration": 0.25698500871658325,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "validateTaskId"
                    ],
                    "fullName": "ID Validation Utils validateTaskId handles     correctly",
                    "status": "passed",
                    "title": "handles     correctly",
                    "duration": 0.2863759994506836,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "validateTaskId"
                    ],
                    "fullName": "ID Validation Utils validateTaskId handles null correctly",
                    "status": "passed",
                    "title": "handles null correctly",
                    "duration": 0.2490050196647644,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "validateTaskId"
                    ],
                    "fullName": "ID Validation Utils validateTaskId handles undefined correctly",
                    "status": "passed",
                    "title": "handles undefined correctly",
                    "duration": 0.2368849515914917,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "sanitizeTaskId"
                    ],
                    "fullName": "ID Validation Utils sanitizeTaskId sanitizes 550e8400-e29b-41d4-a716-446655440000 correctly",
                    "status": "passed",
                    "title": "sanitizes 550e8400-e29b-41d4-a716-446655440000 correctly",
                    "duration": 0.3034159541130066,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "sanitizeTaskId"
                    ],
                    "fullName": "ID Validation Utils sanitizeTaskId sanitizes task_550e8400-e29b-41d4-a716-446655440000 correctly",
                    "status": "passed",
                    "title": "sanitizes task_550e8400-e29b-41d4-a716-446655440000 correctly",
                    "duration": 0.17603397369384766,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "sanitizeTaskId"
                    ],
                    "fullName": "ID Validation Utils sanitizeTaskId sanitizes   550e8400-e29b-41d4-a716-446655440000   correctly",
                    "status": "passed",
                    "title": "sanitizes   550e8400-e29b-41d4-a716-446655440000   correctly",
                    "duration": 0.16431403160095215,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "sanitizeTaskId"
                    ],
                    "fullName": "ID Validation Utils sanitizeTaskId sanitizes   task_550e8400-e29b-41d4-a716-446655440000   correctly",
                    "status": "passed",
                    "title": "sanitizes   task_550e8400-e29b-41d4-a716-446655440000   correctly",
                    "duration": 0.1618329882621765,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "sanitizeTaskId"
                    ],
                    "fullName": "ID Validation Utils sanitizeTaskId sanitizes 550E8400-E29B-41D4-A716-446655440000 correctly",
                    "status": "passed",
                    "title": "sanitizes 550E8400-E29B-41D4-A716-446655440000 correctly",
                    "duration": 0.1667729616165161,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "sanitizeTaskId"
                    ],
                    "fullName": "ID Validation Utils sanitizeTaskId sanitizes invalid correctly",
                    "status": "passed",
                    "title": "sanitizes invalid correctly",
                    "duration": 0.29208701848983765,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "sanitizeTaskId"
                    ],
                    "fullName": "ID Validation Utils sanitizeTaskId sanitizes task_invalid correctly",
                    "status": "passed",
                    "title": "sanitizes task_invalid correctly",
                    "duration": 0.3029460310935974,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "sanitizeTaskId"
                    ],
                    "fullName": "ID Validation Utils sanitizeTaskId sanitizes  correctly",
                    "status": "passed",
                    "title": "sanitizes  correctly",
                    "duration": 0.3509569764137268,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "sanitizeTaskId"
                    ],
                    "fullName": "ID Validation Utils sanitizeTaskId sanitizes     correctly",
                    "status": "passed",
                    "title": "sanitizes     correctly",
                    "duration": 0.3555780053138733,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "sanitizeTaskId"
                    ],
                    "fullName": "ID Validation Utils sanitizeTaskId sanitizes task_task_550e8400-e29b-41d4-a716-446655440000 correctly",
                    "status": "passed",
                    "title": "sanitizes task_task_550e8400-e29b-41d4-a716-446655440000 correctly",
                    "duration": 0.30275702476501465,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ID Validation Utils",
                        "sanitizeTaskId"
                    ],
                    "fullName": "ID Validation Utils sanitizeTaskId sanitizes user_550e8400-e29b-41d4-a716-446655440000 correctly",
                    "status": "passed",
                    "title": "sanitizes user_550e8400-e29b-41d4-a716-446655440000 correctly",
                    "duration": 0.2908859848976135,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424566,
            "endTime": 1753117424578.3555,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/utils/id-validation.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "basic types"
                    ],
                    "fullName": "jsonSchemaToZod basic types should convert string type",
                    "status": "passed",
                    "title": "should convert string type",
                    "duration": 4.122546970844269,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "basic types"
                    ],
                    "fullName": "jsonSchemaToZod basic types should convert number type",
                    "status": "passed",
                    "title": "should convert number type",
                    "duration": 1.158374011516571,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "basic types"
                    ],
                    "fullName": "jsonSchemaToZod basic types should convert boolean type",
                    "status": "passed",
                    "title": "should convert boolean type",
                    "duration": 0.5762020349502563,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "basic types"
                    ],
                    "fullName": "jsonSchemaToZod basic types should convert array type",
                    "status": "passed",
                    "title": "should convert array type",
                    "duration": 1.2925170063972473,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "basic types"
                    ],
                    "fullName": "jsonSchemaToZod basic types should handle array without items",
                    "status": "passed",
                    "title": "should handle array without items",
                    "duration": 0.5482809543609619,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "enums"
                    ],
                    "fullName": "jsonSchemaToZod enums should convert string enums",
                    "status": "passed",
                    "title": "should convert string enums",
                    "duration": 0.749675989151001,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "objects"
                    ],
                    "fullName": "jsonSchemaToZod objects should convert simple object",
                    "status": "passed",
                    "title": "should convert simple object",
                    "duration": 1.4879509806632996,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "objects"
                    ],
                    "fullName": "jsonSchemaToZod objects should handle required fields",
                    "status": "passed",
                    "title": "should handle required fields",
                    "duration": 0.6691839694976807,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "objects"
                    ],
                    "fullName": "jsonSchemaToZod objects should handle default values",
                    "status": "passed",
                    "title": "should handle default values",
                    "duration": 0.9794110059738159,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "objects"
                    ],
                    "fullName": "jsonSchemaToZod objects should handle nested objects",
                    "status": "passed",
                    "title": "should handle nested objects",
                    "duration": 0.3901289701461792,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "objects"
                    ],
                    "fullName": "jsonSchemaToZod objects should handle objects with enum properties",
                    "status": "passed",
                    "title": "should handle objects with enum properties",
                    "duration": 0.6352630257606506,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "edge cases"
                    ],
                    "fullName": "jsonSchemaToZod edge cases should return z.any() for null schema",
                    "status": "passed",
                    "title": "should return z.any() for null schema",
                    "duration": 0.37279796600341797,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "edge cases"
                    ],
                    "fullName": "jsonSchemaToZod edge cases should return z.any() for undefined schema",
                    "status": "passed",
                    "title": "should return z.any() for undefined schema",
                    "duration": 0.41191399097442627,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "edge cases"
                    ],
                    "fullName": "jsonSchemaToZod edge cases should return z.any() for non-object schema",
                    "status": "passed",
                    "title": "should return z.any() for non-object schema",
                    "duration": 0.3960379958152771,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "edge cases"
                    ],
                    "fullName": "jsonSchemaToZod edge cases should return z.any() for unknown type",
                    "status": "passed",
                    "title": "should return z.any() for unknown type",
                    "duration": 0.26362597942352295,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "edge cases"
                    ],
                    "fullName": "jsonSchemaToZod edge cases should handle empty object schema",
                    "status": "passed",
                    "title": "should handle empty object schema",
                    "duration": 0.47645998001098633,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "edge cases"
                    ],
                    "fullName": "jsonSchemaToZod edge cases should handle object without type but with properties",
                    "status": "passed",
                    "title": "should handle object without type but with properties",
                    "duration": 0.3804979920387268,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "jsonSchemaToZod",
                        "complex examples"
                    ],
                    "fullName": "jsonSchemaToZod complex examples should handle MCP tool-like schema",
                    "status": "passed",
                    "title": "should handle MCP tool-like schema",
                    "duration": 0.6471740007400513,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423729,
            "endTime": 1753117423745.6472,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/utils/json-schema-to-zod.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Logger",
                        "Bootstrap Logger"
                    ],
                    "fullName": "Logger Bootstrap Logger logs info messages with bootstrap logger",
                    "status": "passed",
                    "title": "logs info messages with bootstrap logger",
                    "duration": 85.83057701587677,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Logger",
                        "Bootstrap Logger"
                    ],
                    "fullName": "Logger Bootstrap Logger logs error messages with bootstrap logger",
                    "status": "passed",
                    "title": "logs error messages with bootstrap logger",
                    "duration": 8.093418002128601,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Logger",
                        "Bootstrap Logger"
                    ],
                    "fullName": "Logger Bootstrap Logger logs warn messages with bootstrap logger",
                    "status": "passed",
                    "title": "logs warn messages with bootstrap logger",
                    "duration": 5.013200044631958,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Logger",
                        "Bootstrap Logger"
                    ],
                    "fullName": "Logger Bootstrap Logger logs debug messages with bootstrap logger",
                    "status": "passed",
                    "title": "logs debug messages with bootstrap logger",
                    "duration": 3.044893980026245,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Logger",
                        "Bootstrap Logger"
                    ],
                    "fullName": "Logger Bootstrap Logger handles multiple arguments",
                    "status": "passed",
                    "title": "handles multiple arguments",
                    "duration": 3.9093170166015625,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Logger",
                        "Bootstrap Logger"
                    ],
                    "fullName": "Logger Bootstrap Logger handles addLog with different levels",
                    "status": "passed",
                    "title": "handles addLog with different levels",
                    "duration": 5.895318984985352,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Logger",
                        "Bootstrap Logger"
                    ],
                    "fullName": "Logger Bootstrap Logger handles async methods",
                    "status": "passed",
                    "title": "handles async methods",
                    "duration": 6.237245976924896,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Logger",
                        "Module Logger Integration"
                    ],
                    "fullName": "Logger Module Logger Integration uses module logger when registry is set and caches it",
                    "status": "passed",
                    "title": "uses module logger when registry is set and caches it",
                    "duration": 10.98312497138977,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Logger",
                        "Module Logger Integration"
                    ],
                    "fullName": "Logger Module Logger Integration handles async methods through module logger",
                    "status": "passed",
                    "title": "handles async methods through module logger",
                    "duration": 7.739988029003143,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Logger",
                        "Module Logger Integration"
                    ],
                    "fullName": "Logger Module Logger Integration falls back to bootstrap logger when registry throws error",
                    "status": "passed",
                    "title": "falls back to bootstrap logger when registry throws error",
                    "duration": 6.541356980800629,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Logger",
                        "Module Logger Integration"
                    ],
                    "fullName": "Logger Module Logger Integration falls back to bootstrap logger when module has no getService",
                    "status": "passed",
                    "title": "falls back to bootstrap logger when module has no getService",
                    "duration": 14.629144012928009,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Logger",
                        "Module Logger Integration"
                    ],
                    "fullName": "Logger Module Logger Integration falls back to bootstrap logger when getService returns null",
                    "status": "passed",
                    "title": "falls back to bootstrap logger when getService returns null",
                    "duration": 8.50294303894043,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Logger",
                        "Dynamic logger switching"
                    ],
                    "fullName": "Logger Dynamic logger switching switches from bootstrap to module logger dynamically",
                    "status": "passed",
                    "title": "switches from bootstrap to module logger dynamically",
                    "duration": 12.066931962966919,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Logger",
                        "Dynamic logger switching"
                    ],
                    "fullName": "Logger Dynamic logger switching clears cache when registry changes",
                    "status": "passed",
                    "title": "clears cache when registry changes",
                    "duration": 8.692993998527527,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423604,
            "endTime": 1753117423792.693,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/utils/logger.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "CommandDiscovery",
                        "constructor"
                    ],
                    "fullName": "CommandDiscovery constructor should use provided modules path",
                    "status": "passed",
                    "title": "should use provided modules path",
                    "duration": 1.5264219641685486,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CommandDiscovery",
                        "constructor"
                    ],
                    "fullName": "CommandDiscovery constructor should use default modules path when not provided",
                    "status": "passed",
                    "title": "should use default modules path when not provided",
                    "duration": 0.4909399747848511,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CommandDiscovery",
                        "discoverCommands"
                    ],
                    "fullName": "CommandDiscovery discoverCommands should return empty map when no module directories exist",
                    "status": "passed",
                    "title": "should return empty map when no module directories exist",
                    "duration": 0.9701600074768066,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CommandDiscovery",
                        "discoverCommands"
                    ],
                    "fullName": "CommandDiscovery discoverCommands should discover commands in core modules directory",
                    "status": "passed",
                    "title": "should discover commands in core modules directory",
                    "duration": 1.7680970430374146,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CommandDiscovery",
                        "discoverCommands"
                    ],
                    "fullName": "CommandDiscovery discoverCommands should discover commands in custom modules directory",
                    "status": "passed",
                    "title": "should discover commands in custom modules directory",
                    "duration": 0.6055329442024231,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CommandDiscovery",
                        "discoverCommands"
                    ],
                    "fullName": "CommandDiscovery discoverCommands should discover commands in extensions directory",
                    "status": "passed",
                    "title": "should discover commands in extensions directory",
                    "duration": 80.04439598321915,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CommandDiscovery",
                        "discoverCommands"
                    ],
                    "fullName": "CommandDiscovery discoverCommands should handle discovery errors gracefully",
                    "status": "passed",
                    "title": "should handle discovery errors gracefully",
                    "duration": 1.682321012020111,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CommandDiscovery",
                        "discoverInDirectory"
                    ],
                    "fullName": "CommandDiscovery discoverInDirectory should discover CLI commands from module directories",
                    "status": "passed",
                    "title": "should discover CLI commands from module directories",
                    "duration": 31.443351984024048,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CommandDiscovery",
                        "discoverInDirectory"
                    ],
                    "fullName": "CommandDiscovery discoverInDirectory should skip non-directory entries",
                    "status": "passed",
                    "title": "should skip non-directory entries",
                    "duration": 14.350126028060913,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CommandDiscovery",
                        "discoverInDirectory"
                    ],
                    "fullName": "CommandDiscovery discoverInDirectory should handle missing module.yaml gracefully",
                    "status": "passed",
                    "title": "should handle missing module.yaml gracefully",
                    "duration": 0.40491795539855957,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CommandDiscovery",
                        "discoverInDirectory"
                    ],
                    "fullName": "CommandDiscovery discoverInDirectory should handle YAML parsing errors",
                    "status": "passed",
                    "title": "should handle YAML parsing errors",
                    "duration": 22.719392001628876,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CommandDiscovery",
                        "command loading"
                    ],
                    "fullName": "CommandDiscovery command loading should load commands from TypeScript files",
                    "status": "passed",
                    "title": "should load commands from TypeScript files",
                    "duration": 6.946205019950867,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CommandDiscovery",
                        "command loading"
                    ],
                    "fullName": "CommandDiscovery command loading should handle import errors gracefully",
                    "status": "passed",
                    "title": "should handle import errors gracefully",
                    "duration": 12.445819020271301,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CommandDiscovery",
                        "command loading"
                    ],
                    "fullName": "CommandDiscovery command loading should register valid commands",
                    "status": "passed",
                    "title": "should register valid commands",
                    "duration": 19.959707975387573,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423701,
            "endTime": 1753117423897.9597,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/cli/src/discovery.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "CLI Main Entry Point",
                        "Program Setup"
                    ],
                    "fullName": "CLI Main Entry Point Program Setup should create commander program with correct configuration",
                    "status": "passed",
                    "title": "should create commander program with correct configuration",
                    "duration": 120.869598031044,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Main Entry Point",
                        "Command Discovery"
                    ],
                    "fullName": "CLI Main Entry Point Command Discovery should discover and register commands on startup",
                    "status": "passed",
                    "title": "should discover and register commands on startup",
                    "duration": 69.60972398519516,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Main Entry Point",
                        "Command Discovery"
                    ],
                    "fullName": "CLI Main Entry Point Command Discovery should handle discovery errors",
                    "status": "passed",
                    "title": "should handle discovery errors",
                    "duration": 66.14787495136261,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Main Entry Point",
                        "Command Registration"
                    ],
                    "fullName": "CLI Main Entry Point Command Registration should register discovered commands",
                    "status": "passed",
                    "title": "should register discovered commands",
                    "duration": 70.90106403827667,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Main Entry Point",
                        "Command Registration"
                    ],
                    "fullName": "CLI Main Entry Point Command Registration should register command options",
                    "status": "passed",
                    "title": "should register command options",
                    "duration": 70.43137300014496,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Main Entry Point",
                        "Program Execution"
                    ],
                    "fullName": "CLI Main Entry Point Program Execution should parse command line arguments",
                    "status": "passed",
                    "title": "should parse command line arguments",
                    "duration": 55.790533006191254,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Main Entry Point",
                        "Program Execution"
                    ],
                    "fullName": "CLI Main Entry Point Program Execution should show help when no arguments provided",
                    "status": "passed",
                    "title": "should show help when no arguments provided",
                    "duration": 55.394393026828766,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424029,
            "endTime": 1753117424537.3943,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/cli/src/index.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "External API Setup"
                    ],
                    "fullName": "External API Setup should set up all external endpoints",
                    "status": "passed",
                    "title": "should set up all external endpoints",
                    "duration": 17.822705030441284,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "External API Setup"
                    ],
                    "fullName": "External API Setup should set up protected routes with auth middleware",
                    "status": "passed",
                    "title": "should set up protected routes with auth middleware",
                    "duration": 5.5874069929122925,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "External API Setup"
                    ],
                    "fullName": "External API Setup should handle health endpoint requests",
                    "status": "passed",
                    "title": "should handle health endpoint requests",
                    "duration": 1.114678978919983,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "External API Setup"
                    ],
                    "fullName": "External API Setup should log debug information in non-production",
                    "status": "passed",
                    "title": "should log debug information in non-production",
                    "duration": 1.1095239520072937,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "External API Setup"
                    ],
                    "fullName": "External API Setup should not log debug information in production",
                    "status": "passed",
                    "title": "should not log debug information in production",
                    "duration": 0.8326579928398132,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424492,
            "endTime": 1753117424520.8328,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/external/index.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "MCP Auth Adapter"
                    ],
                    "fullName": "MCP Auth Adapter should bypass auth when MCP_AUTH_DISABLED is true",
                    "status": "passed",
                    "title": "should bypass auth when MCP_AUTH_DISABLED is true",
                    "duration": 2.685030996799469,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Auth Adapter"
                    ],
                    "fullName": "MCP Auth Adapter should call auth middleware when auth is enabled",
                    "status": "passed",
                    "title": "should call auth middleware when auth is enabled",
                    "duration": 1.7524669766426086,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Auth Adapter"
                    ],
                    "fullName": "MCP Auth Adapter should transform 401 errors to MCP format",
                    "status": "passed",
                    "title": "should transform 401 errors to MCP format",
                    "duration": 0.7958260178565979,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Auth Adapter"
                    ],
                    "fullName": "MCP Auth Adapter should use default message when error_description is missing",
                    "status": "passed",
                    "title": "should use default message when error_description is missing",
                    "duration": 0.47512000799179077,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Auth Adapter"
                    ],
                    "fullName": "MCP Auth Adapter should handle requests without body id",
                    "status": "passed",
                    "title": "should handle requests without body id",
                    "duration": 0.3530770540237427,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Auth Adapter"
                    ],
                    "fullName": "MCP Auth Adapter should not transform non-401 responses",
                    "status": "passed",
                    "title": "should not transform non-401 responses",
                    "duration": 0.45458900928497314,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Auth Adapter"
                    ],
                    "fullName": "MCP Auth Adapter should use tunnel status for base URL",
                    "status": "passed",
                    "title": "should use tunnel status for base URL",
                    "duration": 0.4552289843559265,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Auth Adapter"
                    ],
                    "fullName": "MCP Auth Adapter should preserve original response methods",
                    "status": "passed",
                    "title": "should preserve original response methods",
                    "duration": 0.4213489890098572,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423749,
            "endTime": 1753117423756.4553,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/auth-adapter.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "MCP Server Config",
                        "serverConfig"
                    ],
                    "fullName": "MCP Server Config serverConfig should contain server name from CONFIG",
                    "status": "passed",
                    "title": "should contain server name from CONFIG",
                    "duration": 1.64438396692276,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Server Config",
                        "serverConfig"
                    ],
                    "fullName": "MCP Server Config serverConfig should contain server version from CONFIG",
                    "status": "passed",
                    "title": "should contain server version from CONFIG",
                    "duration": 0.3258170485496521,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Server Config",
                        "serverConfig"
                    ],
                    "fullName": "MCP Server Config serverConfig should have correct structure",
                    "status": "passed",
                    "title": "should have correct structure",
                    "duration": 0.527741014957428,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Server Config",
                        "serverCapabilities"
                    ],
                    "fullName": "MCP Server Config serverCapabilities should have capabilities property",
                    "status": "passed",
                    "title": "should have capabilities property",
                    "duration": 0.24242496490478516,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Server Config",
                        "serverCapabilities"
                    ],
                    "fullName": "MCP Server Config serverCapabilities should declare all required MCP capabilities",
                    "status": "passed",
                    "title": "should declare all required MCP capabilities",
                    "duration": 0.3879079818725586,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Server Config",
                        "serverCapabilities"
                    ],
                    "fullName": "MCP Server Config serverCapabilities should have empty capability objects",
                    "status": "passed",
                    "title": "should have empty capability objects",
                    "duration": 1.1288830041885376,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Server Config",
                        "serverCapabilities"
                    ],
                    "fullName": "MCP Server Config serverCapabilities should match MCP specification structure",
                    "status": "passed",
                    "title": "should match MCP specification structure",
                    "duration": 0.2845360040664673,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424898,
            "endTime": 1753117424903.2844,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/config.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "MCP Server Setup"
                    ],
                    "fullName": "MCP Server Setup should initialize MCP server registry",
                    "status": "passed",
                    "title": "should initialize MCP server registry",
                    "duration": 2.0400829911231995,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Server Setup"
                    ],
                    "fullName": "MCP Server Setup should register core MCP server",
                    "status": "passed",
                    "title": "should register core MCP server",
                    "duration": 2.6810460090637207,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Server Setup"
                    ],
                    "fullName": "MCP Server Setup should create handler function for core server",
                    "status": "passed",
                    "title": "should create handler function for core server",
                    "duration": 0.6196430325508118,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Server Setup"
                    ],
                    "fullName": "MCP Server Setup should provide session count getter",
                    "status": "passed",
                    "title": "should provide session count getter",
                    "duration": 0.3995089530944824,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Server Setup"
                    ],
                    "fullName": "MCP Server Setup should provide shutdown function",
                    "status": "passed",
                    "title": "should provide shutdown function",
                    "duration": 0.36003702878952026,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Server Setup"
                    ],
                    "fullName": "MCP Server Setup should load custom MCP servers",
                    "status": "passed",
                    "title": "should load custom MCP servers",
                    "duration": 0.9335600137710571,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Server Setup"
                    ],
                    "fullName": "MCP Server Setup should handle custom loader errors gracefully",
                    "status": "passed",
                    "title": "should handle custom loader errors gracefully",
                    "duration": 0.7838959693908691,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Server Setup"
                    ],
                    "fullName": "MCP Server Setup should setup routes for all servers",
                    "status": "passed",
                    "title": "should setup routes for all servers",
                    "duration": 0.4064580202102661,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Server Setup"
                    ],
                    "fullName": "MCP Server Setup should log success message",
                    "status": "passed",
                    "title": "should log success message",
                    "duration": 0.45963001251220703,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Server Setup"
                    ],
                    "fullName": "MCP Server Setup should complete setup even if custom loader fails",
                    "status": "passed",
                    "title": "should complete setup even if custom loader fails",
                    "duration": 0.49007999897003174,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424228,
            "endTime": 1753117424238.49,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/index.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Custom MCP Server Loader"
                    ],
                    "fullName": "Custom MCP Server Loader should create loader instance",
                    "status": "passed",
                    "title": "should create loader instance",
                    "duration": 2.6652550101280212,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Custom MCP Server Loader"
                    ],
                    "fullName": "Custom MCP Server Loader should load all servers from directory",
                    "status": "passed",
                    "title": "should load all servers from directory",
                    "duration": 4.842992007732391,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Custom MCP Server Loader"
                    ],
                    "fullName": "Custom MCP Server Loader should handle missing custom directory",
                    "status": "passed",
                    "title": "should handle missing custom directory",
                    "duration": 0.8663079738616943,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Custom MCP Server Loader"
                    ],
                    "fullName": "Custom MCP Server Loader should handle loader errors gracefully",
                    "status": "passed",
                    "title": "should handle loader errors gracefully",
                    "duration": 1.255547046661377,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Custom MCP Server Loader"
                    ],
                    "fullName": "Custom MCP Server Loader should use custom options",
                    "status": "passed",
                    "title": "should use custom options",
                    "duration": 0.42876899242401123,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Custom MCP Server Loader"
                    ],
                    "fullName": "Custom MCP Server Loader should load remote configs when enabled",
                    "status": "passed",
                    "title": "should load remote configs when enabled",
                    "duration": 0.620883047580719,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Custom MCP Server Loader"
                    ],
                    "fullName": "Custom MCP Server Loader should skip remote configs when disabled",
                    "status": "passed",
                    "title": "should skip remote configs when disabled",
                    "duration": 0.49560999870300293,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424319,
            "endTime": 1753117424332.6208,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/loader.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "registerServer"
                    ],
                    "fullName": "MCPServerRegistry registerServer should register a local server successfully",
                    "status": "passed",
                    "title": "should register a local server successfully",
                    "duration": 1.7607070207595825,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "registerServer"
                    ],
                    "fullName": "MCPServerRegistry registerServer should register a remote server successfully",
                    "status": "passed",
                    "title": "should register a remote server successfully",
                    "duration": 0.3339770436286926,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "registerServer"
                    ],
                    "fullName": "MCPServerRegistry registerServer should throw error when registering duplicate server ID",
                    "status": "passed",
                    "title": "should throw error when registering duplicate server ID",
                    "duration": 1.5422319769859314,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "setupRoutes"
                    ],
                    "fullName": "MCPServerRegistry setupRoutes should setup routes for registered servers",
                    "status": "passed",
                    "title": "should setup routes for registered servers",
                    "duration": 2.612774968147278,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "setupRoutes"
                    ],
                    "fullName": "MCPServerRegistry setupRoutes should setup core server at both /mcp/core and /mcp",
                    "status": "passed",
                    "title": "should setup core server at both /mcp/core and /mcp",
                    "duration": 0.483489990234375,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "setupRoutes"
                    ],
                    "fullName": "MCPServerRegistry setupRoutes should setup proxy routes for remote servers",
                    "status": "passed",
                    "title": "should setup proxy routes for remote servers",
                    "duration": 0.3738579750061035,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "status handling"
                    ],
                    "fullName": "MCPServerRegistry status handling should return server statuses",
                    "status": "passed",
                    "title": "should return server statuses",
                    "duration": 1.1036930084228516,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "status handling"
                    ],
                    "fullName": "MCPServerRegistry status handling should handle status endpoint",
                    "status": "passed",
                    "title": "should handle status endpoint",
                    "duration": 1.5741239786148071,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "proxy handling"
                    ],
                    "fullName": "MCPServerRegistry proxy handling should forward requests to remote servers",
                    "status": "passed",
                    "title": "should forward requests to remote servers",
                    "duration": 1.5967339873313904,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "proxy handling"
                    ],
                    "fullName": "MCPServerRegistry proxy handling should handle proxy timeouts",
                    "status": "passed",
                    "title": "should handle proxy timeouts",
                    "duration": 1.109762966632843,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "proxy handling"
                    ],
                    "fullName": "MCPServerRegistry proxy handling should handle proxy errors",
                    "status": "passed",
                    "title": "should handle proxy errors",
                    "duration": 0.8380880355834961,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "proxy handling"
                    ],
                    "fullName": "MCPServerRegistry proxy handling should handle authentication headers",
                    "status": "passed",
                    "title": "should handle authentication headers",
                    "duration": 0.8577980399131775,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "proxy handling"
                    ],
                    "fullName": "MCPServerRegistry proxy handling should handle basic authentication",
                    "status": "passed",
                    "title": "should handle basic authentication",
                    "duration": 1.0395410060882568,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "server management"
                    ],
                    "fullName": "MCPServerRegistry server management should get all servers",
                    "status": "passed",
                    "title": "should get all servers",
                    "duration": 1.5099520087242126,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "server management"
                    ],
                    "fullName": "MCPServerRegistry server management should get server count",
                    "status": "passed",
                    "title": "should get server count",
                    "duration": 0.634672999382019,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "server management"
                    ],
                    "fullName": "MCPServerRegistry server management should return undefined for non-existent server",
                    "status": "passed",
                    "title": "should return undefined for non-existent server",
                    "duration": 0.5378119945526123,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "shutdown"
                    ],
                    "fullName": "MCPServerRegistry shutdown should shutdown all local servers",
                    "status": "passed",
                    "title": "should shutdown all local servers",
                    "duration": 1.196994960308075,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "shutdown"
                    ],
                    "fullName": "MCPServerRegistry shutdown should handle shutdown errors gracefully",
                    "status": "passed",
                    "title": "should handle shutdown errors gracefully",
                    "duration": 1.0602720379829407,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "singleton pattern"
                    ],
                    "fullName": "MCPServerRegistry singleton pattern should initialize registry singleton",
                    "status": "passed",
                    "title": "should initialize registry singleton",
                    "duration": 36.369150042533875,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "singleton pattern"
                    ],
                    "fullName": "MCPServerRegistry singleton pattern should get existing registry",
                    "status": "passed",
                    "title": "should get existing registry",
                    "duration": 9.1093710064888,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServerRegistry",
                        "singleton pattern"
                    ],
                    "fullName": "MCPServerRegistry singleton pattern should throw error when getting registry before initialization",
                    "status": "passed",
                    "title": "should throw error when getting registry before initialization",
                    "duration": 22.958782017230988,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423770,
            "endTime": 1753117423860.9587,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/registry.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "MCP Types",
                        "MCPServerType Enum"
                    ],
                    "fullName": "MCP Types MCPServerType Enum should have correct server type values",
                    "status": "passed",
                    "title": "should have correct server type values",
                    "duration": 1.262386977672577,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Types",
                        "MCPServerType Enum"
                    ],
                    "fullName": "MCP Types MCPServerType Enum should have all expected enum keys",
                    "status": "passed",
                    "title": "should have all expected enum keys",
                    "duration": 0.7540459632873535,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Types",
                        "MCPServerType Enum"
                    ],
                    "fullName": "MCP Types MCPServerType Enum should have correct string values",
                    "status": "passed",
                    "title": "should have correct string values",
                    "duration": 0.17614400386810303,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Types",
                        "MCPServerType Enum"
                    ],
                    "fullName": "MCP Types MCPServerType Enum should be usable in type guards",
                    "status": "passed",
                    "title": "should be usable in type guards",
                    "duration": 0.8975290060043335,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424958,
            "endTime": 1753117424960.8975,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/types.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "CLI Key Generation",
                        "PEM format generation"
                    ],
                    "fullName": "CLI Key Generation PEM format generation should generate RSA key pair in PEM format",
                    "status": "passed",
                    "title": "should generate RSA key pair in PEM format",
                    "duration": 261.26623398065567,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Key Generation",
                        "PEM format generation"
                    ],
                    "fullName": "CLI Key Generation PEM format generation should generate valid RSA keys with correct modulus",
                    "status": "passed",
                    "title": "should generate valid RSA keys with correct modulus",
                    "duration": 153.09698396921158,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Key Generation",
                        "JWK format generation"
                    ],
                    "fullName": "CLI Key Generation JWK format generation should generate keys in JWK format with correct structure",
                    "status": "passed",
                    "title": "should generate keys in JWK format with correct structure",
                    "duration": 269.34071201086044,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Key Generation",
                        "JWK format generation"
                    ],
                    "fullName": "CLI Key Generation JWK format generation should support RS512 algorithm",
                    "status": "passed",
                    "title": "should support RS512 algorithm",
                    "duration": 2218.619720995426,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Key Generation",
                        "error handling"
                    ],
                    "fullName": "CLI Key Generation error handling should throw error for invalid output directory",
                    "status": "passed",
                    "title": "should throw error for invalid output directory",
                    "duration": 162.39569401741028,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Key Generation",
                        "error handling"
                    ],
                    "fullName": "CLI Key Generation error handling should handle symmetric algorithm gracefully",
                    "status": "passed",
                    "title": "should handle symmetric algorithm gracefully",
                    "duration": 2.8868789672851562,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424185,
            "endTime": 1753117427253.887,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/tools/generate-key/generate-key.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Auth Singleton"
                    ],
                    "fullName": "Auth Singleton should return the auth module",
                    "status": "passed",
                    "title": "should return the auth module",
                    "duration": 1.449530005455017,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Auth Singleton"
                    ],
                    "fullName": "Auth Singleton should throw error when auth module not loaded",
                    "status": "passed",
                    "title": "should throw error when auth module not loaded",
                    "duration": 1.1991750001907349,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Auth Singleton"
                    ],
                    "fullName": "Auth Singleton should have auth module methods",
                    "status": "passed",
                    "title": "should have auth module methods",
                    "duration": 0.4560399651527405,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424962,
            "endTime": 1753117424965.456,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/auth/singleton.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "TunnelStatus",
                        "singleton pattern"
                    ],
                    "fullName": "TunnelStatus singleton pattern returns the same instance",
                    "status": "passed",
                    "title": "returns the same instance",
                    "duration": 2.4479609727859497,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelStatus",
                        "setBaseUrl"
                    ],
                    "fullName": "TunnelStatus setBaseUrl sets the base URL and logs the update",
                    "status": "passed",
                    "title": "sets the base URL and logs the update",
                    "duration": 1.9650610089302063,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelStatus",
                        "setBaseUrl"
                    ],
                    "fullName": "TunnelStatus setBaseUrl updates existing URL",
                    "status": "passed",
                    "title": "updates existing URL",
                    "duration": 0.7518759965896606,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelStatus",
                        "setBaseUrl"
                    ],
                    "fullName": "TunnelStatus setBaseUrl can set URL to null",
                    "status": "passed",
                    "title": "can set URL to null",
                    "duration": 0.68333500623703,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelStatus",
                        "getBaseUrl"
                    ],
                    "fullName": "TunnelStatus getBaseUrl returns null when not set",
                    "status": "passed",
                    "title": "returns null when not set",
                    "duration": 0.2983860373497009,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelStatus",
                        "getBaseUrl"
                    ],
                    "fullName": "TunnelStatus getBaseUrl returns the set URL",
                    "status": "passed",
                    "title": "returns the set URL",
                    "duration": 0.3211669921875,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelStatus",
                        "getBaseUrlOrDefault"
                    ],
                    "fullName": "TunnelStatus getBaseUrlOrDefault returns default URL when base URL is not set",
                    "status": "passed",
                    "title": "returns default URL when base URL is not set",
                    "duration": 0.3062359690666199,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelStatus",
                        "getBaseUrlOrDefault"
                    ],
                    "fullName": "TunnelStatus getBaseUrlOrDefault returns base URL when set",
                    "status": "passed",
                    "title": "returns base URL when set",
                    "duration": 0.3006959557533264,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelStatus",
                        "getBaseUrlOrDefault"
                    ],
                    "fullName": "TunnelStatus getBaseUrlOrDefault returns base URL even when default is provided",
                    "status": "passed",
                    "title": "returns base URL even when default is provided",
                    "duration": 0.4709699749946594,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelStatus",
                        "state persistence"
                    ],
                    "fullName": "TunnelStatus state persistence maintains state across multiple operations",
                    "status": "passed",
                    "title": "maintains state across multiple operations",
                    "duration": 0.4712499976158142,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424565,
            "endTime": 1753117424573.4712,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/auth/tunnel-status.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "CLIModule",
                        "initialization"
                    ],
                    "fullName": "CLIModule initialization should initialize with command discovery",
                    "status": "passed",
                    "title": "should initialize with command discovery",
                    "duration": 3.237507998943329,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLIModule",
                        "getAllCommands"
                    ],
                    "fullName": "CLIModule getAllCommands should return discovered commands",
                    "status": "passed",
                    "title": "should return discovered commands",
                    "duration": 0.738785982131958,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLIModule",
                        "getCommandHelp"
                    ],
                    "fullName": "CLIModule getCommandHelp should return help for existing command",
                    "status": "passed",
                    "title": "should return help for existing command",
                    "duration": 0.42562901973724365,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLIModule",
                        "getCommandHelp"
                    ],
                    "fullName": "CLIModule getCommandHelp should return not found message for missing command",
                    "status": "passed",
                    "title": "should return not found message for missing command",
                    "duration": 0.2701350450515747,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLIModule",
                        "formatCommands"
                    ],
                    "fullName": "CLIModule formatCommands should format commands as text",
                    "status": "passed",
                    "title": "should format commands as text",
                    "duration": 6.498381018638611,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLIModule",
                        "formatCommands"
                    ],
                    "fullName": "CLIModule formatCommands should format commands as JSON",
                    "status": "passed",
                    "title": "should format commands as JSON",
                    "duration": 0.31015604734420776,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLIModule",
                        "formatCommands"
                    ],
                    "fullName": "CLIModule formatCommands should format commands as table",
                    "status": "passed",
                    "title": "should format commands as table",
                    "duration": 0.22751402854919434,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLIModule",
                        "generateDocs"
                    ],
                    "fullName": "CLIModule generateDocs should generate markdown documentation",
                    "status": "passed",
                    "title": "should generate markdown documentation",
                    "duration": 0.494439959526062,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLIModule",
                        "generateDocs"
                    ],
                    "fullName": "CLIModule generateDocs should generate JSON documentation for non-markdown format",
                    "status": "passed",
                    "title": "should generate JSON documentation for non-markdown format",
                    "duration": 0.21083498001098633,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424220,
            "endTime": 1753117424233.211,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/cli/cli.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "ConfigModule",
                        "initialization"
                    ],
                    "fullName": "ConfigModule initialization should initialize with default config",
                    "status": "passed",
                    "title": "should initialize with default config",
                    "duration": 3.145705997943878,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ConfigModule",
                        "initialization"
                    ],
                    "fullName": "ConfigModule initialization should load config from file if exists",
                    "status": "passed",
                    "title": "should load config from file if exists",
                    "duration": 0.7906969785690308,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ConfigModule",
                        "initialization"
                    ],
                    "fullName": "ConfigModule initialization should load config from environment variables",
                    "status": "passed",
                    "title": "should load config from environment variables",
                    "duration": 0.37651801109313965,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ConfigModule",
                        "get/set operations"
                    ],
                    "fullName": "ConfigModule get/set operations should set and get config values",
                    "status": "passed",
                    "title": "should set and get config values",
                    "duration": 0.5338410139083862,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ConfigModule",
                        "get/set operations"
                    ],
                    "fullName": "ConfigModule get/set operations should return all config when key is not provided",
                    "status": "passed",
                    "title": "should return all config when key is not provided",
                    "duration": 0.4944609999656677,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ConfigModule",
                        "get/set operations"
                    ],
                    "fullName": "ConfigModule get/set operations should save configuration to file",
                    "status": "passed",
                    "title": "should save configuration to file",
                    "duration": 0.3863080143928528,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ConfigModule",
                        "validation"
                    ],
                    "fullName": "ConfigModule validation should validate valid configuration",
                    "status": "passed",
                    "title": "should validate valid configuration",
                    "duration": 1.2772169709205627,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ConfigModule",
                        "validation"
                    ],
                    "fullName": "ConfigModule validation should detect invalid port number",
                    "status": "passed",
                    "title": "should detect invalid port number",
                    "duration": 1.1143230199813843,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ConfigModule",
                        "lifecycle"
                    ],
                    "fullName": "ConfigModule lifecycle should save configuration on stop",
                    "status": "passed",
                    "title": "should save configuration on stop",
                    "duration": 0.8472579717636108,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ConfigModule",
                        "healthCheck"
                    ],
                    "fullName": "ConfigModule healthCheck should return healthy when config directory exists",
                    "status": "passed",
                    "title": "should return healthy when config directory exists",
                    "duration": 0.7010849714279175,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424278,
            "endTime": 1753117424288.7012,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/config/config.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Database Module",
                        "initializeDatabase"
                    ],
                    "fullName": "Database Module initializeDatabase should initialize database with default config",
                    "status": "passed",
                    "title": "should initialize database with default config",
                    "duration": 4.65947699546814,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Database Module",
                        "initializeDatabase"
                    ],
                    "fullName": "Database Module initializeDatabase should use environment variables for configuration",
                    "status": "passed",
                    "title": "should use environment variables for configuration",
                    "duration": 2.4375810027122498,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Database Module",
                        "initializeDatabase"
                    ],
                    "fullName": "Database Module initializeDatabase should merge custom config with defaults",
                    "status": "passed",
                    "title": "should merge custom config with defaults",
                    "duration": 0.7071750164031982,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Database Module",
                        "initializeDatabase"
                    ],
                    "fullName": "Database Module initializeDatabase should handle initialization errors",
                    "status": "passed",
                    "title": "should handle initialization errors",
                    "duration": 2.4755899906158447,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Database Module",
                        "initializeDatabase"
                    ],
                    "fullName": "Database Module initializeDatabase should use production modules path in production",
                    "status": "passed",
                    "title": "should use production modules path in production",
                    "duration": 0.6515340209007263,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Database Module",
                        "Service getters"
                    ],
                    "fullName": "Database Module Service getters should return database service instance",
                    "status": "passed",
                    "title": "should return database service instance",
                    "duration": 0.6077930331230164,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Database Module",
                        "Service getters"
                    ],
                    "fullName": "Database Module Service getters should return schema service instance",
                    "status": "passed",
                    "title": "should return schema service instance",
                    "duration": 0.3669379949569702,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Database Module",
                        "Service getters"
                    ],
                    "fullName": "Database Module Service getters should return migration service instance",
                    "status": "passed",
                    "title": "should return migration service instance",
                    "duration": 0.4101080298423767,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Database Module",
                        "shutdownDatabase"
                    ],
                    "fullName": "Database Module shutdownDatabase should disconnect database service",
                    "status": "passed",
                    "title": "should disconnect database service",
                    "duration": 0.5066810250282288,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Database Module",
                        "shutdownDatabase"
                    ],
                    "fullName": "Database Module shutdownDatabase should handle shutdown errors",
                    "status": "passed",
                    "title": "should handle shutdown errors",
                    "duration": 0.6880640387535095,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423739,
            "endTime": 1753117423753.688,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/database/index.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "ExtensionModule",
                        "Extension management"
                    ],
                    "fullName": "ExtensionModule Extension management handles initialization and directory creation",
                    "status": "passed",
                    "title": "handles initialization and directory creation",
                    "duration": 3.5367040038108826,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ExtensionModule",
                        "Extension management"
                    ],
                    "fullName": "ExtensionModule Extension management manages extension retrieval and filtering",
                    "status": "passed",
                    "title": "manages extension retrieval and filtering",
                    "duration": 1.4633110165596008,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ExtensionModule",
                        "Extension validation"
                    ],
                    "fullName": "ExtensionModule Extension validation validates { name: 'test', version: '1.0.0', type: 'service' }",
                    "status": "passed",
                    "title": "validates { name: 'test', version: '1.0.0', type: 'service' }",
                    "duration": 1.4791209697723389,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ExtensionModule",
                        "Extension validation"
                    ],
                    "fullName": "ExtensionModule Extension validation validates { name: 'test' }",
                    "status": "passed",
                    "title": "validates { name: 'test' }",
                    "duration": 0.6611140370368958,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ExtensionModule",
                        "Extension validation"
                    ],
                    "fullName": "ExtensionModule Extension validation validates { name: 'test', version: '1.0.0', type: 'service', cli: { commands: [ { name: 'test' } ] } }",
                    "status": "passed",
                    "title": "validates { name: 'test', version: '1.0.0', type: 'service', cli: { commands: [ { name: 'test' } ] } }",
                    "duration": 0.4255790114402771,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ExtensionModule",
                        "Extension removal"
                    ],
                    "fullName": "ExtensionModule Extension removal prevents removal of core modules",
                    "status": "passed",
                    "title": "prevents removal of core modules",
                    "duration": 2.337028980255127,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ExtensionModule",
                        "Extension removal"
                    ],
                    "fullName": "ExtensionModule Extension removal removes custom extensions",
                    "status": "passed",
                    "title": "removes custom extensions",
                    "duration": 1.8112679719924927,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ExtensionModule",
                        "Health check"
                    ],
                    "fullName": "ExtensionModule Health check returns true when { healthy: true }",
                    "status": "passed",
                    "title": "returns true when { healthy: true }",
                    "duration": 0.7766169905662537,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "ExtensionModule",
                        "Health check"
                    ],
                    "fullName": "ExtensionModule Health check returns false when { healthy: false, message: 'Modules directory not found' }",
                    "status": "passed",
                    "title": "returns false when { healthy: false, message: 'Modules directory not found' }",
                    "duration": 0.599763035774231,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424261,
            "endTime": 1753117424274.5999,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/extension/extension.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Heartbeat Module",
                        "Module behavior"
                    ],
                    "fullName": "Heartbeat Module Module behavior parses interval 1s correctly",
                    "status": "passed",
                    "title": "parses interval 1s correctly",
                    "duration": 3.584464967250824,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Heartbeat Module",
                        "Module behavior"
                    ],
                    "fullName": "Heartbeat Module Module behavior parses interval 30s correctly",
                    "status": "passed",
                    "title": "parses interval 30s correctly",
                    "duration": 0.44652003049850464,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Heartbeat Module",
                        "Module behavior"
                    ],
                    "fullName": "Heartbeat Module Module behavior parses interval 5m correctly",
                    "status": "passed",
                    "title": "parses interval 5m correctly",
                    "duration": 0.3480069637298584,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Heartbeat Module",
                        "Module behavior"
                    ],
                    "fullName": "Heartbeat Module Module behavior parses interval invalid correctly",
                    "status": "passed",
                    "title": "parses interval invalid correctly",
                    "duration": 1.063463032245636,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Heartbeat Module",
                        "Module behavior"
                    ],
                    "fullName": "Heartbeat Module Module behavior generates complete status with configurable metrics",
                    "status": "passed",
                    "title": "generates complete status with configurable metrics",
                    "duration": 3.641036033630371,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Heartbeat Module",
                        "Module behavior"
                    ],
                    "fullName": "Heartbeat Module Module behavior handles file operations correctly",
                    "status": "passed",
                    "title": "handles file operations correctly",
                    "duration": 4.255799055099487,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Heartbeat Module",
                        "Daemon lifecycle"
                    ],
                    "fullName": "Heartbeat Module Daemon lifecycle manages start/stop lifecycle correctly",
                    "status": "passed",
                    "title": "manages start/stop lifecycle correctly",
                    "duration": 4.900672972202301,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Heartbeat Module",
                        "Daemon lifecycle"
                    ],
                    "fullName": "Heartbeat Module Daemon lifecycle handles autoStart configuration",
                    "status": "passed",
                    "title": "handles autoStart configuration",
                    "duration": 1.085341989994049,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424207,
            "endTime": 1753117424229.0854,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/heartbeat/heartbeat.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "LoggerModule",
                        "Module lifecycle and health"
                    ],
                    "fullName": "LoggerModule Module lifecycle and health should handle complete lifecycle",
                    "status": "passed",
                    "title": "should handle complete lifecycle",
                    "duration": 5.156738042831421,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "LoggerModule",
                        "Module lifecycle and health"
                    ],
                    "fullName": "LoggerModule Module lifecycle and health should provide logger service interface",
                    "status": "passed",
                    "title": "should provide logger service interface",
                    "duration": 1.4741210341453552,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "LoggerModule",
                        "Logging behavior"
                    ],
                    "fullName": "LoggerModule Logging behavior logs debug messages correctly",
                    "status": "passed",
                    "title": "logs debug messages correctly",
                    "duration": 3.1241759657859802,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "LoggerModule",
                        "Logging behavior"
                    ],
                    "fullName": "LoggerModule Logging behavior logs info messages correctly",
                    "status": "passed",
                    "title": "logs info messages correctly",
                    "duration": 0.9766299724578857,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "LoggerModule",
                        "Logging behavior"
                    ],
                    "fullName": "LoggerModule Logging behavior logs warn messages correctly",
                    "status": "passed",
                    "title": "logs warn messages correctly",
                    "duration": 0.7501059770584106,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "LoggerModule",
                        "Logging behavior"
                    ],
                    "fullName": "LoggerModule Logging behavior logs error messages correctly",
                    "status": "passed",
                    "title": "logs error messages correctly",
                    "duration": 0.7154260277748108,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "LoggerModule",
                        "Logging behavior"
                    ],
                    "fullName": "LoggerModule Logging behavior handles error logs with dual file output",
                    "status": "passed",
                    "title": "handles error logs with dual file output",
                    "duration": 1.4975000023841858,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "LoggerModule",
                        "Logging behavior"
                    ],
                    "fullName": "LoggerModule Logging behavior respects output configuration",
                    "status": "passed",
                    "title": "respects output configuration",
                    "duration": 0.8132070302963257,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "LoggerModule",
                        "Logging behavior"
                    ],
                    "fullName": "LoggerModule Logging behavior handles file write errors gracefully",
                    "status": "passed",
                    "title": "handles file write errors gracefully",
                    "duration": 1.5597229599952698,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "LoggerModule",
                        "Log management"
                    ],
                    "fullName": "LoggerModule Log management clears logs correctly",
                    "status": "passed",
                    "title": "clears logs correctly",
                    "duration": 1.3891289830207825,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "LoggerModule",
                        "Log management"
                    ],
                    "fullName": "LoggerModule Log management retrieves logs correctly",
                    "status": "passed",
                    "title": "retrieves logs correctly",
                    "duration": 1.1197329759597778,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "LoggerModule",
                        "Special logging features"
                    ],
                    "fullName": "LoggerModule Special logging features handles access logs and custom levels",
                    "status": "passed",
                    "title": "handles access logs and custom levels",
                    "duration": 1.0936920046806335,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423708,
            "endTime": 1753117423729.0938,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/logger/logger.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "JWT Functions",
                        "jwtSign"
                    ],
                    "fullName": "JWT Functions jwtSign should sign JWT with payload",
                    "status": "passed",
                    "title": "should sign JWT with payload",
                    "duration": 4.725418031215668,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "JWT Functions",
                        "jwtSign"
                    ],
                    "fullName": "JWT Functions jwtSign should include standard claims",
                    "status": "passed",
                    "title": "should include standard claims",
                    "duration": 1.1236029863357544,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "JWT Functions",
                        "jwtVerify"
                    ],
                    "fullName": "JWT Functions jwtVerify should verify valid JWT",
                    "status": "passed",
                    "title": "should verify valid JWT",
                    "duration": 0.7212650179862976,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "JWT Functions",
                        "jwtVerify"
                    ],
                    "fullName": "JWT Functions jwtVerify should reject invalid signature",
                    "status": "passed",
                    "title": "should reject invalid signature",
                    "duration": 1.6950149536132812,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "JWT Functions",
                        "jwtVerify"
                    ],
                    "fullName": "JWT Functions jwtVerify should reject malformed tokens",
                    "status": "passed",
                    "title": "should reject malformed tokens",
                    "duration": 0.9412200450897217,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "JWT Functions",
                        "jwtVerify"
                    ],
                    "fullName": "JWT Functions jwtVerify should handle expired tokens",
                    "status": "passed",
                    "title": "should handle expired tokens",
                    "duration": 0.5457009673118591,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "JWT Functions",
                        "Integration"
                    ],
                    "fullName": "JWT Functions Integration should sign and verify round trip",
                    "status": "passed",
                    "title": "should sign and verify round trip",
                    "duration": 0.9818509817123413,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424306,
            "endTime": 1753117424316.982,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/external/auth/jwt.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Auth Middleware",
                        "authMiddleware"
                    ],
                    "fullName": "Auth Middleware authMiddleware should authenticate valid Bearer token",
                    "status": "passed",
                    "title": "should authenticate valid Bearer token",
                    "duration": 3.2956889867782593,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Auth Middleware",
                        "authMiddleware"
                    ],
                    "fullName": "Auth Middleware authMiddleware should reject missing authorization header",
                    "status": "passed",
                    "title": "should reject missing authorization header",
                    "duration": 0.5049410462379456,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Auth Middleware",
                        "authMiddleware"
                    ],
                    "fullName": "Auth Middleware authMiddleware should reject non-Bearer tokens",
                    "status": "passed",
                    "title": "should reject non-Bearer tokens",
                    "duration": 0.4041590094566345,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Auth Middleware",
                        "authMiddleware"
                    ],
                    "fullName": "Auth Middleware authMiddleware should handle invalid tokens",
                    "status": "passed",
                    "title": "should handle invalid tokens",
                    "duration": 0.644044041633606,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Auth Middleware",
                        "authMiddleware"
                    ],
                    "fullName": "Auth Middleware authMiddleware should handle expired tokens",
                    "status": "passed",
                    "title": "should handle expired tokens",
                    "duration": 0.41589903831481934,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Auth Middleware",
                        "authMiddleware"
                    ],
                    "fullName": "Auth Middleware authMiddleware should pass token with spaces without trimming",
                    "status": "passed",
                    "title": "should pass token with spaces without trimming",
                    "duration": 0.4204379916191101,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Auth Middleware",
                        "authMiddleware"
                    ],
                    "fullName": "Auth Middleware authMiddleware should reject invalid issuer",
                    "status": "passed",
                    "title": "should reject invalid issuer",
                    "duration": 0.41687899827957153,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Auth Middleware",
                        "authMiddleware"
                    ],
                    "fullName": "Auth Middleware authMiddleware should reject invalid audience",
                    "status": "passed",
                    "title": "should reject invalid audience",
                    "duration": 0.4080989956855774,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Auth Middleware",
                        "authMiddleware"
                    ],
                    "fullName": "Auth Middleware authMiddleware should reject non-access token type",
                    "status": "passed",
                    "title": "should reject non-access token type",
                    "duration": 0.38166797161102295,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423699,
            "endTime": 1753117423706.4082,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/external/middleware/auth.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "HealthEndpoint",
                        "getHealth"
                    ],
                    "fullName": "HealthEndpoint getHealth should return health status with fresh heartbeat data",
                    "status": "passed",
                    "title": "should return health status with fresh heartbeat data",
                    "duration": 8.57972002029419,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "HealthEndpoint",
                        "getHealth"
                    ],
                    "fullName": "HealthEndpoint getHealth should indicate degraded status when heartbeat is stale",
                    "status": "passed",
                    "title": "should indicate degraded status when heartbeat is stale",
                    "duration": 2.129553973674774,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "HealthEndpoint",
                        "getHealth"
                    ],
                    "fullName": "HealthEndpoint getHealth should handle missing heartbeat file gracefully",
                    "status": "passed",
                    "title": "should handle missing heartbeat file gracefully",
                    "duration": 1.5726630091667175,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "HealthEndpoint",
                        "getHealth"
                    ],
                    "fullName": "HealthEndpoint getHealth should detect unhealthy heartbeat status",
                    "status": "passed",
                    "title": "should detect unhealthy heartbeat status",
                    "duration": 1.6882149577140808,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "HealthEndpoint",
                        "getHealth"
                    ],
                    "fullName": "HealthEndpoint getHealth should handle heartbeat read errors gracefully",
                    "status": "passed",
                    "title": "should handle heartbeat read errors gracefully",
                    "duration": 1.61080402135849,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424376,
            "endTime": 1753117424391.6108,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/external/rest/health.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "SplashEndpoint",
                        "handleSplashPage"
                    ],
                    "fullName": "SplashEndpoint handleSplashPage should render and send splash page HTML",
                    "status": "passed",
                    "title": "should render and send splash page HTML",
                    "duration": 4.293850004673004,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SplashEndpoint",
                        "handleSplashPage"
                    ],
                    "fullName": "SplashEndpoint handleSplashPage should handle multiple requests",
                    "status": "passed",
                    "title": "should handle multiple requests",
                    "duration": 0.709725022315979,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "setupRoutes"
                    ],
                    "fullName": "setupRoutes should register GET / route",
                    "status": "passed",
                    "title": "should register GET / route",
                    "duration": 1.695736050605774,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "setupRoutes"
                    ],
                    "fullName": "setupRoutes should handle requests through the registered route",
                    "status": "passed",
                    "title": "should handle requests through the registered route",
                    "duration": 0.5881419777870178,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "setupRoutes"
                    ],
                    "fullName": "setupRoutes should create new endpoint instance",
                    "status": "passed",
                    "title": "should create new endpoint instance",
                    "duration": 0.9600600004196167,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424753,
            "endTime": 1753117424761.96,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/external/rest/splash.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Permission System",
                        "hasPermission"
                    ],
                    "fullName": "Permission System hasPermission should return true for exact permission match",
                    "status": "passed",
                    "title": "should return true for exact permission match",
                    "duration": 2.0740090012550354,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Permission System",
                        "hasPermission"
                    ],
                    "fullName": "Permission System hasPermission should return false for missing permission",
                    "status": "passed",
                    "title": "should return false for missing permission",
                    "duration": 0.3255069851875305,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Permission System",
                        "hasPermission"
                    ],
                    "fullName": "Permission System hasPermission should handle wildcard permissions",
                    "status": "passed",
                    "title": "should handle wildcard permissions",
                    "duration": 0.35614800453186035,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Permission System",
                        "hasPermission"
                    ],
                    "fullName": "Permission System hasPermission should handle super admin wildcard",
                    "status": "passed",
                    "title": "should handle super admin wildcard",
                    "duration": 0.20485395193099976,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Permission System",
                        "hasPermission"
                    ],
                    "fullName": "Permission System hasPermission should include custom permissions",
                    "status": "passed",
                    "title": "should include custom permissions",
                    "duration": 0.2135549783706665,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Permission System",
                        "ROLE_PERMISSIONS"
                    ],
                    "fullName": "Permission System ROLE_PERMISSIONS should define admin role with full permissions",
                    "status": "passed",
                    "title": "should define admin role with full permissions",
                    "duration": 1.106393039226532,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Permission System",
                        "ROLE_PERMISSIONS"
                    ],
                    "fullName": "Permission System ROLE_PERMISSIONS should define basic role with limited permissions",
                    "status": "passed",
                    "title": "should define basic role with limited permissions",
                    "duration": 0.48708099126815796,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424643,
            "endTime": 1753117424648.487,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/permissions.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "MCPServer",
                        "initialization"
                    ],
                    "fullName": "MCPServer initialization should create server with correct metadata",
                    "status": "passed",
                    "title": "should create server with correct metadata",
                    "duration": 2.3609700202941895,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServer",
                        "initialization"
                    ],
                    "fullName": "MCPServer initialization should initialize with empty session state",
                    "status": "passed",
                    "title": "should initialize with empty session state",
                    "duration": 0.29184603691101074,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServer",
                        "initialization"
                    ],
                    "fullName": "MCPServer initialization should expose required session management methods",
                    "status": "passed",
                    "title": "should expose required session management methods",
                    "duration": 0.3966990113258362,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServer",
                        "session management"
                    ],
                    "fullName": "MCPServer session management should track active sessions correctly",
                    "status": "passed",
                    "title": "should track active sessions correctly",
                    "duration": 1.5073400139808655,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServer",
                        "session management"
                    ],
                    "fullName": "MCPServer session management should clean up old sessions",
                    "status": "passed",
                    "title": "should clean up old sessions",
                    "duration": 0.6877949833869934,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServer",
                        "shutdown"
                    ],
                    "fullName": "MCPServer shutdown should clear all sessions on shutdown",
                    "status": "passed",
                    "title": "should clear all sessions on shutdown",
                    "duration": 0.40578895807266235,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCPServer",
                        "shutdown"
                    ],
                    "fullName": "MCPServer shutdown should clear cleanup interval on shutdown",
                    "status": "passed",
                    "title": "should clear cleanup interval on shutdown",
                    "duration": 0.2590849995613098,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424898,
            "endTime": 1753117424904.4058,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/server.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "generatekey CLI command",
                        "execute"
                    ],
                    "fullName": "generatekey CLI command execute generates JWT keys with default output directory",
                    "status": "passed",
                    "title": "generates JWT keys with default output directory",
                    "duration": 4.840771019458771,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "generatekey CLI command",
                        "execute"
                    ],
                    "fullName": "generatekey CLI command execute generates JWT keys with custom output directory",
                    "status": "passed",
                    "title": "generates JWT keys with custom output directory",
                    "duration": 0.643032968044281,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "generatekey CLI command",
                        "execute"
                    ],
                    "fullName": "generatekey CLI command execute generates keys in JWK format",
                    "status": "passed",
                    "title": "generates keys in JWK format",
                    "duration": 0.6226930022239685,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "generatekey CLI command",
                        "execute"
                    ],
                    "fullName": "generatekey CLI command execute rejects non-JWT key types",
                    "status": "passed",
                    "title": "rejects non-JWT key types",
                    "duration": 1.9721009731292725,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "generatekey CLI command",
                        "execute"
                    ],
                    "fullName": "generatekey CLI command execute handles key generation errors",
                    "status": "passed",
                    "title": "handles key generation errors",
                    "duration": 0.7339450120925903,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "generatekey CLI command",
                        "execute"
                    ],
                    "fullName": "generatekey CLI command execute creates output directory if it does not exist",
                    "status": "passed",
                    "title": "creates output directory if it does not exist",
                    "duration": 0.5314809679985046,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "generatekey CLI command",
                        "execute"
                    ],
                    "fullName": "generatekey CLI command execute does not create directory if custom output is provided",
                    "status": "passed",
                    "title": "does not create directory if custom output is provided",
                    "duration": 0.33765697479248047,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424205,
            "endTime": 1753117424218.3376,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/auth/cli/generatekey.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "providers CLI command",
                        "list subcommand"
                    ],
                    "fullName": "providers CLI command list subcommand displays message when no providers configured",
                    "status": "passed",
                    "title": "displays message when no providers configured",
                    "duration": 2.489601969718933,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "providers CLI command",
                        "list subcommand"
                    ],
                    "fullName": "providers CLI command list subcommand lists configured providers",
                    "status": "passed",
                    "title": "lists configured providers",
                    "duration": 0.7411549687385559,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "providers CLI command",
                        "list subcommand"
                    ],
                    "fullName": "providers CLI command list subcommand handles errors when listing providers",
                    "status": "passed",
                    "title": "handles errors when listing providers",
                    "duration": 3.3996400237083435,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "providers CLI command",
                        "reload subcommand"
                    ],
                    "fullName": "providers CLI command reload subcommand reloads providers successfully",
                    "status": "passed",
                    "title": "reloads providers successfully",
                    "duration": 0.702023983001709,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "providers CLI command",
                        "reload subcommand"
                    ],
                    "fullName": "providers CLI command reload subcommand reloads with no providers",
                    "status": "passed",
                    "title": "reloads with no providers",
                    "duration": 0.4128590226173401,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "providers CLI command",
                        "reload subcommand"
                    ],
                    "fullName": "providers CLI command reload subcommand handles reload errors",
                    "status": "passed",
                    "title": "handles reload errors",
                    "duration": 0.7585859894752502,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424185,
            "endTime": 1753117424194.7585,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/auth/cli/providers.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "tunnel CLI commands",
                        "tunnelStatus"
                    ],
                    "fullName": "tunnel CLI commands tunnelStatus displays inactive tunnel status",
                    "status": "passed",
                    "title": "displays inactive tunnel status",
                    "duration": 2.7420380115509033,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "tunnel CLI commands",
                        "tunnelStatus"
                    ],
                    "fullName": "tunnel CLI commands tunnelStatus displays active cloudflared tunnel status",
                    "status": "passed",
                    "title": "displays active cloudflared tunnel status",
                    "duration": 0.7295050024986267,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "tunnel CLI commands",
                        "tunnelStatus"
                    ],
                    "fullName": "tunnel CLI commands tunnelStatus displays tunnel error if present",
                    "status": "passed",
                    "title": "displays tunnel error if present",
                    "duration": 0.5225110054016113,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "tunnel CLI commands",
                        "startTunnel"
                    ],
                    "fullName": "tunnel CLI commands startTunnel starts tunnel successfully",
                    "status": "passed",
                    "title": "starts tunnel successfully",
                    "duration": 3.0266979932785034,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "tunnel CLI commands",
                        "startTunnel"
                    ],
                    "fullName": "tunnel CLI commands startTunnel handles tunnel start errors",
                    "status": "passed",
                    "title": "handles tunnel start errors",
                    "duration": 2.5785529613494873,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "tunnel CLI commands",
                        "startTunnel"
                    ],
                    "fullName": "tunnel CLI commands startTunnel displays error when tunnel does not start",
                    "status": "passed",
                    "title": "displays error when tunnel does not start",
                    "duration": 0.4384300112724304,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "tunnel CLI commands",
                        "setupDomain"
                    ],
                    "fullName": "tunnel CLI commands setupDomain displays setup instructions",
                    "status": "passed",
                    "title": "displays setup instructions",
                    "duration": 0.638653039932251,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423720,
            "endTime": 1753117423731.6387,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/auth/cli/tunnel.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "TunnelService - Simple Tests",
                        "initialization"
                    ],
                    "fullName": "TunnelService - Simple Tests initialization creates tunnel service with config",
                    "status": "passed",
                    "title": "creates tunnel service with config",
                    "duration": 2.067883014678955,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelService - Simple Tests",
                        "initialization"
                    ],
                    "fullName": "TunnelService - Simple Tests initialization creates tunnel service with permanent domain config",
                    "status": "passed",
                    "title": "creates tunnel service with permanent domain config",
                    "duration": 0.35903799533843994,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelService - Simple Tests",
                        "getStatus"
                    ],
                    "fullName": "TunnelService - Simple Tests getStatus returns initial status",
                    "status": "passed",
                    "title": "returns initial status",
                    "duration": 0.9460299611091614,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelService - Simple Tests",
                        "getPublicUrl"
                    ],
                    "fullName": "TunnelService - Simple Tests getPublicUrl returns localhost URL when tunnel not configured",
                    "status": "passed",
                    "title": "returns localhost URL when tunnel not configured",
                    "duration": 0.28709596395492554,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelService - Simple Tests",
                        "getPublicUrl"
                    ],
                    "fullName": "TunnelService - Simple Tests getPublicUrl returns permanent domain URL when configured",
                    "status": "passed",
                    "title": "returns permanent domain URL when configured",
                    "duration": 0.4068390130996704,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelService - Simple Tests",
                        "event emitter"
                    ],
                    "fullName": "TunnelService - Simple Tests event emitter extends EventEmitter",
                    "status": "passed",
                    "title": "extends EventEmitter",
                    "duration": 2.192456007003784,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424760,
            "endTime": 1753117424767.1924,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/auth/services/tunnel-service.simple.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "TunnelService",
                        "start"
                    ],
                    "fullName": "TunnelService start starts tunnel successfully with URL from stdout",
                    "status": "passed",
                    "title": "starts tunnel successfully with URL from stdout",
                    "duration": 14.505204021930695,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelService",
                        "start"
                    ],
                    "fullName": "TunnelService start returns existing URL if tunnel already running",
                    "status": "passed",
                    "title": "returns existing URL if tunnel already running",
                    "duration": 0.6205530166625977,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelService",
                        "start"
                    ],
                    "fullName": "TunnelService start handles tunnel startup errors",
                    "status": "passed",
                    "title": "handles tunnel startup errors",
                    "duration": 11.440496027469635,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelService",
                        "start"
                    ],
                    "fullName": "TunnelService start times out if no URL received",
                    "status": "passed",
                    "title": "times out if no URL received",
                    "duration": 2.490432024002075,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelService",
                        "stop"
                    ],
                    "fullName": "TunnelService stop stops running tunnel",
                    "status": "passed",
                    "title": "stops running tunnel",
                    "duration": 0.3656569719314575,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelService",
                        "stop"
                    ],
                    "fullName": "TunnelService stop does nothing if tunnel not running",
                    "status": "passed",
                    "title": "does nothing if tunnel not running",
                    "duration": 0.5069800019264221,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelService",
                        "getStatus"
                    ],
                    "fullName": "TunnelService getStatus returns active status when tunnel is running",
                    "status": "passed",
                    "title": "returns active status when tunnel is running",
                    "duration": 0.35989803075790405,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelService",
                        "getStatus"
                    ],
                    "fullName": "TunnelService getStatus returns inactive status when tunnel is not running",
                    "status": "passed",
                    "title": "returns inactive status when tunnel is not running",
                    "duration": 0.24480503797531128,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "TunnelService",
                        "URL extraction"
                    ],
                    "fullName": "TunnelService URL extraction extracts URLs from various cloudflared output formats",
                    "status": "passed",
                    "title": "extracts URLs from various cloudflared output formats",
                    "duration": 0.6529629826545715,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423765,
            "endTime": 1753117423796.653,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/auth/services/tunnel-service.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "generateJWTKeyPair",
                        "RSA key generation"
                    ],
                    "fullName": "generateJWTKeyPair RSA key generation generates RS256 keys in PEM format",
                    "status": "passed",
                    "title": "generates RS256 keys in PEM format",
                    "duration": 6.2348350286483765,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "generateJWTKeyPair",
                        "RSA key generation"
                    ],
                    "fullName": "generateJWTKeyPair RSA key generation generates RS512 keys with larger modulus",
                    "status": "passed",
                    "title": "generates RS512 keys with larger modulus",
                    "duration": 0.8235769867897034,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "generateJWTKeyPair",
                        "EC key generation"
                    ],
                    "fullName": "generateJWTKeyPair EC key generation generates ES256 keys in PEM format",
                    "status": "passed",
                    "title": "generates ES256 keys in PEM format",
                    "duration": 0.6894539594650269,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "generateJWTKeyPair",
                        "EC key generation"
                    ],
                    "fullName": "generateJWTKeyPair EC key generation generates ES512 keys with secp521r1 curve",
                    "status": "passed",
                    "title": "generates ES512 keys with secp521r1 curve",
                    "duration": 0.6352830529212952,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "generateJWTKeyPair",
                        "JWK format"
                    ],
                    "fullName": "generateJWTKeyPair JWK format generates RSA keys in JWK format",
                    "status": "passed",
                    "title": "generates RSA keys in JWK format",
                    "duration": 0.8489279747009277,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "generateJWTKeyPair",
                        "JWK format"
                    ],
                    "fullName": "generateJWTKeyPair JWK format generates EC keys in JWK format",
                    "status": "passed",
                    "title": "generates EC keys in JWK format",
                    "duration": 0.7160249948501587,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "generateJWTKeyPair",
                        "JWK format"
                    ],
                    "fullName": "generateJWTKeyPair JWK format formats JWK JSON with proper indentation",
                    "status": "passed",
                    "title": "formats JWK JSON with proper indentation",
                    "duration": 0.8158869743347168,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423815,
            "endTime": 1753117423829.816,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/auth/utils/generate-key.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "CLI Docs Command",
                        "execute"
                    ],
                    "fullName": "CLI Docs Command execute should generate documentation and output to console by default",
                    "status": "passed",
                    "title": "should generate documentation and output to console by default",
                    "duration": 6.474726021289825,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Docs Command",
                        "execute"
                    ],
                    "fullName": "CLI Docs Command execute should write documentation to file when output specified",
                    "status": "passed",
                    "title": "should write documentation to file when output specified",
                    "duration": 2.62180495262146,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Docs Command",
                        "execute"
                    ],
                    "fullName": "CLI Docs Command execute should support different formats",
                    "status": "passed",
                    "title": "should support different formats",
                    "duration": 1.345719039440155,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Docs Command",
                        "execute"
                    ],
                    "fullName": "CLI Docs Command execute should handle errors during initialization",
                    "status": "passed",
                    "title": "should handle errors during initialization",
                    "duration": 5.752102017402649,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Docs Command",
                        "execute"
                    ],
                    "fullName": "CLI Docs Command execute should handle errors during doc generation",
                    "status": "passed",
                    "title": "should handle errors during doc generation",
                    "duration": 0.767145037651062,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Docs Command",
                        "execute"
                    ],
                    "fullName": "CLI Docs Command execute should handle file write errors",
                    "status": "passed",
                    "title": "should handle file write errors",
                    "duration": 0.7475559711456299,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424279,
            "endTime": 1753117424300.7476,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/cli/cli/docs.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "CLI Help Command",
                        "execute"
                    ],
                    "fullName": "CLI Help Command execute should show general help when no arguments provided",
                    "status": "passed",
                    "title": "should show general help when no arguments provided",
                    "duration": 5.2565590143203735,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Help Command",
                        "execute"
                    ],
                    "fullName": "CLI Help Command execute should show help for specific command when command argument provided",
                    "status": "passed",
                    "title": "should show help for specific command when command argument provided",
                    "duration": 1.6638449430465698,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Help Command",
                        "execute"
                    ],
                    "fullName": "CLI Help Command execute should show all commands with details when --all flag provided",
                    "status": "passed",
                    "title": "should show all commands with details when --all flag provided",
                    "duration": 0.8655679821968079,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Help Command",
                        "execute"
                    ],
                    "fullName": "CLI Help Command execute should handle errors gracefully",
                    "status": "passed",
                    "title": "should handle errors gracefully",
                    "duration": 3.0684860348701477,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI Help Command",
                        "execute"
                    ],
                    "fullName": "CLI Help Command execute should handle command help error",
                    "status": "passed",
                    "title": "should handle command help error",
                    "duration": 0.8187069892883301,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424597,
            "endTime": 1753117424609.8186,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/cli/cli/help.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "CLI List Command",
                        "execute"
                    ],
                    "fullName": "CLI List Command execute should list all commands with default text format",
                    "status": "passed",
                    "title": "should list all commands with default text format",
                    "duration": 6.4834359884262085,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI List Command",
                        "execute"
                    ],
                    "fullName": "CLI List Command execute should filter commands by module when module arg provided",
                    "status": "passed",
                    "title": "should filter commands by module when module arg provided",
                    "duration": 1.4185100197792053,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI List Command",
                        "execute"
                    ],
                    "fullName": "CLI List Command execute should show message when no commands found for module",
                    "status": "passed",
                    "title": "should show message when no commands found for module",
                    "duration": 0.60835200548172,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI List Command",
                        "execute"
                    ],
                    "fullName": "CLI List Command execute should support JSON format",
                    "status": "passed",
                    "title": "should support JSON format",
                    "duration": 0.6745339632034302,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI List Command",
                        "execute"
                    ],
                    "fullName": "CLI List Command execute should support table format",
                    "status": "passed",
                    "title": "should support table format",
                    "duration": 0.8716179728507996,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI List Command",
                        "execute"
                    ],
                    "fullName": "CLI List Command execute should handle errors gracefully",
                    "status": "passed",
                    "title": "should handle errors gracefully",
                    "duration": 2.2170159816741943,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "CLI List Command",
                        "execute"
                    ],
                    "fullName": "CLI List Command execute should handle formatCommands error",
                    "status": "passed",
                    "title": "should handle formatCommands error",
                    "duration": 0.8900879621505737,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424247,
            "endTime": 1753117424260.8901,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/cli/cli/list.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Config Get Command",
                        "execute"
                    ],
                    "fullName": "Config Get Command execute should get and display config value for given key",
                    "status": "passed",
                    "title": "should get and display config value for given key",
                    "duration": 4.960395991802216,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config Get Command",
                        "execute"
                    ],
                    "fullName": "Config Get Command execute should display all config when no key specified",
                    "status": "passed",
                    "title": "should display all config when no key specified",
                    "duration": 0.7148450016975403,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config Get Command",
                        "execute"
                    ],
                    "fullName": "Config Get Command execute should show error when key not found",
                    "status": "passed",
                    "title": "should show error when key not found",
                    "duration": 1.8921499848365784,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config Get Command",
                        "execute"
                    ],
                    "fullName": "Config Get Command execute should show message when no config values exist",
                    "status": "passed",
                    "title": "should show message when no config values exist",
                    "duration": 0.6118530035018921,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config Get Command",
                        "execute"
                    ],
                    "fullName": "Config Get Command execute should handle string values",
                    "status": "passed",
                    "title": "should handle string values",
                    "duration": 0.5195609927177429,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config Get Command",
                        "execute"
                    ],
                    "fullName": "Config Get Command execute should handle number values",
                    "status": "passed",
                    "title": "should handle number values",
                    "duration": 0.5392619967460632,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config Get Command",
                        "execute"
                    ],
                    "fullName": "Config Get Command execute should handle boolean values",
                    "status": "passed",
                    "title": "should handle boolean values",
                    "duration": 0.6095030307769775,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config Get Command",
                        "execute"
                    ],
                    "fullName": "Config Get Command execute should handle array values",
                    "status": "passed",
                    "title": "should handle array values",
                    "duration": 0.6269830465316772,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424710,
            "endTime": 1753117424720.627,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/config/cli/get.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Config List Command",
                        "execute"
                    ],
                    "fullName": "Config List Command execute should display config in tree format by default",
                    "status": "passed",
                    "title": "should display config in tree format by default",
                    "duration": 3.784069001674652,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config List Command",
                        "execute"
                    ],
                    "fullName": "Config List Command execute should display config in JSON format when specified",
                    "status": "passed",
                    "title": "should display config in JSON format when specified",
                    "duration": 0.4700300097465515,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config List Command",
                        "execute"
                    ],
                    "fullName": "Config List Command execute should display config in YAML format when specified",
                    "status": "passed",
                    "title": "should display config in YAML format when specified",
                    "duration": 0.47794997692108154,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config List Command",
                        "execute"
                    ],
                    "fullName": "Config List Command execute should show message when no config values exist",
                    "status": "passed",
                    "title": "should show message when no config values exist",
                    "duration": 0.5595119595527649,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config List Command",
                        "execute"
                    ],
                    "fullName": "Config List Command execute should handle null config",
                    "status": "passed",
                    "title": "should handle null config",
                    "duration": 0.3977090120315552,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config List Command",
                        "execute"
                    ],
                    "fullName": "Config List Command execute should handle arrays in tree format",
                    "status": "passed",
                    "title": "should handle arrays in tree format",
                    "duration": 0.48409003019332886,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config List Command",
                        "execute"
                    ],
                    "fullName": "Config List Command execute should handle nested objects in tree format",
                    "status": "passed",
                    "title": "should handle nested objects in tree format",
                    "duration": 0.5337710380554199,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config List Command",
                        "execute"
                    ],
                    "fullName": "Config List Command execute should handle mixed value types",
                    "status": "passed",
                    "title": "should handle mixed value types",
                    "duration": 0.5065109729766846,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424269,
            "endTime": 1753117424277.5066,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/config/cli/list.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "model CLI command",
                        "list subcommand"
                    ],
                    "fullName": "model CLI command list subcommand lists all models from enabled providers",
                    "status": "passed",
                    "title": "lists all models from enabled providers",
                    "duration": 2.4954229593276978,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "model CLI command",
                        "list subcommand"
                    ],
                    "fullName": "model CLI command list subcommand lists models from specific provider",
                    "status": "passed",
                    "title": "lists models from specific provider",
                    "duration": 0.5062710046768188,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "model CLI command",
                        "list subcommand"
                    ],
                    "fullName": "model CLI command list subcommand handles provider not found",
                    "status": "passed",
                    "title": "handles provider not found",
                    "duration": 4.3176209926605225,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "model CLI command",
                        "list subcommand"
                    ],
                    "fullName": "model CLI command list subcommand handles no enabled providers",
                    "status": "passed",
                    "title": "handles no enabled providers",
                    "duration": 0.9571399688720703,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "model CLI command",
                        "list subcommand"
                    ],
                    "fullName": "model CLI command list subcommand handles non-google providers",
                    "status": "passed",
                    "title": "handles non-google providers",
                    "duration": 0.79550701379776,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "model CLI command",
                        "show subcommand"
                    ],
                    "fullName": "model CLI command show subcommand shows model details",
                    "status": "passed",
                    "title": "shows model details",
                    "duration": 1.6560049653053284,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "model CLI command",
                        "show subcommand"
                    ],
                    "fullName": "model CLI command show subcommand shows model with response mime type",
                    "status": "passed",
                    "title": "shows model with response mime type",
                    "duration": 0.91941899061203,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "model CLI command",
                        "show subcommand"
                    ],
                    "fullName": "model CLI command show subcommand handles provider not found",
                    "status": "passed",
                    "title": "handles provider not found",
                    "duration": 0.9881500005722046,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "model CLI command",
                        "show subcommand"
                    ],
                    "fullName": "model CLI command show subcommand handles disabled provider",
                    "status": "passed",
                    "title": "handles disabled provider",
                    "duration": 0.7487350106239319,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "model CLI command",
                        "show subcommand"
                    ],
                    "fullName": "model CLI command show subcommand handles non-google provider",
                    "status": "passed",
                    "title": "handles non-google provider",
                    "duration": 0.669704020023346,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "model CLI command",
                        "show subcommand"
                    ],
                    "fullName": "model CLI command show subcommand handles model not found",
                    "status": "passed",
                    "title": "handles model not found",
                    "duration": 0.7481059432029724,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "model CLI command",
                        "test subcommand"
                    ],
                    "fullName": "model CLI command test subcommand tests model with default prompt",
                    "status": "passed",
                    "title": "tests model with default prompt",
                    "duration": 1.5490019917488098,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "model CLI command",
                        "test subcommand"
                    ],
                    "fullName": "model CLI command test subcommand tests model with custom prompt",
                    "status": "passed",
                    "title": "tests model with custom prompt",
                    "duration": 0.8356280326843262,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "model CLI command",
                        "test subcommand"
                    ],
                    "fullName": "model CLI command test subcommand handles missing API key",
                    "status": "passed",
                    "title": "handles missing API key",
                    "duration": 0.9971809983253479,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "model CLI command",
                        "test subcommand"
                    ],
                    "fullName": "model CLI command test subcommand handles test errors",
                    "status": "passed",
                    "title": "handles test errors",
                    "duration": 7.500777959823608,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "model CLI command",
                        "test subcommand"
                    ],
                    "fullName": "model CLI command test subcommand shows stack trace in debug mode",
                    "status": "passed",
                    "title": "shows stack trace in debug mode",
                    "duration": 2.1271950006484985,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "model CLI command",
                        "execute"
                    ],
                    "fullName": "model CLI command execute handles unknown subcommand",
                    "status": "passed",
                    "title": "handles unknown subcommand",
                    "duration": 0.7279350161552429,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423704,
            "endTime": 1753117423733.728,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/config/cli/model.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "list subcommand"
                    ],
                    "fullName": "provider CLI command list subcommand lists all providers",
                    "status": "passed",
                    "title": "lists all providers",
                    "duration": 1.8349189758300781,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "list subcommand"
                    ],
                    "fullName": "provider CLI command list subcommand lists only enabled providers",
                    "status": "passed",
                    "title": "lists only enabled providers",
                    "duration": 0.5060809850692749,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "list subcommand"
                    ],
                    "fullName": "provider CLI command list subcommand handles no providers",
                    "status": "passed",
                    "title": "handles no providers",
                    "duration": 0.9592099785804749,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "show subcommand"
                    ],
                    "fullName": "provider CLI command show subcommand shows provider details",
                    "status": "passed",
                    "title": "shows provider details",
                    "duration": 0.7376459836959839,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "show subcommand"
                    ],
                    "fullName": "provider CLI command show subcommand shows provider with models",
                    "status": "passed",
                    "title": "shows provider with models",
                    "duration": 0.7591260075569153,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "show subcommand"
                    ],
                    "fullName": "provider CLI command show subcommand shows non-google provider config as JSON",
                    "status": "passed",
                    "title": "shows non-google provider config as JSON",
                    "duration": 0.29107600450515747,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "show subcommand"
                    ],
                    "fullName": "provider CLI command show subcommand handles provider not found",
                    "status": "passed",
                    "title": "handles provider not found",
                    "duration": 2.2507269978523254,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "show subcommand"
                    ],
                    "fullName": "provider CLI command show subcommand masks API key properly",
                    "status": "passed",
                    "title": "masks API key properly",
                    "duration": 1.253997027873993,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "enable subcommand"
                    ],
                    "fullName": "provider CLI command enable subcommand enables disabled provider",
                    "status": "passed",
                    "title": "enables disabled provider",
                    "duration": 2.479471981525421,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "enable subcommand"
                    ],
                    "fullName": "provider CLI command enable subcommand handles already enabled provider",
                    "status": "passed",
                    "title": "handles already enabled provider",
                    "duration": 0.7579360008239746,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "enable subcommand"
                    ],
                    "fullName": "provider CLI command enable subcommand handles provider not found",
                    "status": "passed",
                    "title": "handles provider not found",
                    "duration": 0.716314971446991,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "enable subcommand"
                    ],
                    "fullName": "provider CLI command enable subcommand handles enable failure",
                    "status": "passed",
                    "title": "handles enable failure",
                    "duration": 0.4634999632835388,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "disable subcommand"
                    ],
                    "fullName": "provider CLI command disable subcommand disables enabled provider",
                    "status": "passed",
                    "title": "disables enabled provider",
                    "duration": 0.5596719980239868,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "disable subcommand"
                    ],
                    "fullName": "provider CLI command disable subcommand prevents disabling default provider",
                    "status": "passed",
                    "title": "prevents disabling default provider",
                    "duration": 0.6082029938697815,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "disable subcommand"
                    ],
                    "fullName": "provider CLI command disable subcommand prevents disabling last provider",
                    "status": "passed",
                    "title": "prevents disabling last provider",
                    "duration": 0.8133780360221863,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "disable subcommand"
                    ],
                    "fullName": "provider CLI command disable subcommand handles already disabled provider",
                    "status": "passed",
                    "title": "handles already disabled provider",
                    "duration": 0.6376129984855652,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "set-default subcommand"
                    ],
                    "fullName": "provider CLI command set-default subcommand sets new default provider",
                    "status": "passed",
                    "title": "sets new default provider",
                    "duration": 0.7968669533729553,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "set-default subcommand"
                    ],
                    "fullName": "provider CLI command set-default subcommand handles already default provider",
                    "status": "passed",
                    "title": "handles already default provider",
                    "duration": 0.5874130129814148,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "set-default subcommand"
                    ],
                    "fullName": "provider CLI command set-default subcommand prevents setting disabled provider as default",
                    "status": "passed",
                    "title": "prevents setting disabled provider as default",
                    "duration": 0.8142669796943665,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "provider CLI command",
                        "execute"
                    ],
                    "fullName": "provider CLI command execute handles unknown subcommand",
                    "status": "passed",
                    "title": "handles unknown subcommand",
                    "duration": 0.83672696352005,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423704,
            "endTime": 1753117423725.8367,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/config/cli/provider.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Config Set Command",
                        "execute"
                    ],
                    "fullName": "Config Set Command execute should set string value for given key",
                    "status": "passed",
                    "title": "should set string value for given key",
                    "duration": 5.328680992126465,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config Set Command",
                        "execute"
                    ],
                    "fullName": "Config Set Command execute should parse and set JSON object value",
                    "status": "passed",
                    "title": "should parse and set JSON object value",
                    "duration": 0.7733259797096252,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config Set Command",
                        "execute"
                    ],
                    "fullName": "Config Set Command execute should parse and set JSON array value",
                    "status": "passed",
                    "title": "should parse and set JSON array value",
                    "duration": 0.5259010195732117,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config Set Command",
                        "execute"
                    ],
                    "fullName": "Config Set Command execute should parse and set boolean true value",
                    "status": "passed",
                    "title": "should parse and set boolean true value",
                    "duration": 0.569242000579834,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config Set Command",
                        "execute"
                    ],
                    "fullName": "Config Set Command execute should parse and set boolean false value",
                    "status": "passed",
                    "title": "should parse and set boolean false value",
                    "duration": 0.504360020160675,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config Set Command",
                        "execute"
                    ],
                    "fullName": "Config Set Command execute should parse and set number value",
                    "status": "passed",
                    "title": "should parse and set number value",
                    "duration": 0.5332709550857544,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config Set Command",
                        "execute"
                    ],
                    "fullName": "Config Set Command execute should keep invalid JSON as string",
                    "status": "passed",
                    "title": "should keep invalid JSON as string",
                    "duration": 0.673363983631134,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config Set Command",
                        "execute"
                    ],
                    "fullName": "Config Set Command execute should error when key is missing",
                    "status": "passed",
                    "title": "should error when key is missing",
                    "duration": 2.970991015434265,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config Set Command",
                        "execute"
                    ],
                    "fullName": "Config Set Command execute should error when value is missing",
                    "status": "passed",
                    "title": "should error when value is missing",
                    "duration": 0.9230690002441406,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config Set Command",
                        "execute"
                    ],
                    "fullName": "Config Set Command execute should handle decimal numbers",
                    "status": "passed",
                    "title": "should handle decimal numbers",
                    "duration": 0.5779320001602173,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Config Set Command",
                        "execute"
                    ],
                    "fullName": "Config Set Command execute should handle negative numbers",
                    "status": "passed",
                    "title": "should handle negative numbers",
                    "duration": 0.5933420062065125,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424305,
            "endTime": 1753117424319.5933,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/config/cli/set.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "validate CLI command",
                        "validate current configuration"
                    ],
                    "fullName": "validate CLI command validate current configuration validates current configuration successfully",
                    "status": "passed",
                    "title": "validates current configuration successfully",
                    "duration": 4.929322957992554,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validate CLI command",
                        "validate current configuration"
                    ],
                    "fullName": "validate CLI command validate current configuration detects missing defaults section",
                    "status": "passed",
                    "title": "detects missing defaults section",
                    "duration": 1.8728989958763123,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validate CLI command",
                        "validate current configuration"
                    ],
                    "fullName": "validate CLI command validate current configuration detects invalid providers configuration",
                    "status": "passed",
                    "title": "detects invalid providers configuration",
                    "duration": 0.7787959575653076,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validate CLI command",
                        "validate external file"
                    ],
                    "fullName": "validate CLI command validate external file validates JSON file successfully",
                    "status": "passed",
                    "title": "validates JSON file successfully",
                    "duration": 2.088424026966095,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validate CLI command",
                        "validate external file"
                    ],
                    "fullName": "validate CLI command validate external file validates YAML file successfully",
                    "status": "passed",
                    "title": "validates YAML file successfully",
                    "duration": 10.7219740152359,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validate CLI command",
                        "validate external file"
                    ],
                    "fullName": "validate CLI command validate external file handles file not found",
                    "status": "passed",
                    "title": "handles file not found",
                    "duration": 0.9472100138664246,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validate CLI command",
                        "validate external file"
                    ],
                    "fullName": "validate CLI command validate external file handles invalid JSON",
                    "status": "passed",
                    "title": "handles invalid JSON",
                    "duration": 0.5178210139274597,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validate CLI command",
                        "validate external file"
                    ],
                    "fullName": "validate CLI command validate external file handles unsupported file format",
                    "status": "passed",
                    "title": "handles unsupported file format",
                    "duration": 0.5024410486221313,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validate CLI command",
                        "configuration validation rules"
                    ],
                    "fullName": "validate CLI command configuration validation rules validates system defaults",
                    "status": "passed",
                    "title": "validates system defaults",
                    "duration": 0.6134530305862427,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validate CLI command",
                        "configuration validation rules"
                    ],
                    "fullName": "validate CLI command configuration validation rules validates providers structure",
                    "status": "passed",
                    "title": "validates providers structure",
                    "duration": 0.4881599545478821,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validate CLI command",
                        "configuration validation rules"
                    ],
                    "fullName": "validate CLI command configuration validation rules handles missing providers section gracefully",
                    "status": "passed",
                    "title": "handles missing providers section gracefully",
                    "duration": 0.8668870329856873,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423729,
            "endTime": 1753117423758.867,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/config/cli/validate.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Google Live API Provider Configuration",
                        "googleLiveAPIProvider"
                    ],
                    "fullName": "Google Live API Provider Configuration googleLiveAPIProvider exports provider configuration with correct structure",
                    "status": "passed",
                    "title": "exports provider configuration with correct structure",
                    "duration": 2.200035035610199,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Google Live API Provider Configuration",
                        "googleLiveAPIProvider"
                    ],
                    "fullName": "Google Live API Provider Configuration googleLiveAPIProvider includes default model configuration",
                    "status": "passed",
                    "title": "includes default model configuration",
                    "duration": 0.5936129689216614,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Google Live API Provider Configuration",
                        "googleLiveAPIProvider"
                    ],
                    "fullName": "Google Live API Provider Configuration googleLiveAPIProvider uses environment variable for API key",
                    "status": "passed",
                    "title": "uses environment variable for API key",
                    "duration": 0.5431219935417175,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Google Live API Provider Configuration",
                        "Model Configurations"
                    ],
                    "fullName": "Google Live API Provider Configuration Model Configurations provides default model configuration",
                    "status": "passed",
                    "title": "provides default model configuration",
                    "duration": 0.9119499921798706,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Google Live API Provider Configuration",
                        "Model Configurations"
                    ],
                    "fullName": "Google Live API Provider Configuration Model Configurations provides coder model configuration",
                    "status": "passed",
                    "title": "provides coder model configuration",
                    "duration": 0.40696799755096436,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Google Live API Provider Configuration",
                        "Model Configurations"
                    ],
                    "fullName": "Google Live API Provider Configuration Model Configurations provides creative model configuration",
                    "status": "passed",
                    "title": "provides creative model configuration",
                    "duration": 0.339976966381073,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Google Live API Provider Configuration",
                        "Model Configurations"
                    ],
                    "fullName": "Google Live API Provider Configuration Model Configurations provides analyst model configuration",
                    "status": "passed",
                    "title": "provides analyst model configuration",
                    "duration": 0.5595430135726929,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Google Live API Provider Configuration",
                        "Model Configurations"
                    ],
                    "fullName": "Google Live API Provider Configuration Model Configurations returns undefined for unknown model",
                    "status": "passed",
                    "title": "returns undefined for unknown model",
                    "duration": 0.4295790195465088,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Google Live API Provider Configuration",
                        "Safety Settings"
                    ],
                    "fullName": "Google Live API Provider Configuration Safety Settings applies default safety settings to all models",
                    "status": "passed",
                    "title": "applies default safety settings to all models",
                    "duration": 1.9785720109939575,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Google Live API Provider Configuration",
                        "System Instructions"
                    ],
                    "fullName": "Google Live API Provider Configuration System Instructions provides appropriate system instructions for each model",
                    "status": "passed",
                    "title": "provides appropriate system instructions for each model",
                    "duration": 0.40985798835754395,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Google Live API Provider Configuration",
                        "getClientOptions"
                    ],
                    "fullName": "Google Live API Provider Configuration getClientOptions returns client configuration options",
                    "status": "passed",
                    "title": "returns client configuration options",
                    "duration": 0.5394310355186462,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Google Live API Provider Configuration",
                        "getClientOptions"
                    ],
                    "fullName": "Google Live API Provider Configuration getClientOptions returns string API key",
                    "status": "passed",
                    "title": "returns string API key",
                    "duration": 0.3364869952201843,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424268,
            "endTime": 1753117424278.3364,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/config/providers/google.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Configuration Types",
                        "ConfigSource Enum"
                    ],
                    "fullName": "Configuration Types ConfigSource Enum should have correct enum values",
                    "status": "passed",
                    "title": "should have correct enum values",
                    "duration": 2.1518359780311584,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Configuration Types",
                        "ConfigSource Enum"
                    ],
                    "fullName": "Configuration Types ConfigSource Enum should have all expected enum keys",
                    "status": "passed",
                    "title": "should have all expected enum keys",
                    "duration": 1.3273720145225525,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Configuration Types",
                        "ConfigSource Enum"
                    ],
                    "fullName": "Configuration Types ConfigSource Enum should have correct string values",
                    "status": "passed",
                    "title": "should have correct string values",
                    "duration": 0.3767080307006836,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424930,
            "endTime": 1753117424934.3767,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/config/types/config.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "connect"
                    ],
                    "fullName": "SQLiteAdapter connect should connect to database successfully",
                    "status": "passed",
                    "title": "should connect to database successfully",
                    "duration": 4.153612017631531,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "connect"
                    ],
                    "fullName": "SQLiteAdapter connect should throw error if sqlite config is missing",
                    "status": "passed",
                    "title": "should throw error if sqlite config is missing",
                    "duration": 2.24625700712204,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "connect"
                    ],
                    "fullName": "SQLiteAdapter connect should create directory if it does not exist",
                    "status": "passed",
                    "title": "should create directory if it does not exist",
                    "duration": 0.9971309900283813,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "connect"
                    ],
                    "fullName": "SQLiteAdapter connect should handle connection errors",
                    "status": "passed",
                    "title": "should handle connection errors",
                    "duration": 6.463501036167145,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "disconnect"
                    ],
                    "fullName": "SQLiteAdapter disconnect should close database connection",
                    "status": "passed",
                    "title": "should close database connection",
                    "duration": 0.3575669527053833,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "disconnect"
                    ],
                    "fullName": "SQLiteAdapter disconnect should handle disconnect when not connected",
                    "status": "passed",
                    "title": "should handle disconnect when not connected",
                    "duration": 0.20898401737213135,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "isConnected"
                    ],
                    "fullName": "SQLiteAdapter isConnected should return false when not connected",
                    "status": "passed",
                    "title": "should return false when not connected",
                    "duration": 0.2514459490776062,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "isConnected"
                    ],
                    "fullName": "SQLiteAdapter isConnected should return true when connected",
                    "status": "passed",
                    "title": "should return true when connected",
                    "duration": 0.20804399251937866,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "isConnected"
                    ],
                    "fullName": "SQLiteAdapter isConnected should return false when database is closed",
                    "status": "passed",
                    "title": "should return false when database is closed",
                    "duration": 0.21217399835586548,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "DatabaseConnection",
                        "query"
                    ],
                    "fullName": "SQLiteAdapter DatabaseConnection query should execute query and return results",
                    "status": "passed",
                    "title": "should execute query and return results",
                    "duration": 0.7246849536895752,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "DatabaseConnection",
                        "query"
                    ],
                    "fullName": "SQLiteAdapter DatabaseConnection query should handle query without parameters",
                    "status": "passed",
                    "title": "should handle query without parameters",
                    "duration": 0.3803480267524719,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "DatabaseConnection",
                        "execute"
                    ],
                    "fullName": "SQLiteAdapter DatabaseConnection execute should execute statement with parameters",
                    "status": "passed",
                    "title": "should execute statement with parameters",
                    "duration": 0.4343690276145935,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "DatabaseConnection",
                        "execute"
                    ],
                    "fullName": "SQLiteAdapter DatabaseConnection execute should execute statement without parameters",
                    "status": "passed",
                    "title": "should execute statement without parameters",
                    "duration": 0.3364570140838623,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "DatabaseConnection",
                        "prepare"
                    ],
                    "fullName": "SQLiteAdapter DatabaseConnection prepare should return prepared statement",
                    "status": "passed",
                    "title": "should return prepared statement",
                    "duration": 0.3869279623031616,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "DatabaseConnection",
                        "transaction"
                    ],
                    "fullName": "SQLiteAdapter DatabaseConnection transaction should commit transaction on success",
                    "status": "passed",
                    "title": "should commit transaction on success",
                    "duration": 0.5284309983253479,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "DatabaseConnection",
                        "transaction"
                    ],
                    "fullName": "SQLiteAdapter DatabaseConnection transaction should rollback transaction on error",
                    "status": "passed",
                    "title": "should rollback transaction on error",
                    "duration": 0.8818190097808838,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "DatabaseConnection",
                        "close"
                    ],
                    "fullName": "SQLiteAdapter DatabaseConnection close should close connection",
                    "status": "passed",
                    "title": "should close connection",
                    "duration": 0.400858998298645,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "PreparedStatement"
                    ],
                    "fullName": "SQLiteAdapter PreparedStatement should execute statement and return results",
                    "status": "passed",
                    "title": "should execute statement and return results",
                    "duration": 0.4688799977302551,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "PreparedStatement"
                    ],
                    "fullName": "SQLiteAdapter PreparedStatement should get all rows",
                    "status": "passed",
                    "title": "should get all rows",
                    "duration": 0.3677369952201843,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "PreparedStatement"
                    ],
                    "fullName": "SQLiteAdapter PreparedStatement should get single row",
                    "status": "passed",
                    "title": "should get single row",
                    "duration": 0.38850802183151245,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "PreparedStatement"
                    ],
                    "fullName": "SQLiteAdapter PreparedStatement should run statement and return changes",
                    "status": "passed",
                    "title": "should run statement and return changes",
                    "duration": 0.3904879689216614,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "SQLiteAdapter",
                        "PreparedStatement"
                    ],
                    "fullName": "SQLiteAdapter PreparedStatement should finalize statement",
                    "status": "passed",
                    "title": "should finalize statement",
                    "duration": 0.2617860436439514,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423708,
            "endTime": 1753117423730.3904,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/database/adapters/sqlite.adapter.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "extension info CLI command",
                        "execute"
                    ],
                    "fullName": "extension info CLI command execute shows error when name is not provided",
                    "status": "passed",
                    "title": "shows error when name is not provided",
                    "duration": 5.639867961406708,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension info CLI command",
                        "execute"
                    ],
                    "fullName": "extension info CLI command execute shows error when extension not found",
                    "status": "passed",
                    "title": "shows error when extension not found",
                    "duration": 1.3124480247497559,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension info CLI command",
                        "execute"
                    ],
                    "fullName": "extension info CLI command execute displays basic extension info",
                    "status": "passed",
                    "title": "displays basic extension info",
                    "duration": 0.9988810420036316,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension info CLI command",
                        "execute"
                    ],
                    "fullName": "extension info CLI command execute displays module-specific info with CLI commands",
                    "status": "passed",
                    "title": "displays module-specific info with CLI commands",
                    "duration": 0.9258400201797485,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension info CLI command",
                        "execute"
                    ],
                    "fullName": "extension info CLI command execute shows structure with missing components",
                    "status": "passed",
                    "title": "shows structure with missing components",
                    "duration": 0.6544640064239502,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension info CLI command",
                        "execute"
                    ],
                    "fullName": "extension info CLI command execute handles server type extensions",
                    "status": "passed",
                    "title": "handles server type extensions",
                    "duration": 2.5804149508476257,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension info CLI command",
                        "execute"
                    ],
                    "fullName": "extension info CLI command execute handles minimal extension info",
                    "status": "passed",
                    "title": "handles minimal extension info",
                    "duration": 0.5259710550308228,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension info CLI command",
                        "execute"
                    ],
                    "fullName": "extension info CLI command execute handles errors during execution",
                    "status": "passed",
                    "title": "handles errors during execution",
                    "duration": 0.6654040217399597,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension info CLI command",
                        "execute"
                    ],
                    "fullName": "extension info CLI command execute checks for .js index file when .ts not found",
                    "status": "passed",
                    "title": "checks for .js index file when .ts not found",
                    "duration": 0.5734019875526428,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423721,
            "endTime": 1753117423737.5735,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/extension/cli/info.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "install CLI command"
                    ],
                    "fullName": "install CLI command requires extension name",
                    "status": "passed",
                    "title": "requires extension name",
                    "duration": 4.705339014530182,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "install CLI command"
                    ],
                    "fullName": "install CLI command installs extension successfully",
                    "status": "passed",
                    "title": "installs extension successfully",
                    "duration": 2.6952760219573975,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "install CLI command"
                    ],
                    "fullName": "install CLI command installs extension without version",
                    "status": "passed",
                    "title": "installs extension without version",
                    "duration": 0.41381901502609253,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "install CLI command"
                    ],
                    "fullName": "install CLI command prevents installing already installed extension",
                    "status": "passed",
                    "title": "prevents installing already installed extension",
                    "duration": 0.47109901905059814,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "install CLI command"
                    ],
                    "fullName": "install CLI command allows force reinstall",
                    "status": "passed",
                    "title": "allows force reinstall",
                    "duration": 0.38992804288864136,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "install CLI command"
                    ],
                    "fullName": "install CLI command handles installation errors",
                    "status": "passed",
                    "title": "handles installation errors",
                    "duration": 0.591401994228363,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424143,
            "endTime": 1753117424152.5913,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/extension/cli/install.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "extension list CLI command",
                        "execute"
                    ],
                    "fullName": "extension list CLI command execute displays message when no extensions found",
                    "status": "passed",
                    "title": "displays message when no extensions found",
                    "duration": 4.239898979663849,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension list CLI command",
                        "execute"
                    ],
                    "fullName": "extension list CLI command execute lists extensions in text format",
                    "status": "passed",
                    "title": "lists extensions in text format",
                    "duration": 0.7487159967422485,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension list CLI command",
                        "execute"
                    ],
                    "fullName": "extension list CLI command execute lists extensions in JSON format",
                    "status": "passed",
                    "title": "lists extensions in JSON format",
                    "duration": 0.5465610027313232,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension list CLI command",
                        "execute"
                    ],
                    "fullName": "extension list CLI command execute lists extensions in table format",
                    "status": "passed",
                    "title": "lists extensions in table format",
                    "duration": 0.7781170010566711,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension list CLI command",
                        "execute"
                    ],
                    "fullName": "extension list CLI command execute filters extensions by type",
                    "status": "passed",
                    "title": "filters extensions by type",
                    "duration": 0.5000100135803223,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension list CLI command",
                        "execute"
                    ],
                    "fullName": "extension list CLI command execute shows all extensions when type is \"all\"",
                    "status": "passed",
                    "title": "shows all extensions when type is \"all\"",
                    "duration": 0.46875,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension list CLI command",
                        "execute"
                    ],
                    "fullName": "extension list CLI command execute handles modules only",
                    "status": "passed",
                    "title": "handles modules only",
                    "duration": 0.5550510287284851,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension list CLI command",
                        "execute"
                    ],
                    "fullName": "extension list CLI command execute handles servers only",
                    "status": "passed",
                    "title": "handles servers only",
                    "duration": 0.4926000237464905,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension list CLI command",
                        "execute"
                    ],
                    "fullName": "extension list CLI command execute handles errors during listing",
                    "status": "passed",
                    "title": "handles errors during listing",
                    "duration": 2.4252910017967224,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423723,
            "endTime": 1753117423734.4253,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/extension/cli/list.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "remove CLI command"
                    ],
                    "fullName": "remove CLI command requires extension name",
                    "status": "passed",
                    "title": "requires extension name",
                    "duration": 3.4777029752731323,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "remove CLI command"
                    ],
                    "fullName": "remove CLI command removes extension successfully",
                    "status": "passed",
                    "title": "removes extension successfully",
                    "duration": 2.135195016860962,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "remove CLI command"
                    ],
                    "fullName": "remove CLI command preserves configuration when requested",
                    "status": "passed",
                    "title": "preserves configuration when requested",
                    "duration": 0.5067299604415894,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "remove CLI command"
                    ],
                    "fullName": "remove CLI command handles extension not found",
                    "status": "passed",
                    "title": "handles extension not found",
                    "duration": 0.7421160340309143,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "remove CLI command"
                    ],
                    "fullName": "remove CLI command prevents removing core modules",
                    "status": "passed",
                    "title": "prevents removing core modules",
                    "duration": 0.5413410067558289,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "remove CLI command"
                    ],
                    "fullName": "remove CLI command handles removal errors",
                    "status": "passed",
                    "title": "handles removal errors",
                    "duration": 0.6184530258178711,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424179,
            "endTime": 1753117424187.6184,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/extension/cli/remove.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "extension validate CLI command",
                        "execute"
                    ],
                    "fullName": "extension validate CLI command execute shows error when path is not provided",
                    "status": "passed",
                    "title": "shows error when path is not provided",
                    "duration": 5.934123992919922,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension validate CLI command",
                        "execute"
                    ],
                    "fullName": "extension validate CLI command execute validates extension successfully",
                    "status": "passed",
                    "title": "validates extension successfully",
                    "duration": 1.4749109745025635,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension validate CLI command",
                        "execute"
                    ],
                    "fullName": "extension validate CLI command execute validates extension with strict mode",
                    "status": "passed",
                    "title": "validates extension with strict mode",
                    "duration": 0.5820119976997375,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension validate CLI command",
                        "execute"
                    ],
                    "fullName": "extension validate CLI command execute shows validation errors",
                    "status": "passed",
                    "title": "shows validation errors",
                    "duration": 0.8123369812965393,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension validate CLI command",
                        "execute"
                    ],
                    "fullName": "extension validate CLI command execute handles absolute paths",
                    "status": "passed",
                    "title": "handles absolute paths",
                    "duration": 0.5632220506668091,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension validate CLI command",
                        "execute"
                    ],
                    "fullName": "extension validate CLI command execute handles validation errors with single error",
                    "status": "passed",
                    "title": "handles validation errors with single error",
                    "duration": 0.6319329738616943,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension validate CLI command",
                        "execute"
                    ],
                    "fullName": "extension validate CLI command execute handles exceptions during validation",
                    "status": "passed",
                    "title": "handles exceptions during validation",
                    "duration": 0.801626980304718,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "extension validate CLI command",
                        "execute"
                    ],
                    "fullName": "extension validate CLI command execute passes through validateExtension errors",
                    "status": "passed",
                    "title": "passes through validateExtension errors",
                    "duration": 0.84306401014328,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423718,
            "endTime": 1753117423730.843,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/extension/cli/validate.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "heartbeat reset CLI command"
                    ],
                    "fullName": "heartbeat reset CLI command has correct command metadata",
                    "status": "passed",
                    "title": "has correct command metadata",
                    "duration": 4.31038099527359,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "heartbeat reset CLI command"
                    ],
                    "fullName": "heartbeat reset CLI command handles no existing heartbeat state",
                    "status": "passed",
                    "title": "handles no existing heartbeat state",
                    "duration": 2.521504044532776,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "heartbeat reset CLI command"
                    ],
                    "fullName": "heartbeat reset CLI command requires force flag for reset",
                    "status": "passed",
                    "title": "requires force flag for reset",
                    "duration": 0.9329599738121033,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "heartbeat reset CLI command"
                    ],
                    "fullName": "heartbeat reset CLI command resets heartbeat state with force flag",
                    "status": "passed",
                    "title": "resets heartbeat state with force flag",
                    "duration": 0.8480879664421082,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "heartbeat reset CLI command"
                    ],
                    "fullName": "heartbeat reset CLI command uses custom state directory from environment",
                    "status": "passed",
                    "title": "uses custom state directory from environment",
                    "duration": 0.9055989980697632,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "heartbeat reset CLI command"
                    ],
                    "fullName": "heartbeat reset CLI command handles unlink errors",
                    "status": "passed",
                    "title": "handles unlink errors",
                    "duration": 2.8908210396766663,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424573,
            "endTime": 1753117424588.8909,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/heartbeat/cli/reset.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "heartbeat status CLI command",
                        "command metadata"
                    ],
                    "fullName": "heartbeat status CLI command command metadata has correct name and description",
                    "status": "passed",
                    "title": "has correct name and description",
                    "duration": 1.7809669971466064,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "heartbeat status CLI command",
                        "command metadata"
                    ],
                    "fullName": "heartbeat status CLI command command metadata defines format option",
                    "status": "passed",
                    "title": "defines format option",
                    "duration": 0.6423130035400391,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "heartbeat status CLI command",
                        "execute"
                    ],
                    "fullName": "heartbeat status CLI command execute shows message when no status file exists",
                    "status": "passed",
                    "title": "shows message when no status file exists",
                    "duration": 2.370019018650055,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "heartbeat status CLI command",
                        "execute"
                    ],
                    "fullName": "heartbeat status CLI command execute displays status in table format",
                    "status": "passed",
                    "title": "displays status in table format",
                    "duration": 1.0865219831466675,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "heartbeat status CLI command",
                        "execute"
                    ],
                    "fullName": "heartbeat status CLI command execute displays status in JSON format",
                    "status": "passed",
                    "title": "displays status in JSON format",
                    "duration": 1.1194140315055847,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "heartbeat status CLI command",
                        "execute"
                    ],
                    "fullName": "heartbeat status CLI command execute handles missing system data gracefully",
                    "status": "passed",
                    "title": "handles missing system data gracefully",
                    "duration": 1.053462028503418,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "heartbeat status CLI command",
                        "execute"
                    ],
                    "fullName": "heartbeat status CLI command execute uses custom state directory from environment",
                    "status": "passed",
                    "title": "uses custom state directory from environment",
                    "duration": 0.7765360474586487,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "heartbeat status CLI command",
                        "execute"
                    ],
                    "fullName": "heartbeat status CLI command execute handles file read errors",
                    "status": "passed",
                    "title": "handles file read errors",
                    "duration": 2.079943001270294,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "heartbeat status CLI command",
                        "execute"
                    ],
                    "fullName": "heartbeat status CLI command execute handles JSON parse errors",
                    "status": "passed",
                    "title": "handles JSON parse errors",
                    "duration": 0.9733399748802185,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424163,
            "endTime": 1753117424179.9734,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/heartbeat/cli/status.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Generic OAuth2 OAuth2 Provider"
                    ],
                    "fullName": "Generic OAuth2 OAuth2 Provider should initialize with correct configuration",
                    "status": "passed",
                    "title": "should initialize with correct configuration",
                    "duration": 2.2428370118141174,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Generic OAuth2 OAuth2 Provider"
                    ],
                    "fullName": "Generic OAuth2 OAuth2 Provider should generate valid authorization URL",
                    "status": "passed",
                    "title": "should generate valid authorization URL",
                    "duration": 1.1830849647521973,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Generic OAuth2 OAuth2 Provider"
                    ],
                    "fullName": "Generic OAuth2 OAuth2 Provider should exchange code for tokens successfully",
                    "status": "passed",
                    "title": "should exchange code for tokens successfully",
                    "duration": 3.9852030277252197,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Generic OAuth2 OAuth2 Provider"
                    ],
                    "fullName": "Generic OAuth2 OAuth2 Provider should fetch user info successfully",
                    "status": "passed",
                    "title": "should fetch user info successfully",
                    "duration": 2.4261810183525085,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Generic OAuth2 OAuth2 Provider"
                    ],
                    "fullName": "Generic OAuth2 OAuth2 Provider should refresh tokens successfully",
                    "status": "passed",
                    "title": "should refresh tokens successfully",
                    "duration": 0.4975699782371521,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Generic OAuth2 OAuth2 Provider"
                    ],
                    "fullName": "Generic OAuth2 OAuth2 Provider should handle API errors gracefully",
                    "status": "passed",
                    "title": "should handle API errors gracefully",
                    "duration": 1.914039969444275,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Generic OAuth2 OAuth2 Provider",
                        "Generic OAuth2-specific features"
                    ],
                    "fullName": "Generic OAuth2 OAuth2 Provider Generic OAuth2-specific features should become OIDC provider when issuer is provided",
                    "status": "passed",
                    "title": "should become OIDC provider when issuer is provided",
                    "duration": 0.3122659921646118,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Generic OAuth2 OAuth2 Provider",
                        "Generic OAuth2-specific features"
                    ],
                    "fullName": "Generic OAuth2 OAuth2 Provider Generic OAuth2-specific features should support custom authorization parameters",
                    "status": "passed",
                    "title": "should support custom authorization parameters",
                    "duration": 0.5654319524765015,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Generic OAuth2 OAuth2 Provider",
                        "Generic OAuth2-specific features"
                    ],
                    "fullName": "Generic OAuth2 OAuth2 Provider Generic OAuth2-specific features should handle custom user info mapping",
                    "status": "passed",
                    "title": "should handle custom user info mapping",
                    "duration": 0.5658120512962341,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Generic OIDC Provider"
                    ],
                    "fullName": "Generic OIDC Provider should support OIDC-specific features",
                    "status": "passed",
                    "title": "should support OIDC-specific features",
                    "duration": 0.275085985660553,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424748,
            "endTime": 1753117424763.2751,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/external/auth/providers/generic-oauth2.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "GitHub OAuth2 Provider"
                    ],
                    "fullName": "GitHub OAuth2 Provider should initialize with correct configuration",
                    "status": "passed",
                    "title": "should initialize with correct configuration",
                    "duration": 2.0585440397262573,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GitHub OAuth2 Provider"
                    ],
                    "fullName": "GitHub OAuth2 Provider should generate valid authorization URL",
                    "status": "passed",
                    "title": "should generate valid authorization URL",
                    "duration": 1.2598469853401184,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GitHub OAuth2 Provider"
                    ],
                    "fullName": "GitHub OAuth2 Provider should exchange code for tokens successfully",
                    "status": "passed",
                    "title": "should exchange code for tokens successfully",
                    "duration": 3.9537230134010315,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GitHub OAuth2 Provider"
                    ],
                    "fullName": "GitHub OAuth2 Provider should fetch user info successfully",
                    "status": "passed",
                    "title": "should fetch user info successfully",
                    "duration": 2.1682260036468506,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GitHub OAuth2 Provider"
                    ],
                    "fullName": "GitHub OAuth2 Provider should handle API errors gracefully",
                    "status": "passed",
                    "title": "should handle API errors gracefully",
                    "duration": 1.8116480112075806,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GitHub OAuth2 Provider",
                        "GitHub-specific email handling"
                    ],
                    "fullName": "GitHub OAuth2 Provider GitHub-specific email handling should fetch user emails when user has no public email",
                    "status": "passed",
                    "title": "should fetch user emails when user has no public email",
                    "duration": 1.015179991722107,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GitHub OAuth2 Provider",
                        "GitHub-specific email handling"
                    ],
                    "fullName": "GitHub OAuth2 Provider GitHub-specific email handling should handle errors when fetching emails gracefully",
                    "status": "passed",
                    "title": "should handle errors when fetching emails gracefully",
                    "duration": 0.3813279867172241,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424798,
            "endTime": 1753117424811.3813,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/external/auth/providers/github.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Google OAuth2 Provider"
                    ],
                    "fullName": "Google OAuth2 Provider should initialize with correct configuration",
                    "status": "passed",
                    "title": "should initialize with correct configuration",
                    "duration": 1.3485280275344849,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Google OAuth2 Provider"
                    ],
                    "fullName": "Google OAuth2 Provider should generate valid authorization URL",
                    "status": "passed",
                    "title": "should generate valid authorization URL",
                    "duration": 0.9569100141525269,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Google OAuth2 Provider"
                    ],
                    "fullName": "Google OAuth2 Provider should exchange code for tokens successfully",
                    "status": "passed",
                    "title": "should exchange code for tokens successfully",
                    "duration": 2.744013011455536,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Google OAuth2 Provider"
                    ],
                    "fullName": "Google OAuth2 Provider should fetch user info successfully",
                    "status": "passed",
                    "title": "should fetch user info successfully",
                    "duration": 2.165375053882599,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Google OAuth2 Provider"
                    ],
                    "fullName": "Google OAuth2 Provider should refresh tokens successfully",
                    "status": "passed",
                    "title": "should refresh tokens successfully",
                    "duration": 0.47606003284454346,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Google OAuth2 Provider"
                    ],
                    "fullName": "Google OAuth2 Provider should handle API errors gracefully",
                    "status": "passed",
                    "title": "should handle API errors gracefully",
                    "duration": 1.8102480173110962,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424958,
            "endTime": 1753117424967.8103,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/external/auth/providers/google.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "API Config"
                    ],
                    "fullName": "API Config should define API version",
                    "status": "passed",
                    "title": "should define API version",
                    "duration": 1.8717389702796936,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "API Config"
                    ],
                    "fullName": "API Config should define API base path",
                    "status": "passed",
                    "title": "should define API base path",
                    "duration": 0.30439698696136475,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "API Config"
                    ],
                    "fullName": "API Config should define API endpoints",
                    "status": "passed",
                    "title": "should define API endpoints",
                    "duration": 0.32051700353622437,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "API Config"
                    ],
                    "fullName": "API Config should validate API key format",
                    "status": "passed",
                    "title": "should validate API key format",
                    "duration": 0.37722694873809814,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "API Config"
                    ],
                    "fullName": "API Config should handle API errors",
                    "status": "passed",
                    "title": "should handle API errors",
                    "duration": 0.3922080397605896,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424918,
            "endTime": 1753117424921.392,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/external/rest/api/config.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "API Utils",
                        "Response helpers"
                    ],
                    "fullName": "API Utils Response helpers should format success response",
                    "status": "passed",
                    "title": "should format success response",
                    "duration": 2.5764339566230774,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "API Utils",
                        "Response helpers"
                    ],
                    "fullName": "API Utils Response helpers should format error response",
                    "status": "passed",
                    "title": "should format error response",
                    "duration": 0.38231801986694336,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "API Utils",
                        "Validation helpers"
                    ],
                    "fullName": "API Utils Validation helpers should validate email format",
                    "status": "passed",
                    "title": "should validate email format",
                    "duration": 0.4717899560928345,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "API Utils",
                        "Validation helpers"
                    ],
                    "fullName": "API Utils Validation helpers should validate UUID format",
                    "status": "passed",
                    "title": "should validate UUID format",
                    "duration": 0.4507499933242798,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "API Utils",
                        "Validation helpers"
                    ],
                    "fullName": "API Utils Validation helpers should sanitize input",
                    "status": "passed",
                    "title": "should sanitize input",
                    "duration": 0.396947979927063,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "API Utils",
                        "Pagination helpers"
                    ],
                    "fullName": "API Utils Pagination helpers should calculate pagination",
                    "status": "passed",
                    "title": "should calculate pagination",
                    "duration": 0.38342803716659546,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424797,
            "endTime": 1753117424802.397,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/external/rest/api/utils.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "OAuth2 Authorize Endpoint",
                        "getAuthorize"
                    ],
                    "fullName": "OAuth2 Authorize Endpoint getAuthorize should display authorization consent form",
                    "status": "passed",
                    "title": "should display authorization consent form",
                    "duration": 7.629390001296997,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Authorize Endpoint",
                        "getAuthorize"
                    ],
                    "fullName": "OAuth2 Authorize Endpoint getAuthorize should include PKCE parameters in form",
                    "status": "passed",
                    "title": "should include PKCE parameters in form",
                    "duration": 0.8363779783248901,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Authorize Endpoint",
                        "getAuthorize"
                    ],
                    "fullName": "OAuth2 Authorize Endpoint getAuthorize should handle missing required parameters",
                    "status": "passed",
                    "title": "should handle missing required parameters",
                    "duration": 2.4493520259857178,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Authorize Endpoint",
                        "getAuthorize"
                    ],
                    "fullName": "OAuth2 Authorize Endpoint getAuthorize should handle invalid response_type",
                    "status": "passed",
                    "title": "should handle invalid response_type",
                    "duration": 1.2188050150871277,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Authorize Endpoint",
                        "getAuthorize"
                    ],
                    "fullName": "OAuth2 Authorize Endpoint getAuthorize should handle invalid redirect_uri format",
                    "status": "passed",
                    "title": "should handle invalid redirect_uri format",
                    "duration": 0.7384459972381592,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Authorize Endpoint",
                        "getAuthorize"
                    ],
                    "fullName": "OAuth2 Authorize Endpoint getAuthorize should handle server errors gracefully",
                    "status": "passed",
                    "title": "should handle server errors gracefully",
                    "duration": 1.4452900290489197,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Authorize Endpoint",
                        "postAuthorize"
                    ],
                    "fullName": "OAuth2 Authorize Endpoint postAuthorize should handle authorization denial",
                    "status": "passed",
                    "title": "should handle authorization denial",
                    "duration": 0.6679940223693848,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Authorize Endpoint",
                        "postAuthorize"
                    ],
                    "fullName": "OAuth2 Authorize Endpoint postAuthorize should handle authorization approval",
                    "status": "passed",
                    "title": "should handle authorization approval",
                    "duration": 0.9861900210380554,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Authorize Endpoint",
                        "postAuthorize"
                    ],
                    "fullName": "OAuth2 Authorize Endpoint postAuthorize should generate authorization code with PKCE",
                    "status": "passed",
                    "title": "should generate authorization code with PKCE",
                    "duration": 0.9951300024986267,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Authorize Endpoint",
                        "postAuthorize"
                    ],
                    "fullName": "OAuth2 Authorize Endpoint postAuthorize should redirect without state if not provided",
                    "status": "passed",
                    "title": "should redirect without state if not provided",
                    "duration": 0.6048120260238647,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Authorize Endpoint",
                        "postAuthorize"
                    ],
                    "fullName": "OAuth2 Authorize Endpoint postAuthorize should handle missing required parameters in POST",
                    "status": "passed",
                    "title": "should handle missing required parameters in POST",
                    "duration": 1.2291249632835388,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Authorize Endpoint",
                        "postAuthorize"
                    ],
                    "fullName": "OAuth2 Authorize Endpoint postAuthorize should store authorization code with expiration",
                    "status": "passed",
                    "title": "should store authorization code with expiration",
                    "duration": 0.7558350563049316,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Authorize Endpoint",
                        "postAuthorize"
                    ],
                    "fullName": "OAuth2 Authorize Endpoint postAuthorize should clean up expired authorization codes",
                    "status": "passed",
                    "title": "should clean up expired authorization codes",
                    "duration": 0.6229029893875122,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Authorize Endpoint",
                        "static methods"
                    ],
                    "fullName": "OAuth2 Authorize Endpoint static methods should delete authorization code",
                    "status": "passed",
                    "title": "should delete authorization code",
                    "duration": 0.7546849846839905,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424220,
            "endTime": 1753117424241.7546,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/external/rest/oauth2/authorize.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "OAuth2 Token Endpoint - Optimized",
                        "authorization_code grant"
                    ],
                    "fullName": "OAuth2 Token Endpoint - Optimized authorization_code grant exchanges valid authorization code for tokens",
                    "status": "failed",
                    "title": "exchanges valid authorization code for tokens",
                    "duration": 12.474272012710571,
                    "failureMessages": [
                        "AssertionError: expected \"spy\" to be called with arguments: [ { access_token: Any<String>, …(4) } ]\n\nReceived: \n\n  1st spy call:\n\n  Array [\n    Object {\n-     \"access_token\": Any<String>,\n-     \"expires_in\": 3600,\n-     \"refresh_token\": StringMatching /^[A-Za-z0-9_-]+$/,\n-     \"scope\": \"read write\",\n-     \"token_type\": \"Bearer\",\n+     \"error\": \"server_error\",\n+     \"error_description\": \"Internal server error\",\n    },\n  ]\n\n\nNumber of calls: 1\n\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:1465:13)\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/chai/chai.js:1706:25)\n    at /var/www/html/systemprompt-os/tests/unit/server/external/rest/oauth2/token.spec.ts:96:28\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)"
                    ],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Token Endpoint - Optimized",
                        "authorization_code grant"
                    ],
                    "fullName": "OAuth2 Token Endpoint - Optimized authorization_code grant rejects invalid authorization code",
                    "status": "failed",
                    "title": "rejects invalid authorization code",
                    "duration": 1.5708019733428955,
                    "failureMessages": [
                        "AssertionError: expected \"spy\" to be called with arguments: [ 400 ]\n\nReceived: \n\n  1st spy call:\n\n  Array [\n-   400,\n+   500,\n  ]\n\n\nNumber of calls: 1\n\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:1465:13)\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/chai/chai.js:1706:25)\n    at /var/www/html/systemprompt-os/tests/unit/server/external/rest/oauth2/token.spec.ts:122:30\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)"
                    ],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Token Endpoint - Optimized",
                        "grant type validation"
                    ],
                    "fullName": "OAuth2 Token Endpoint - Optimized grant type validation returns error for 'missing grant_type'",
                    "status": "failed",
                    "title": "returns error for 'missing grant_type'",
                    "duration": 1.0189509987831116,
                    "failureMessages": [
                        "AssertionError: expected \"spy\" to be called with arguments: [ 400 ]\n\nReceived: \n\n  1st spy call:\n\n  Array [\n-   400,\n+   500,\n  ]\n\n\nNumber of calls: 1\n\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:1465:13)\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/chai/chai.js:1706:25)\n    at /var/www/html/systemprompt-os/tests/unit/server/external/rest/oauth2/token.spec.ts:161:30\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)"
                    ],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Token Endpoint - Optimized",
                        "grant type validation"
                    ],
                    "fullName": "OAuth2 Token Endpoint - Optimized grant type validation returns error for 'invalid grant_type'",
                    "status": "failed",
                    "title": "returns error for 'invalid grant_type'",
                    "duration": 0.8788180351257324,
                    "failureMessages": [
                        "AssertionError: expected \"spy\" to be called with arguments: [ 400 ]\n\nReceived: \n\n  1st spy call:\n\n  Array [\n-   400,\n+   500,\n  ]\n\n\nNumber of calls: 1\n\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:1465:13)\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/chai/chai.js:1706:25)\n    at /var/www/html/systemprompt-os/tests/unit/server/external/rest/oauth2/token.spec.ts:161:30\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)"
                    ],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Token Endpoint - Optimized",
                        "grant type validation"
                    ],
                    "fullName": "OAuth2 Token Endpoint - Optimized grant type validation returns error for 'authorization_code without code'",
                    "status": "failed",
                    "title": "returns error for 'authorization_code without code'",
                    "duration": 0.9302290081977844,
                    "failureMessages": [
                        "AssertionError: expected \"spy\" to be called with arguments: [ 400 ]\n\nReceived: \n\n  1st spy call:\n\n  Array [\n-   400,\n+   500,\n  ]\n\n\nNumber of calls: 1\n\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:1465:13)\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/chai/chai.js:1706:25)\n    at /var/www/html/systemprompt-os/tests/unit/server/external/rest/oauth2/token.spec.ts:161:30\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)"
                    ],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Token Endpoint - Optimized",
                        "PKCE Flow"
                    ],
                    "fullName": "OAuth2 Token Endpoint - Optimized PKCE Flow handles 'valid PKCE verification'",
                    "status": "failed",
                    "title": "handles 'valid PKCE verification'",
                    "duration": 2.790638029575348,
                    "failureMessages": [
                        "AssertionError: expected \"spy\" to be called with arguments: [ ObjectContaining{…} ]\n\nReceived: \n\n  1st spy call:\n\n  Array [\n-   ObjectContaining {\n-     \"access_token\": Any<String>,\n+   Object {\n+     \"error\": \"server_error\",\n+     \"error_description\": \"Internal server error\",\n    },\n  ]\n\n\nNumber of calls: 1\n\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:1465:13)\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/chai/chai.js:1706:25)\n    at /var/www/html/systemprompt-os/tests/unit/server/external/rest/oauth2/token.spec.ts:218:30\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)"
                    ],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Token Endpoint - Optimized",
                        "PKCE Flow"
                    ],
                    "fullName": "OAuth2 Token Endpoint - Optimized PKCE Flow handles 'missing code_verifier'",
                    "status": "failed",
                    "title": "handles 'missing code_verifier'",
                    "duration": 1.2430349588394165,
                    "failureMessages": [
                        "AssertionError: expected \"spy\" to be called with arguments: [ 400 ]\n\nReceived: \n\n  1st spy call:\n\n  Array [\n-   400,\n+   500,\n  ]\n\n\nNumber of calls: 1\n\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:1465:13)\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/chai/chai.js:1706:25)\n    at /var/www/html/systemprompt-os/tests/unit/server/external/rest/oauth2/token.spec.ts:222:32\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)"
                    ],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Token Endpoint - Optimized",
                        "PKCE Flow"
                    ],
                    "fullName": "OAuth2 Token Endpoint - Optimized PKCE Flow handles 'wrong code_verifier'",
                    "status": "failed",
                    "title": "handles 'wrong code_verifier'",
                    "duration": 1.2307850122451782,
                    "failureMessages": [
                        "AssertionError: expected \"spy\" to be called with arguments: [ 400 ]\n\nReceived: \n\n  1st spy call:\n\n  Array [\n-   400,\n+   500,\n  ]\n\n\nNumber of calls: 1\n\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:1465:13)\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/chai/chai.js:1706:25)\n    at /var/www/html/systemprompt-os/tests/unit/server/external/rest/oauth2/token.spec.ts:222:32\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)"
                    ],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Token Endpoint - Optimized",
                        "Authorization Code OAuth flow"
                    ],
                    "fullName": "OAuth2 Token Endpoint - Optimized Authorization Code OAuth flow completes full flow successfully",
                    "status": "failed",
                    "title": "completes full flow successfully",
                    "duration": 3.497362971305847,
                    "failureMessages": [
                        "AssertionError: expected { error: 'server_error', …(1) } to match object { access_token: Any<String>, …(4) }\n(2 matching properties omitted from actual)\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:1134:13)\n    at Proxy.<anonymous> (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/chai/chai.js:1706:25)\n    at /var/www/html/systemprompt-os/tests/unit/server/external/rest/oauth2/token.spec.ts:258:22\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)"
                    ],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "OAuth2 Token Endpoint - Optimized",
                        "Token Structure"
                    ],
                    "fullName": "OAuth2 Token Endpoint - Optimized Token Structure generates valid JWT structure for access tokens",
                    "status": "failed",
                    "title": "generates valid JWT structure for access tokens",
                    "duration": 1.9218710064888,
                    "failureMessages": [
                        "TypeError: The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received undefined\n    at new NodeError (node:internal/errors:405:5)\n    at Function.from (node:buffer:325:9)\n    at /var/www/html/systemprompt-os/tests/unit/server/external/rest/oauth2/token.spec.ts:312:46\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///var/www/html/systemprompt-os/node_modules/vitest/node_modules/@vitest/runner/dist/index.js:1262:5)"
                    ],
                    "meta": {}
                }
            ],
            "startTime": 1753117424225,
            "endTime": 1753117424253.9219,
            "status": "failed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/external/rest/oauth2/token.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "UserInfoEndpoint",
                        "getUserInfo"
                    ],
                    "fullName": "UserInfoEndpoint getUserInfo returns 401 when user is not authenticated",
                    "status": "passed",
                    "title": "returns 401 when user is not authenticated",
                    "duration": 3.216247022151947,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "UserInfoEndpoint",
                        "getUserInfo"
                    ],
                    "fullName": "UserInfoEndpoint getUserInfo returns basic user info with openid scope only",
                    "status": "passed",
                    "title": "returns basic user info with openid scope only",
                    "duration": 0.3539869785308838,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "UserInfoEndpoint",
                        "getUserInfo"
                    ],
                    "fullName": "UserInfoEndpoint getUserInfo includes profile information when profile scope is present",
                    "status": "passed",
                    "title": "includes profile information when profile scope is present",
                    "duration": 0.3098059892654419,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "UserInfoEndpoint",
                        "getUserInfo"
                    ],
                    "fullName": "UserInfoEndpoint getUserInfo includes email information when email scope is present",
                    "status": "passed",
                    "title": "includes email information when email scope is present",
                    "duration": 0.2872360348701477,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "UserInfoEndpoint",
                        "getUserInfo"
                    ],
                    "fullName": "UserInfoEndpoint getUserInfo includes agent information when agent scope is present",
                    "status": "passed",
                    "title": "includes agent information when agent scope is present",
                    "duration": 0.30432599782943726,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "UserInfoEndpoint",
                        "getUserInfo"
                    ],
                    "fullName": "UserInfoEndpoint getUserInfo includes all information when all scopes are present",
                    "status": "passed",
                    "title": "includes all information when all scopes are present",
                    "duration": 0.2923559546470642,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "UserInfoEndpoint",
                        "getUserInfo"
                    ],
                    "fullName": "UserInfoEndpoint getUserInfo handles multiple scopes separated by spaces",
                    "status": "passed",
                    "title": "handles multiple scopes separated by spaces",
                    "duration": 0.45933997631073,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "UserInfoEndpoint",
                        "getUserInfo"
                    ],
                    "fullName": "UserInfoEndpoint getUserInfo generates consistent user info based on sub",
                    "status": "passed",
                    "title": "generates consistent user info based on sub",
                    "duration": 0.369268000125885,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "UserInfoEndpoint",
                        "getUserInfo"
                    ],
                    "fullName": "UserInfoEndpoint getUserInfo ignores unknown scopes",
                    "status": "passed",
                    "title": "ignores unknown scopes",
                    "duration": 0.7959659695625305,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424179,
            "endTime": 1753117424185.796,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/external/rest/oauth2/userinfo.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "WellKnownEndpoint",
                        "constructor"
                    ],
                    "fullName": "WellKnownEndpoint constructor removes trailing slash from base URL",
                    "status": "passed",
                    "title": "removes trailing slash from base URL",
                    "duration": 1.8673189878463745,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "WellKnownEndpoint",
                        "getOpenIDConfiguration"
                    ],
                    "fullName": "WellKnownEndpoint getOpenIDConfiguration returns OpenID configuration with default base URL",
                    "status": "passed",
                    "title": "returns OpenID configuration with default base URL",
                    "duration": 2.0509729981422424,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "WellKnownEndpoint",
                        "getOpenIDConfiguration"
                    ],
                    "fullName": "WellKnownEndpoint getOpenIDConfiguration uses tunnel URL when available",
                    "status": "passed",
                    "title": "uses tunnel URL when available",
                    "duration": 0.4133780002593994,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "WellKnownEndpoint",
                        "getJWKS"
                    ],
                    "fullName": "WellKnownEndpoint getJWKS returns JWKS with initialized key",
                    "status": "passed",
                    "title": "returns JWKS with initialized key",
                    "duration": 0.40550804138183594,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "WellKnownEndpoint",
                        "getJWKS"
                    ],
                    "fullName": "WellKnownEndpoint getJWKS initializes keys if not already initialized",
                    "status": "passed",
                    "title": "initializes keys if not already initialized",
                    "duration": 12.755255997180939,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "WellKnownEndpoint",
                        "getJWKS"
                    ],
                    "fullName": "WellKnownEndpoint getJWKS handles error when keys cannot be initialized",
                    "status": "passed",
                    "title": "handles error when keys cannot be initialized",
                    "duration": 0.5709220170974731,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "WellKnownEndpoint",
                        "scopes and claims"
                    ],
                    "fullName": "WellKnownEndpoint scopes and claims includes custom agent scope and claims",
                    "status": "passed",
                    "title": "includes custom agent scope and claims",
                    "duration": 0.7014340162277222,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "WellKnownEndpoint",
                        "scopes and claims"
                    ],
                    "fullName": "WellKnownEndpoint scopes and claims supports PKCE code challenge methods",
                    "status": "passed",
                    "title": "supports PKCE code challenge methods",
                    "duration": 0.31269699335098267,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423720,
            "endTime": 1753117423739.7014,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/external/rest/oauth2/well-known.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "prompts constants",
                        "PROMPTS array"
                    ],
                    "fullName": "prompts constants PROMPTS array contains expected number of prompts",
                    "status": "passed",
                    "title": "contains expected number of prompts",
                    "duration": 2.838760018348694,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "prompts constants",
                        "PROMPTS array"
                    ],
                    "fullName": "prompts constants PROMPTS array all prompts have required properties",
                    "status": "passed",
                    "title": "all prompts have required properties",
                    "duration": 1.0334320068359375,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "prompts constants",
                        "PROMPTS array"
                    ],
                    "fullName": "prompts constants PROMPTS array contains example prompt",
                    "status": "passed",
                    "title": "contains example prompt",
                    "duration": 1.1961950063705444,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "prompts constants",
                        "PROMPTS array"
                    ],
                    "fullName": "prompts constants PROMPTS array contains template help prompt",
                    "status": "passed",
                    "title": "contains template help prompt",
                    "duration": 0.6265929937362671,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "prompts constants",
                        "PROMPTS array"
                    ],
                    "fullName": "prompts constants PROMPTS array all prompt names are unique",
                    "status": "passed",
                    "title": "all prompt names are unique",
                    "duration": 0.30203598737716675,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "prompts constants",
                        "PROMPTS array"
                    ],
                    "fullName": "prompts constants PROMPTS array all arguments have valid structure",
                    "status": "passed",
                    "title": "all arguments have valid structure",
                    "duration": 0.7596160173416138,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "prompts constants",
                        "PROMPTS array"
                    ],
                    "fullName": "prompts constants PROMPTS array example prompt has one required and one optional argument",
                    "status": "passed",
                    "title": "example prompt has one required and one optional argument",
                    "duration": 0.6268129944801331,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "prompts constants",
                        "PROMPTS array"
                    ],
                    "fullName": "prompts constants PROMPTS array template help prompt has only optional arguments",
                    "status": "passed",
                    "title": "template help prompt has only optional arguments",
                    "duration": 0.5162609815597534,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424729,
            "endTime": 1753117424736.6267,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/constants/prompts.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "resources constants",
                        "RESOURCES array"
                    ],
                    "fullName": "resources constants RESOURCES array contains expected number of resources",
                    "status": "passed",
                    "title": "contains expected number of resources",
                    "duration": 2.5536530017852783,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "resources constants",
                        "RESOURCES array"
                    ],
                    "fullName": "resources constants RESOURCES array all resources have required properties",
                    "status": "passed",
                    "title": "all resources have required properties",
                    "duration": 1.413320004940033,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "resources constants",
                        "RESOURCES array"
                    ],
                    "fullName": "resources constants RESOURCES array contains example resource",
                    "status": "passed",
                    "title": "contains example resource",
                    "duration": 0.989920973777771,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "resources constants",
                        "RESOURCES array"
                    ],
                    "fullName": "resources constants RESOURCES array contains config resource",
                    "status": "passed",
                    "title": "contains config resource",
                    "duration": 0.30565696954727173,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "resources constants",
                        "RESOURCES array"
                    ],
                    "fullName": "resources constants RESOURCES array contains guidelines resource",
                    "status": "passed",
                    "title": "contains guidelines resource",
                    "duration": 0.27595603466033936,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "resources constants",
                        "RESOURCES array"
                    ],
                    "fullName": "resources constants RESOURCES array all URIs follow template:// schema",
                    "status": "passed",
                    "title": "all URIs follow template:// schema",
                    "duration": 0.40209800004959106,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "resources constants",
                        "RESOURCES array"
                    ],
                    "fullName": "resources constants RESOURCES array all URIs are unique",
                    "status": "passed",
                    "title": "all URIs are unique",
                    "duration": 0.2596049904823303,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "resources constants",
                        "RESOURCES array"
                    ],
                    "fullName": "resources constants RESOURCES array all names are unique",
                    "status": "passed",
                    "title": "all names are unique",
                    "duration": 0.21847498416900635,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "resources constants",
                        "RESOURCES array"
                    ],
                    "fullName": "resources constants RESOURCES array mime types are valid",
                    "status": "passed",
                    "title": "mime types are valid",
                    "duration": 2.7281059622764587,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424770,
            "endTime": 1753117424779.728,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/constants/resources.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "task-status constants",
                        "TaskStatus"
                    ],
                    "fullName": "task-status constants TaskStatus defines all expected status values",
                    "status": "passed",
                    "title": "defines all expected status values",
                    "duration": 1.7737169861793518,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "task-status constants",
                        "TaskStatus"
                    ],
                    "fullName": "task-status constants TaskStatus has correct number of statuses",
                    "status": "passed",
                    "title": "has correct number of statuses",
                    "duration": 0.9997210502624512,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "task-status constants",
                        "TaskStatus"
                    ],
                    "fullName": "task-status constants TaskStatus status values are unique",
                    "status": "passed",
                    "title": "status values are unique",
                    "duration": 0.1902940273284912,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "task-status constants",
                        "TERMINALSTATUSES"
                    ],
                    "fullName": "task-status constants TERMINALSTATUSES contains correct terminal statuses",
                    "status": "passed",
                    "title": "contains correct terminal statuses",
                    "duration": 1.112354040145874,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "task-status constants",
                        "TERMINALSTATUSES"
                    ],
                    "fullName": "task-status constants TERMINALSTATUSES all terminal statuses exist in TaskStatus",
                    "status": "passed",
                    "title": "all terminal statuses exist in TaskStatus",
                    "duration": 0.8937180042266846,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "task-status constants",
                        "ACTIVESTATUSES"
                    ],
                    "fullName": "task-status constants ACTIVESTATUSES contains correct active statuses",
                    "status": "passed",
                    "title": "contains correct active statuses",
                    "duration": 0.30203598737716675,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "task-status constants",
                        "ACTIVESTATUSES"
                    ],
                    "fullName": "task-status constants ACTIVESTATUSES all active statuses exist in TaskStatus",
                    "status": "passed",
                    "title": "all active statuses exist in TaskStatus",
                    "duration": 0.5773720145225525,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "task-status constants",
                        "status categories"
                    ],
                    "fullName": "task-status constants status categories terminal and active statuses are mutually exclusive",
                    "status": "passed",
                    "title": "terminal and active statuses are mutually exclusive",
                    "duration": 0.5322409868240356,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "task-status constants",
                        "status categories"
                    ],
                    "fullName": "task-status constants status categories all statuses are categorized",
                    "status": "passed",
                    "title": "all statuses are categorized",
                    "duration": 0.31687599420547485,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "task-status constants",
                        "TaskStatusType"
                    ],
                    "fullName": "task-status constants TaskStatusType type can be used for type checking",
                    "status": "passed",
                    "title": "type can be used for type checking",
                    "duration": 0.5033010244369507,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424769,
            "endTime": 1753117424777.5034,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/constants/task-status.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "tools constants",
                        "TOOLS array"
                    ],
                    "fullName": "tools constants TOOLS array is defined as an empty array",
                    "status": "passed",
                    "title": "is defined as an empty array",
                    "duration": 2.765507996082306,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "tools constants",
                        "TOOLS array"
                    ],
                    "fullName": "tools constants TOOLS array is of correct type",
                    "status": "passed",
                    "title": "is of correct type",
                    "duration": 0.8137170076370239,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424955,
            "endTime": 1753117424958.8137,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/constants/tools.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "sendOperationNotification"
                    ],
                    "fullName": "Notification Handlers sendOperationNotification should send operation notification to all servers",
                    "status": "passed",
                    "title": "should send operation notification to all servers",
                    "duration": 3.9374729990959167,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "sendOperationNotification"
                    ],
                    "fullName": "Notification Handlers sendOperationNotification should send operation notification to specific session",
                    "status": "passed",
                    "title": "should send operation notification to specific session",
                    "duration": 0.6678740382194519,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "sendOperationNotification"
                    ],
                    "fullName": "Notification Handlers sendOperationNotification should handle no active servers gracefully",
                    "status": "passed",
                    "title": "should handle no active servers gracefully",
                    "duration": 0.8578580021858215,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "sendOperationNotification"
                    ],
                    "fullName": "Notification Handlers sendOperationNotification should handle notification failures silently",
                    "status": "passed",
                    "title": "should handle notification failures silently",
                    "duration": 0.5625619888305664,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "sendJsonResultNotification"
                    ],
                    "fullName": "Notification Handlers sendJsonResultNotification should send JSON result notification",
                    "status": "passed",
                    "title": "should send JSON result notification",
                    "duration": 0.45861899852752686,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "sendConfigNotification"
                    ],
                    "fullName": "Notification Handlers sendConfigNotification should send configuration change notification",
                    "status": "passed",
                    "title": "should send configuration change notification",
                    "duration": 0.4392790198326111,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "sendProgressNotification"
                    ],
                    "fullName": "Notification Handlers sendProgressNotification should send progress notification with total",
                    "status": "passed",
                    "title": "should send progress notification with total",
                    "duration": 0.44780999422073364,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "sendProgressNotification"
                    ],
                    "fullName": "Notification Handlers sendProgressNotification should send progress notification without total",
                    "status": "passed",
                    "title": "should send progress notification without total",
                    "duration": 0.4429699778556824,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "sendProgressNotification"
                    ],
                    "fullName": "Notification Handlers sendProgressNotification should send progress notification to specific session",
                    "status": "passed",
                    "title": "should send progress notification to specific session",
                    "duration": 0.47032999992370605,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "sendProgressNotification"
                    ],
                    "fullName": "Notification Handlers sendProgressNotification should handle numeric progress tokens",
                    "status": "passed",
                    "title": "should handle numeric progress tokens",
                    "duration": 0.4100479483604431,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "sendRootsListChangedNotification"
                    ],
                    "fullName": "Notification Handlers sendRootsListChangedNotification should send roots list changed notification",
                    "status": "passed",
                    "title": "should send roots list changed notification",
                    "duration": 0.4780600070953369,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "sendResourcesUpdatedNotification"
                    ],
                    "fullName": "Notification Handlers sendResourcesUpdatedNotification should send resources updated notification",
                    "status": "passed",
                    "title": "should send resources updated notification",
                    "duration": 0.4996410012245178,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "sendResourcesUpdatedNotification"
                    ],
                    "fullName": "Notification Handlers sendResourcesUpdatedNotification should send resources updated notification to specific session",
                    "status": "passed",
                    "title": "should send resources updated notification to specific session",
                    "duration": 0.526220977306366,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "sendResourcesListChangedNotification"
                    ],
                    "fullName": "Notification Handlers sendResourcesListChangedNotification should send resources list changed notification",
                    "status": "passed",
                    "title": "should send resources list changed notification",
                    "duration": 0.7415760159492493,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "broadcast behavior"
                    ],
                    "fullName": "Notification Handlers broadcast behavior should broadcast to multiple servers",
                    "status": "passed",
                    "title": "should broadcast to multiple servers",
                    "duration": 1.078013002872467,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "broadcast behavior"
                    ],
                    "fullName": "Notification Handlers broadcast behavior should continue broadcasting even if one server fails",
                    "status": "passed",
                    "title": "should continue broadcasting even if one server fails",
                    "duration": 1.0573720335960388,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "error handling"
                    ],
                    "fullName": "Notification Handlers error handling should handle missing handler gracefully",
                    "status": "passed",
                    "title": "should handle missing handler gracefully",
                    "duration": 0.7402560114860535,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Notification Handlers",
                        "error handling"
                    ],
                    "fullName": "Notification Handlers error handling should handle missing server for session gracefully",
                    "status": "passed",
                    "title": "should handle missing server for session gracefully",
                    "duration": 0.6590840220451355,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423700,
            "endTime": 1753117423716.6592,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/handlers/notifications.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Prompt Handlers",
                        "handleListPrompts"
                    ],
                    "fullName": "Prompt Handlers handleListPrompts should return all available prompts",
                    "status": "passed",
                    "title": "should return all available prompts",
                    "duration": 2.1684849858283997,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Prompt Handlers",
                        "handleGetPrompt"
                    ],
                    "fullName": "Prompt Handlers handleGetPrompt should return fixbug prompt with substituted variables",
                    "status": "passed",
                    "title": "should return fixbug prompt with substituted variables",
                    "duration": 0.8928390145301819,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Prompt Handlers",
                        "handleGetPrompt"
                    ],
                    "fullName": "Prompt Handlers handleGetPrompt should return unittest prompt with substituted variables",
                    "status": "passed",
                    "title": "should return unittest prompt with substituted variables",
                    "duration": 0.22247499227523804,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Prompt Handlers",
                        "handleGetPrompt"
                    ],
                    "fullName": "Prompt Handlers handleGetPrompt should handle missing optional arguments",
                    "status": "passed",
                    "title": "should handle missing optional arguments",
                    "duration": 0.18645399808883667,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Prompt Handlers",
                        "handleGetPrompt"
                    ],
                    "fullName": "Prompt Handlers handleGetPrompt should throw error for unknown prompt",
                    "status": "passed",
                    "title": "should throw error for unknown prompt",
                    "duration": 1.2580170035362244,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Prompt Handlers",
                        "handleGetPrompt"
                    ],
                    "fullName": "Prompt Handlers handleGetPrompt should handle prompts without arguments",
                    "status": "passed",
                    "title": "should handle prompts without arguments",
                    "duration": 0.2316250205039978,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Prompt Handlers",
                        "handleGetPrompt"
                    ],
                    "fullName": "Prompt Handlers handleGetPrompt should handle multiple occurrences of the same variable",
                    "status": "passed",
                    "title": "should handle multiple occurrences of the same variable",
                    "duration": 8.275503993034363,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Prompt Handlers",
                        "handleGetPrompt"
                    ],
                    "fullName": "Prompt Handlers handleGetPrompt should handle non-text content messages",
                    "status": "passed",
                    "title": "should handle non-text content messages",
                    "duration": 8.649020969867706,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Prompt Handlers",
                        "handleGetPrompt"
                    ],
                    "fullName": "Prompt Handlers handleGetPrompt should convert values to strings",
                    "status": "passed",
                    "title": "should convert values to strings",
                    "duration": 0.2830960154533386,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423698,
            "endTime": 1753117423721.2832,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/handlers/prompt-handlers.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Resource Handlers",
                        "handleListResources"
                    ],
                    "fullName": "Resource Handlers handleListResources should return empty resources array",
                    "status": "passed",
                    "title": "should return empty resources array",
                    "duration": 2.2494069933891296,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Resource Handlers",
                        "handleListResources"
                    ],
                    "fullName": "Resource Handlers handleListResources should handle errors in resource listing",
                    "status": "passed",
                    "title": "should handle errors in resource listing",
                    "duration": 0.3388980031013489,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Resource Handlers",
                        "handleResourceCall"
                    ],
                    "fullName": "Resource Handlers handleResourceCall should return empty result for any resource",
                    "status": "passed",
                    "title": "should return empty result for any resource",
                    "duration": 0.29479604959487915,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Resource Handlers",
                        "handleResourceCall"
                    ],
                    "fullName": "Resource Handlers handleResourceCall should handle task list resource",
                    "status": "passed",
                    "title": "should handle task list resource",
                    "duration": 0.23995500802993774,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Resource Handlers",
                        "handleResourceCall"
                    ],
                    "fullName": "Resource Handlers handleResourceCall should handle individual task resource",
                    "status": "passed",
                    "title": "should handle individual task resource",
                    "duration": 0.22301501035690308,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Resource Handlers",
                        "handleResourceCall"
                    ],
                    "fullName": "Resource Handlers handleResourceCall should handle task logs resource",
                    "status": "passed",
                    "title": "should handle task logs resource",
                    "duration": 0.20807498693466187,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Resource Handlers",
                        "handleResourceCall"
                    ],
                    "fullName": "Resource Handlers handleResourceCall should handle task result resource",
                    "status": "passed",
                    "title": "should handle task result resource",
                    "duration": 0.23257499933242798,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Resource Handlers",
                        "handleResourceCall"
                    ],
                    "fullName": "Resource Handlers handleResourceCall should handle unknown resource types",
                    "status": "passed",
                    "title": "should handle unknown resource types",
                    "duration": 0.22448498010635376,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Resource Handlers",
                        "handleResourceCall"
                    ],
                    "fullName": "Resource Handlers handleResourceCall should handle errors in resource reading",
                    "status": "passed",
                    "title": "should handle errors in resource reading",
                    "duration": 0.2150450348854065,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424701,
            "endTime": 1753117424705.2327,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/handlers/resource-handlers.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "MCP Tool Handlers",
                        "handleListTools"
                    ],
                    "fullName": "MCP Tool Handlers handleListTools should return check-status tool for admin users",
                    "status": "passed",
                    "title": "should return check-status tool for admin users",
                    "duration": 7.5559579730033875,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Tool Handlers",
                        "handleListTools"
                    ],
                    "fullName": "MCP Tool Handlers handleListTools should return empty tool list for basic users",
                    "status": "passed",
                    "title": "should return empty tool list for basic users",
                    "duration": 1.0176519751548767,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Tool Handlers",
                        "handleListTools"
                    ],
                    "fullName": "MCP Tool Handlers handleListTools should return empty tool list when no context provided",
                    "status": "passed",
                    "title": "should return empty tool list when no context provided",
                    "duration": 0.6061829924583435,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Tool Handlers",
                        "handleListTools"
                    ],
                    "fullName": "MCP Tool Handlers handleListTools should log tool filtering process",
                    "status": "passed",
                    "title": "should log tool filtering process",
                    "duration": 1.5821929574012756,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Tool Handlers",
                        "handleListTools"
                    ],
                    "fullName": "MCP Tool Handlers handleListTools should handle errors gracefully",
                    "status": "passed",
                    "title": "should handle errors gracefully",
                    "duration": 14.205967009067535,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Tool Handlers",
                        "handleToolCall"
                    ],
                    "fullName": "MCP Tool Handlers handleToolCall should allow admin to call check-status tool",
                    "status": "passed",
                    "title": "should allow admin to call check-status tool",
                    "duration": 1.9207200407981873,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Tool Handlers",
                        "handleToolCall"
                    ],
                    "fullName": "MCP Tool Handlers handleToolCall should deny basic user from calling check-status tool",
                    "status": "passed",
                    "title": "should deny basic user from calling check-status tool",
                    "duration": 0.8528079986572266,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Tool Handlers",
                        "handleToolCall"
                    ],
                    "fullName": "MCP Tool Handlers handleToolCall should throw error for unknown tool",
                    "status": "passed",
                    "title": "should throw error for unknown tool",
                    "duration": 0.6050729751586914,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Tool Handlers",
                        "handleToolCall"
                    ],
                    "fullName": "MCP Tool Handlers handleToolCall should require session ID",
                    "status": "passed",
                    "title": "should require session ID",
                    "duration": 0.5450620055198669,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Tool Handlers",
                        "handleToolCall"
                    ],
                    "fullName": "MCP Tool Handlers handleToolCall should log permission denial attempts",
                    "status": "passed",
                    "title": "should log permission denial attempts",
                    "duration": 0.7836059927940369,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Tool Handlers",
                        "handleToolCall"
                    ],
                    "fullName": "MCP Tool Handlers handleToolCall should log successful tool execution",
                    "status": "passed",
                    "title": "should log successful tool execution",
                    "duration": 0.5258509516716003,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Tool Handlers",
                        "handleToolCall"
                    ],
                    "fullName": "MCP Tool Handlers handleToolCall should handle tool execution errors",
                    "status": "passed",
                    "title": "should handle tool execution errors",
                    "duration": 0.9450400471687317,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Tool Handlers",
                        "handleToolCall"
                    ],
                    "fullName": "MCP Tool Handlers handleToolCall should validate tool arguments with Zod",
                    "status": "passed",
                    "title": "should validate tool arguments with Zod",
                    "duration": 0.5509909987449646,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Tool Handlers",
                        "Permission System Integration"
                    ],
                    "fullName": "MCP Tool Handlers Permission System Integration should respect granular permissions",
                    "status": "passed",
                    "title": "should respect granular permissions",
                    "duration": 2.0735320448875427,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "MCP Tool Handlers",
                        "Permission System Integration"
                    ],
                    "fullName": "MCP Tool Handlers Permission System Integration should handle session expiration",
                    "status": "passed",
                    "title": "should handle session expiration",
                    "duration": 0.9711000323295593,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423877,
            "endTime": 1753117423911.9712,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/handlers/tool-handlers.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Session States"
                    ],
                    "fullName": "Session States should have correct state values",
                    "status": "passed",
                    "title": "should have correct state values",
                    "duration": 1.9695919752120972,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Session States"
                    ],
                    "fullName": "Session States should have all expected state keys",
                    "status": "passed",
                    "title": "should have all expected state keys",
                    "duration": 1.3592480421066284,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Session States"
                    ],
                    "fullName": "Session States should be a const object",
                    "status": "passed",
                    "title": "should be a const object",
                    "duration": 0.2716050148010254,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Session States"
                    ],
                    "fullName": "Session States should work with SessionState type",
                    "status": "passed",
                    "title": "should work with SessionState type",
                    "duration": 1.2546910047531128,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Session States"
                    ],
                    "fullName": "Session States should have unique values",
                    "status": "passed",
                    "title": "should have unique values",
                    "duration": 0.21999400854110718,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424930,
            "endTime": 1753117424935.2546,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/types/session-states.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Task Helper Utilities",
                        "enhanceTask"
                    ],
                    "fullName": "Task Helper Utilities enhanceTask should enhance a task with metadata",
                    "status": "passed",
                    "title": "should enhance a task with metadata",
                    "duration": 3.9575819969177246,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Task Helper Utilities",
                        "enhanceTask"
                    ],
                    "fullName": "Task Helper Utilities enhanceTask should preserve all original task properties",
                    "status": "passed",
                    "title": "should preserve all original task properties",
                    "duration": 1.2378649711608887,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Task Helper Utilities",
                        "enhanceTask"
                    ],
                    "fullName": "Task Helper Utilities enhanceTask should handle empty task object",
                    "status": "passed",
                    "title": "should handle empty task object",
                    "duration": 0.305105984210968,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Task Helper Utilities",
                        "enhanceTask"
                    ],
                    "fullName": "Task Helper Utilities enhanceTask should handle null or undefined task",
                    "status": "passed",
                    "title": "should handle null or undefined task",
                    "duration": 0.2845960259437561,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Task Helper Utilities",
                        "validateTaskId"
                    ],
                    "fullName": "Task Helper Utilities validateTaskId should return true for any task ID (stub implementation)",
                    "status": "passed",
                    "title": "should return true for any task ID (stub implementation)",
                    "duration": 0.36345797777175903,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Task Helper Utilities",
                        "validateTaskId"
                    ],
                    "fullName": "Task Helper Utilities validateTaskId should handle various task ID formats",
                    "status": "passed",
                    "title": "should handle various task ID formats",
                    "duration": 0.9919110536575317,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Task Helper Utilities",
                        "formatTaskForResponse"
                    ],
                    "fullName": "Task Helper Utilities formatTaskForResponse should return task unchanged (stub implementation)",
                    "status": "passed",
                    "title": "should return task unchanged (stub implementation)",
                    "duration": 0.35193800926208496,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Task Helper Utilities",
                        "formatTaskForResponse"
                    ],
                    "fullName": "Task Helper Utilities formatTaskForResponse should handle various task structures",
                    "status": "passed",
                    "title": "should handle various task structures",
                    "duration": 0.40630900859832764,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Task Helper Utilities",
                        "integration scenarios"
                    ],
                    "fullName": "Task Helper Utilities integration scenarios should work with typical task workflow",
                    "status": "passed",
                    "title": "should work with typical task workflow",
                    "duration": 0.35913801193237305,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424588,
            "endTime": 1753117424596.4062,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/utils/task-helpers.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "GitHubProvider",
                        "constructor"
                    ],
                    "fullName": "GitHubProvider constructor initializes with provided config",
                    "status": "passed",
                    "title": "initializes with provided config",
                    "duration": 1.3476490378379822,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GitHubProvider",
                        "constructor"
                    ],
                    "fullName": "GitHubProvider constructor sets default scope if not provided",
                    "status": "passed",
                    "title": "sets default scope if not provided",
                    "duration": 0.6103830337524414,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GitHubProvider",
                        "constructor"
                    ],
                    "fullName": "GitHubProvider constructor uses custom scope if provided",
                    "status": "passed",
                    "title": "uses custom scope if provided",
                    "duration": 0.20909500122070312,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GitHubProvider",
                        "getAuthorizationUrl"
                    ],
                    "fullName": "GitHubProvider getAuthorizationUrl generates correct authorization URL",
                    "status": "passed",
                    "title": "generates correct authorization URL",
                    "duration": 0.6518840193748474,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GitHubProvider",
                        "exchangeCodeForTokens"
                    ],
                    "fullName": "GitHubProvider exchangeCodeForTokens exchanges authorization code for tokens",
                    "status": "passed",
                    "title": "exchanges authorization code for tokens",
                    "duration": 2.3136590123176575,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GitHubProvider",
                        "exchangeCodeForTokens"
                    ],
                    "fullName": "GitHubProvider exchangeCodeForTokens handles token exchange errors",
                    "status": "passed",
                    "title": "handles token exchange errors",
                    "duration": 1.7585870027542114,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GitHubProvider",
                        "getUserInfo"
                    ],
                    "fullName": "GitHubProvider getUserInfo fetches user info with primary email when no public email",
                    "status": "passed",
                    "title": "fetches user info with primary email when no public email",
                    "duration": 0.9910010099411011,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GitHubProvider",
                        "getUserInfo"
                    ],
                    "fullName": "GitHubProvider getUserInfo uses public email when no primary email found",
                    "status": "passed",
                    "title": "uses public email when no primary email found",
                    "duration": 0.40109801292419434,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GitHubProvider",
                        "getUserInfo"
                    ],
                    "fullName": "GitHubProvider getUserInfo handles user info fetch errors",
                    "status": "passed",
                    "title": "handles user info fetch errors",
                    "duration": 0.4010390043258667,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GitHubProvider",
                        "getUserInfo"
                    ],
                    "fullName": "GitHubProvider getUserInfo handles email fetch errors gracefully",
                    "status": "passed",
                    "title": "handles email fetch errors gracefully",
                    "duration": 0.39900898933410645,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GitHubProvider",
                        "getUserInfo"
                    ],
                    "fullName": "GitHubProvider getUserInfo returns undefined email if no primary and no public email",
                    "status": "passed",
                    "title": "returns undefined email if no primary and no public email",
                    "duration": 0.6827099919319153,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423701,
            "endTime": 1753117423710.6826,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/auth/providers/core/github.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "GoogleProvider",
                        "constructor"
                    ],
                    "fullName": "GoogleProvider constructor initializes with provided config",
                    "status": "passed",
                    "title": "initializes with provided config",
                    "duration": 2.1479049921035767,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GoogleProvider",
                        "constructor"
                    ],
                    "fullName": "GoogleProvider constructor sets default scope if not provided",
                    "status": "passed",
                    "title": "sets default scope if not provided",
                    "duration": 0.9282200336456299,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GoogleProvider",
                        "constructor"
                    ],
                    "fullName": "GoogleProvider constructor uses custom scope if provided",
                    "status": "passed",
                    "title": "uses custom scope if provided",
                    "duration": 0.35180801153182983,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GoogleProvider",
                        "getAuthorizationUrl"
                    ],
                    "fullName": "GoogleProvider getAuthorizationUrl generates correct authorization URL",
                    "status": "passed",
                    "title": "generates correct authorization URL",
                    "duration": 1.1291229724884033,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GoogleProvider",
                        "getAuthorizationUrl"
                    ],
                    "fullName": "GoogleProvider getAuthorizationUrl includes nonce when provided",
                    "status": "passed",
                    "title": "includes nonce when provided",
                    "duration": 0.45562899112701416,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GoogleProvider",
                        "exchangeCodeForTokens"
                    ],
                    "fullName": "GoogleProvider exchangeCodeForTokens exchanges authorization code for tokens",
                    "status": "passed",
                    "title": "exchanges authorization code for tokens",
                    "duration": 3.458532989025116,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GoogleProvider",
                        "exchangeCodeForTokens"
                    ],
                    "fullName": "GoogleProvider exchangeCodeForTokens handles token exchange errors",
                    "status": "passed",
                    "title": "handles token exchange errors",
                    "duration": 1.8807089924812317,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GoogleProvider",
                        "getUserInfo"
                    ],
                    "fullName": "GoogleProvider getUserInfo fetches user info from Google",
                    "status": "passed",
                    "title": "fetches user info from Google",
                    "duration": 0.7671900391578674,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GoogleProvider",
                        "getUserInfo"
                    ],
                    "fullName": "GoogleProvider getUserInfo handles user info fetch errors",
                    "status": "passed",
                    "title": "handles user info fetch errors",
                    "duration": 0.4207479953765869,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GoogleProvider",
                        "getUserInfo"
                    ],
                    "fullName": "GoogleProvider getUserInfo maps user info correctly with minimal data",
                    "status": "passed",
                    "title": "maps user info correctly with minimal data",
                    "duration": 0.4382689595222473,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GoogleProvider",
                        "refreshTokens"
                    ],
                    "fullName": "GoogleProvider refreshTokens refreshes access token using refresh token",
                    "status": "passed",
                    "title": "refreshes access token using refresh token",
                    "duration": 0.6444240212440491,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GoogleProvider",
                        "refreshTokens"
                    ],
                    "fullName": "GoogleProvider refreshTokens handles refresh token errors",
                    "status": "passed",
                    "title": "handles refresh token errors",
                    "duration": 0.29694604873657227,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GoogleProvider",
                        "revokeTokens"
                    ],
                    "fullName": "GoogleProvider revokeTokens revokes a token",
                    "status": "passed",
                    "title": "revokes a token",
                    "duration": 0.3650069832801819,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GoogleProvider",
                        "revokeTokens"
                    ],
                    "fullName": "GoogleProvider revokeTokens handles revocation errors",
                    "status": "passed",
                    "title": "handles revocation errors",
                    "duration": 0.2968769669532776,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423700,
            "endTime": 1753117423715.365,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/auth/providers/core/google.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "GenericOAuth2Provider",
                        "constructor"
                    ],
                    "fullName": "GenericOAuth2Provider constructor creates OAuth2 provider with basic config",
                    "status": "passed",
                    "title": "creates OAuth2 provider with basic config",
                    "duration": 1.3930890560150146,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GenericOAuth2Provider",
                        "constructor"
                    ],
                    "fullName": "GenericOAuth2Provider constructor creates OIDC provider when issuer is present",
                    "status": "passed",
                    "title": "creates OIDC provider when issuer is present",
                    "duration": 0.1944340467453003,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GenericOAuth2Provider",
                        "constructor"
                    ],
                    "fullName": "GenericOAuth2Provider constructor sets default scope if not provided",
                    "status": "passed",
                    "title": "sets default scope if not provided",
                    "duration": 0.6039919853210449,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GenericOAuth2Provider",
                        "getAuthorizationUrl"
                    ],
                    "fullName": "GenericOAuth2Provider getAuthorizationUrl generates authorization URL with required parameters",
                    "status": "passed",
                    "title": "generates authorization URL with required parameters",
                    "duration": 0.6935450434684753,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GenericOAuth2Provider",
                        "getAuthorizationUrl"
                    ],
                    "fullName": "GenericOAuth2Provider getAuthorizationUrl includes nonce for OIDC providers",
                    "status": "passed",
                    "title": "includes nonce for OIDC providers",
                    "duration": 0.2923559546470642,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GenericOAuth2Provider",
                        "getAuthorizationUrl"
                    ],
                    "fullName": "GenericOAuth2Provider getAuthorizationUrl includes custom parameters",
                    "status": "passed",
                    "title": "includes custom parameters",
                    "duration": 0.3026859760284424,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GenericOAuth2Provider",
                        "exchangeCodeForTokens"
                    ],
                    "fullName": "GenericOAuth2Provider exchangeCodeForTokens exchanges authorization code for tokens",
                    "status": "passed",
                    "title": "exchanges authorization code for tokens",
                    "duration": 2.1596660017967224,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GenericOAuth2Provider",
                        "exchangeCodeForTokens"
                    ],
                    "fullName": "GenericOAuth2Provider exchangeCodeForTokens handles token exchange errors",
                    "status": "passed",
                    "title": "handles token exchange errors",
                    "duration": 1.5763329863548279,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GenericOAuth2Provider",
                        "getUserInfo"
                    ],
                    "fullName": "GenericOAuth2Provider getUserInfo fetches user info with access token",
                    "status": "passed",
                    "title": "fetches user info with access token",
                    "duration": 0.7103450298309326,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GenericOAuth2Provider",
                        "getUserInfo"
                    ],
                    "fullName": "GenericOAuth2Provider getUserInfo applies custom user info mapping",
                    "status": "passed",
                    "title": "applies custom user info mapping",
                    "duration": 0.5262410044670105,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GenericOAuth2Provider",
                        "getUserInfo"
                    ],
                    "fullName": "GenericOAuth2Provider getUserInfo throws error when endpoint not configured",
                    "status": "passed",
                    "title": "throws error when endpoint not configured",
                    "duration": 0.5821120142936707,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GenericOAuth2Provider",
                        "refreshAccessToken"
                    ],
                    "fullName": "GenericOAuth2Provider refreshAccessToken refreshes access token using refresh token",
                    "status": "passed",
                    "title": "refreshes access token using refresh token",
                    "duration": 0.5385909676551819,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "GenericOAuth2Provider",
                        "OIDC discovery"
                    ],
                    "fullName": "GenericOAuth2Provider OIDC discovery creates provider from OIDC discovery document",
                    "status": "passed",
                    "title": "creates provider from OIDC discovery document",
                    "duration": 0.36244797706604004,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423700,
            "endTime": 1753117423711.3625,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/modules/core/auth/providers/core/oauth2.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "check-status tool definition"
                    ],
                    "fullName": "check-status tool definition has correct name and description",
                    "status": "passed",
                    "title": "has correct name and description",
                    "duration": 1.7711570262908936,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "check-status tool definition"
                    ],
                    "fullName": "check-status tool definition has correct input schema",
                    "status": "passed",
                    "title": "has correct input schema",
                    "duration": 0.33300697803497314,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "check-status tool definition"
                    ],
                    "fullName": "check-status tool definition defines includeContainers property",
                    "status": "passed",
                    "title": "defines includeContainers property",
                    "duration": 1.1113939881324768,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "check-status tool definition"
                    ],
                    "fullName": "check-status tool definition defines includeUsers property",
                    "status": "passed",
                    "title": "defines includeUsers property",
                    "duration": 0.3551979660987854,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "check-status tool definition"
                    ],
                    "fullName": "check-status tool definition has exactly five properties",
                    "status": "passed",
                    "title": "has exactly five properties",
                    "duration": 1.751725971698761,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "check-status tool definition"
                    ],
                    "fullName": "check-status tool definition has admin metadata",
                    "status": "passed",
                    "title": "has admin metadata",
                    "duration": 0.3693469762802124,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424911,
            "endTime": 1753117424916.7517,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/constants/tool/check-status.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Bug Fixing Prompts",
                        "FIXBUG_PROMPT"
                    ],
                    "fullName": "Bug Fixing Prompts FIXBUG_PROMPT should have correct structure",
                    "status": "passed",
                    "title": "should have correct structure",
                    "duration": 2.771768033504486,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Bug Fixing Prompts",
                        "FIXBUG_PROMPT"
                    ],
                    "fullName": "Bug Fixing Prompts FIXBUG_PROMPT should have correct arguments",
                    "status": "passed",
                    "title": "should have correct arguments",
                    "duration": 1.8463879823684692,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Bug Fixing Prompts",
                        "FIXBUG_PROMPT"
                    ],
                    "fullName": "Bug Fixing Prompts FIXBUG_PROMPT should have messages array with user role",
                    "status": "passed",
                    "title": "should have messages array with user role",
                    "duration": 0.5599920153617859,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Bug Fixing Prompts",
                        "FIXBUG_PROMPT"
                    ],
                    "fullName": "Bug Fixing Prompts FIXBUG_PROMPT should have text content with template variables",
                    "status": "passed",
                    "title": "should have text content with template variables",
                    "duration": 0.6251229643821716,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Bug Fixing Prompts",
                        "FIXBUG_PROMPT"
                    ],
                    "fullName": "Bug Fixing Prompts FIXBUG_PROMPT should include detailed debugging instructions",
                    "status": "passed",
                    "title": "should include detailed debugging instructions",
                    "duration": 0.24092602729797363,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Bug Fixing Prompts",
                        "BUGFIXING_PROMPTS"
                    ],
                    "fullName": "Bug Fixing Prompts BUGFIXING_PROMPTS should export array containing FIXBUG_PROMPT",
                    "status": "passed",
                    "title": "should export array containing FIXBUG_PROMPT",
                    "duration": 0.747527003288269,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424729,
            "endTime": 1753117424735.7476,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/handlers/prompts/bug-fixing.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Prompts Index",
                        "CODINGPROMPTS"
                    ],
                    "fullName": "Prompts Index CODINGPROMPTS should export array of all prompts",
                    "status": "passed",
                    "title": "should export array of all prompts",
                    "duration": 1.7326760292053223,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Prompts Index",
                        "CODINGPROMPTS"
                    ],
                    "fullName": "Prompts Index CODINGPROMPTS should include prompts from all categories",
                    "status": "passed",
                    "title": "should include prompts from all categories",
                    "duration": 1.4258000254631042,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Prompts Index",
                        "CODINGPROMPTS"
                    ],
                    "fullName": "Prompts Index CODINGPROMPTS should have valid prompt structure for all prompts",
                    "status": "passed",
                    "title": "should have valid prompt structure for all prompts",
                    "duration": 1.0826719999313354,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Prompts Index",
                        "Individual prompt exports"
                    ],
                    "fullName": "Prompts Index Individual prompt exports should export BUGFIXING_PROMPTS",
                    "status": "passed",
                    "title": "should export BUGFIXING_PROMPTS",
                    "duration": 0.20447397232055664,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Prompts Index",
                        "Individual prompt exports"
                    ],
                    "fullName": "Prompts Index Individual prompt exports should export UNITTESTING_PROMPTS",
                    "status": "passed",
                    "title": "should export UNITTESTING_PROMPTS",
                    "duration": 0.2678450345993042,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Prompts Index",
                        "Individual prompt exports"
                    ],
                    "fullName": "Prompts Index Individual prompt exports should export REACTCOMPONENT_PROMPTS",
                    "status": "passed",
                    "title": "should export REACTCOMPONENT_PROMPTS",
                    "duration": 0.28989601135253906,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Prompts Index",
                        "Individual prompt exports"
                    ],
                    "fullName": "Prompts Index Individual prompt exports should export REDDITPOST_PROMPTS",
                    "status": "passed",
                    "title": "should export REDDITPOST_PROMPTS",
                    "duration": 0.3167870044708252,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Prompts Index",
                        "Prompt consistency"
                    ],
                    "fullName": "Prompts Index Prompt consistency should have unique prompt names",
                    "status": "passed",
                    "title": "should have unique prompt names",
                    "duration": 0.28274595737457275,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Prompts Index",
                        "Prompt consistency"
                    ],
                    "fullName": "Prompts Index Prompt consistency should have all prompts with at least one message",
                    "status": "passed",
                    "title": "should have all prompts with at least one message",
                    "duration": 0.37606799602508545,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Prompts Index",
                        "Prompt consistency"
                    ],
                    "fullName": "Prompts Index Prompt consistency should have all messages with valid content",
                    "status": "passed",
                    "title": "should have all messages with valid content",
                    "duration": 0.8995490074157715,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424733,
            "endTime": 1753117424740.8997,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/handlers/prompts/index.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "React Components Prompts",
                        "CREATEREACT_COMPONENT_PROMPT"
                    ],
                    "fullName": "React Components Prompts CREATEREACT_COMPONENT_PROMPT should have correct structure",
                    "status": "passed",
                    "title": "should have correct structure",
                    "duration": 1.8567590117454529,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "React Components Prompts",
                        "CREATEREACT_COMPONENT_PROMPT"
                    ],
                    "fullName": "React Components Prompts CREATEREACT_COMPONENT_PROMPT should have correct arguments",
                    "status": "passed",
                    "title": "should have correct arguments",
                    "duration": 1.0559930205345154,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "React Components Prompts",
                        "CREATEREACT_COMPONENT_PROMPT"
                    ],
                    "fullName": "React Components Prompts CREATEREACT_COMPONENT_PROMPT should have messages array with user role",
                    "status": "passed",
                    "title": "should have messages array with user role",
                    "duration": 0.2676360011100769,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "React Components Prompts",
                        "CREATEREACT_COMPONENT_PROMPT"
                    ],
                    "fullName": "React Components Prompts CREATEREACT_COMPONENT_PROMPT should have text content with template variables",
                    "status": "passed",
                    "title": "should have text content with template variables",
                    "duration": 0.34687697887420654,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "React Components Prompts",
                        "CREATEREACT_COMPONENT_PROMPT"
                    ],
                    "fullName": "React Components Prompts CREATEREACT_COMPONENT_PROMPT should include comprehensive React development guidelines",
                    "status": "passed",
                    "title": "should include comprehensive React development guidelines",
                    "duration": 0.2780560255050659,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "React Components Prompts",
                        "CREATEREACT_COMPONENT_PROMPT"
                    ],
                    "fullName": "React Components Prompts CREATEREACT_COMPONENT_PROMPT should mention React best practices",
                    "status": "passed",
                    "title": "should mention React best practices",
                    "duration": 0.23577499389648438,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "React Components Prompts",
                        "REACTCOMPONENT_PROMPTS"
                    ],
                    "fullName": "React Components Prompts REACTCOMPONENT_PROMPTS should export array containing CREATEREACT_COMPONENT_PROMPT",
                    "status": "passed",
                    "title": "should export array containing CREATEREACT_COMPONENT_PROMPT",
                    "duration": 0.4462299942970276,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424228,
            "endTime": 1753117424233.4463,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/handlers/prompts/react-components.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Reddit Post Prompts",
                        "CREATEREDDIT_POST_PROMPT"
                    ],
                    "fullName": "Reddit Post Prompts CREATEREDDIT_POST_PROMPT should have correct structure",
                    "status": "passed",
                    "title": "should have correct structure",
                    "duration": 1.9028890132904053,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Reddit Post Prompts",
                        "CREATEREDDIT_POST_PROMPT"
                    ],
                    "fullName": "Reddit Post Prompts CREATEREDDIT_POST_PROMPT should have correct arguments",
                    "status": "passed",
                    "title": "should have correct arguments",
                    "duration": 0.9675899744033813,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Reddit Post Prompts",
                        "CREATEREDDIT_POST_PROMPT"
                    ],
                    "fullName": "Reddit Post Prompts CREATEREDDIT_POST_PROMPT should have messages array with user role",
                    "status": "passed",
                    "title": "should have messages array with user role",
                    "duration": 0.3223070502281189,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Reddit Post Prompts",
                        "CREATEREDDIT_POST_PROMPT"
                    ],
                    "fullName": "Reddit Post Prompts CREATEREDDIT_POST_PROMPT should have text content with template variables",
                    "status": "passed",
                    "title": "should have text content with template variables",
                    "duration": 0.31930601596832275,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Reddit Post Prompts",
                        "CREATEREDDIT_POST_PROMPT"
                    ],
                    "fullName": "Reddit Post Prompts CREATEREDDIT_POST_PROMPT should include Reddit posting guidelines",
                    "status": "passed",
                    "title": "should include Reddit posting guidelines",
                    "duration": 0.19882404804229736,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Reddit Post Prompts",
                        "CREATEREDDIT_POST_PROMPT"
                    ],
                    "fullName": "Reddit Post Prompts CREATEREDDIT_POST_PROMPT should mention Reddit-specific formatting",
                    "status": "passed",
                    "title": "should mention Reddit-specific formatting",
                    "duration": 0.17979395389556885,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Reddit Post Prompts",
                        "REDDITPOST_PROMPTS"
                    ],
                    "fullName": "Reddit Post Prompts REDDITPOST_PROMPTS should export array containing CREATEREDDIT_POST_PROMPT",
                    "status": "passed",
                    "title": "should export array containing CREATEREDDIT_POST_PROMPT",
                    "duration": 0.6281630396842957,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424728,
            "endTime": 1753117424732.6282,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/handlers/prompts/reddit-post.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "Unit Testing Prompts",
                        "CREATEUNIT_TESTS_PROMPT"
                    ],
                    "fullName": "Unit Testing Prompts CREATEUNIT_TESTS_PROMPT should have correct structure",
                    "status": "passed",
                    "title": "should have correct structure",
                    "duration": 2.0608029961586,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Unit Testing Prompts",
                        "CREATEUNIT_TESTS_PROMPT"
                    ],
                    "fullName": "Unit Testing Prompts CREATEUNIT_TESTS_PROMPT should have correct arguments",
                    "status": "passed",
                    "title": "should have correct arguments",
                    "duration": 1.007191002368927,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Unit Testing Prompts",
                        "CREATEUNIT_TESTS_PROMPT"
                    ],
                    "fullName": "Unit Testing Prompts CREATEUNIT_TESTS_PROMPT should have messages array with user role",
                    "status": "passed",
                    "title": "should have messages array with user role",
                    "duration": 0.25319498777389526,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Unit Testing Prompts",
                        "CREATEUNIT_TESTS_PROMPT"
                    ],
                    "fullName": "Unit Testing Prompts CREATEUNIT_TESTS_PROMPT should have text content with template variables",
                    "status": "passed",
                    "title": "should have text content with template variables",
                    "duration": 0.3246060013771057,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Unit Testing Prompts",
                        "CREATEUNIT_TESTS_PROMPT"
                    ],
                    "fullName": "Unit Testing Prompts CREATEUNIT_TESTS_PROMPT should include comprehensive testing guidelines",
                    "status": "passed",
                    "title": "should include comprehensive testing guidelines",
                    "duration": 0.240975022315979,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Unit Testing Prompts",
                        "CREATEUNIT_TESTS_PROMPT"
                    ],
                    "fullName": "Unit Testing Prompts CREATEUNIT_TESTS_PROMPT should mention test categories",
                    "status": "passed",
                    "title": "should mention test categories",
                    "duration": 0.21486401557922363,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "Unit Testing Prompts",
                        "UNITTESTING_PROMPTS"
                    ],
                    "fullName": "Unit Testing Prompts UNITTESTING_PROMPTS should export array containing CREATEUNIT_TESTS_PROMPT",
                    "status": "passed",
                    "title": "should export array containing CREATEUNIT_TESTS_PROMPT",
                    "duration": 0.43640995025634766,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424657,
            "endTime": 1753117424662.4365,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/handlers/prompts/unit-testing.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "task-output resource handler",
                        "getTaskOutputResource"
                    ],
                    "fullName": "task-output resource handler getTaskOutputResource returns placeholder task output for valid task ID",
                    "status": "passed",
                    "title": "returns placeholder task output for valid task ID",
                    "duration": 3.1044830083847046,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "task-output resource handler",
                        "getTaskOutputResource"
                    ],
                    "fullName": "task-output resource handler getTaskOutputResource includes task data in output",
                    "status": "passed",
                    "title": "includes task data in output",
                    "duration": 1.4271100163459778,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "task-output resource handler",
                        "getTaskOutputResource"
                    ],
                    "fullName": "task-output resource handler getTaskOutputResource includes empty arrays for logs and events",
                    "status": "passed",
                    "title": "includes empty arrays for logs and events",
                    "duration": 1.2841479778289795,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "task-output resource handler",
                        "getTaskOutputResource"
                    ],
                    "fullName": "task-output resource handler getTaskOutputResource throws error when task ID is missing",
                    "status": "passed",
                    "title": "throws error when task ID is missing",
                    "duration": 1.9087309837341309,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "task-output resource handler",
                        "getTaskOutputResource"
                    ],
                    "fullName": "task-output resource handler getTaskOutputResource logs warning about unimplemented handler",
                    "status": "passed",
                    "title": "logs warning about unimplemented handler",
                    "duration": 1.6271039843559265,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "task-output resource handler",
                        "getTaskOutputResource"
                    ],
                    "fullName": "task-output resource handler getTaskOutputResource formats JSON output with proper indentation",
                    "status": "passed",
                    "title": "formats JSON output with proper indentation",
                    "duration": 0.4947900176048279,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "task-output resource handler",
                        "listTaskOutputResources"
                    ],
                    "fullName": "task-output resource handler listTaskOutputResources returns empty array",
                    "status": "passed",
                    "title": "returns empty array",
                    "duration": 1.252865970134735,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "task-output resource handler",
                        "listTaskOutputResources"
                    ],
                    "fullName": "task-output resource handler listTaskOutputResources logs warning about unimplemented listing",
                    "status": "passed",
                    "title": "logs warning about unimplemented listing",
                    "duration": 0.33650702238082886,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117424621,
            "endTime": 1753117424633.3364,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/handlers/resources/task-output.spec.ts"
        },
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "validateInput"
                    ],
                    "fullName": "validation utilities validateInput validates and returns parsed input for valid data",
                    "status": "passed",
                    "title": "validates and returns parsed input for valid data",
                    "duration": 4.254828989505768,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "validateInput"
                    ],
                    "fullName": "validation utilities validateInput throws ValidationError for invalid input",
                    "status": "passed",
                    "title": "throws ValidationError for invalid input",
                    "duration": 1.4982709884643555,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "validateInput"
                    ],
                    "fullName": "validation utilities validateInput includes field path in error",
                    "status": "passed",
                    "title": "includes field path in error",
                    "duration": 0.8387569785118103,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "validateInput"
                    ],
                    "fullName": "validation utilities validateInput handles array validation errors",
                    "status": "passed",
                    "title": "handles array validation errors",
                    "duration": 0.7788059711456299,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "validateWithResponse"
                    ],
                    "fullName": "validation utilities validateWithResponse returns validated data for valid input",
                    "status": "passed",
                    "title": "returns validated data for valid input",
                    "duration": 0.2987560033798218,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "validateWithResponse"
                    ],
                    "fullName": "validation utilities validateWithResponse returns error response for invalid input",
                    "status": "passed",
                    "title": "returns error response for invalid input",
                    "duration": 1.0411319732666016,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "sanitizeForLogging"
                    ],
                    "fullName": "validation utilities sanitizeForLogging masks API keys starting with sk-",
                    "status": "passed",
                    "title": "masks API keys starting with sk-",
                    "duration": 0.48326998949050903,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "sanitizeForLogging"
                    ],
                    "fullName": "validation utilities sanitizeForLogging masks fields with key in the name",
                    "status": "passed",
                    "title": "masks fields with key in the name",
                    "duration": 0.33400702476501465,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "sanitizeForLogging"
                    ],
                    "fullName": "validation utilities sanitizeForLogging masks Google API keys",
                    "status": "passed",
                    "title": "masks Google API keys",
                    "duration": 0.20436400175094604,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "sanitizeForLogging"
                    ],
                    "fullName": "validation utilities sanitizeForLogging masks password fields",
                    "status": "passed",
                    "title": "masks password fields",
                    "duration": 0.2031649947166443,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "sanitizeForLogging"
                    ],
                    "fullName": "validation utilities sanitizeForLogging masks token fields",
                    "status": "passed",
                    "title": "masks token fields",
                    "duration": 0.19767403602600098,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "sanitizeForLogging"
                    ],
                    "fullName": "validation utilities sanitizeForLogging masks Bearer tokens",
                    "status": "passed",
                    "title": "masks Bearer tokens",
                    "duration": 0.15412402153015137,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "sanitizeForLogging"
                    ],
                    "fullName": "validation utilities sanitizeForLogging handles multiple sensitive values",
                    "status": "passed",
                    "title": "handles multiple sensitive values",
                    "duration": 0.23488497734069824,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "createSafeValidator"
                    ],
                    "fullName": "validation utilities createSafeValidator creates a validator that returns validated data",
                    "status": "passed",
                    "title": "creates a validator that returns validated data",
                    "duration": 0.48009997606277466,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "createSafeValidator"
                    ],
                    "fullName": "validation utilities createSafeValidator returns error for invalid input",
                    "status": "passed",
                    "title": "returns error for invalid input",
                    "duration": 0.5638110041618347,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "createSafeValidator"
                    ],
                    "fullName": "validation utilities createSafeValidator handles complex schemas",
                    "status": "passed",
                    "title": "handles complex schemas",
                    "duration": 0.7829859852790833,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "isToolAvailable"
                    ],
                    "fullName": "validation utilities isToolAvailable returns true when CLAUDEAVAILABLE env is set to true",
                    "status": "passed",
                    "title": "returns true when CLAUDEAVAILABLE env is set to true",
                    "duration": 0.42711901664733887,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "isToolAvailable"
                    ],
                    "fullName": "validation utilities isToolAvailable returns false when CLAUDEAVAILABLE env is not set",
                    "status": "passed",
                    "title": "returns false when CLAUDEAVAILABLE env is not set",
                    "duration": 0.32764703035354614,
                    "failureMessages": [],
                    "meta": {}
                },
                {
                    "ancestorTitles": [
                        "validation utilities",
                        "isToolAvailable"
                    ],
                    "fullName": "validation utilities isToolAvailable returns false when CLAUDEAVAILABLE env is set to false",
                    "status": "passed",
                    "title": "returns false when CLAUDEAVAILABLE env is set to false",
                    "duration": 0.28649604320526123,
                    "failureMessages": [],
                    "meta": {}
                }
            ],
            "startTime": 1753117423910,
            "endTime": 1753117423924.3276,
            "status": "passed",
            "message": "",
            "name": "/var/www/html/systemprompt-os/tests/unit/server/mcp/core/handlers/tools/utils/validation.spec.ts"
        }
    ]
}