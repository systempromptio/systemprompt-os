# Example Module Configurations
# This file demonstrates various ways to configure SystemPrompt OS modules
# Copy this file to modules.yaml and modify as needed

modules:
  # Code analysis module
  code-analyzer:
    name: "Code Analyzer"
    type: npm
    package: "@systemprompt/code-analyzer"
    version: "^1.0.0"
    config:
      languages:
        - javascript
        - typescript
        - python
      maxFileSize: 1048576  # 1MB
      excludePatterns:
        - "node_modules/**"
        - "*.min.js"
    enabled: true
    description: "Static code analysis and metrics"

  # Custom authentication module
  auth-custom:
    name: "Custom Auth Provider"
    type: local
    path: "./modules/auth-custom"
    config:
      providers:
        - oauth2
        - saml
      sessionTimeout: 3600
      redirectUrl: "${AUTH_REDIRECT_URL}"
    dependencies:
      - passport: "^0.6.0"
      - express-session: "^1.17.0"
    enabled: true
    description: "Custom authentication providers"

  # Remote module from GitHub
  github-module:
    name: "GitHub Integration"
    type: git
    repository: "https://github.com/example/systemprompt-github-module.git"
    branch: main
    config:
      token: "${GITHUB_MODULE_TOKEN}"
      webhookSecret: "${GITHUB_WEBHOOK_SECRET}"
    buildCommand: "npm run build"
    enabled: true
    description: "GitHub repository integration"

  # Python-based data processor
  data-processor:
    name: "Data Processing Pipeline"
    type: python
    package: "systemprompt-data-processor"
    version: ">=2.0.0"
    pythonVersion: ">=3.9"
    config:
      workers: 4
      queueSize: 1000
      formats:
        - csv
        - json
        - parquet
    requirements:
      - pandas: ">=1.3.0"
      - numpy: ">=1.21.0"
    enabled: true
    description: "High-performance data processing"

  # Docker-based module
  container-module:
    name: "Containerized Service"
    type: docker
    image: "systemprompt/custom-service:latest"
    ports:
      - "8080:8080"
    volumes:
      - "./data:/app/data"
    environment:
      SERVICE_MODE: "production"
      API_KEY: "${CONTAINER_API_KEY}"
    healthCheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30
      timeout: 10
      retries: 3
    enabled: true
    description: "Containerized microservice"

  # UI extension module
  ui-dashboard:
    name: "Custom Dashboard"
    type: frontend
    framework: react
    entry: "./modules/dashboard/src/index.tsx"
    build:
      command: "npm run build"
      outputDir: "./dist"
    config:
      theme: "${UI_THEME:-dark}"
      apiEndpoint: "${API_BASE_URL}/v1"
      features:
        - analytics
        - realtime
        - export
    devServer:
      port: 3001
      proxy:
        "/api": "http://localhost:8000"
    enabled: true
    description: "Custom analytics dashboard"

  # Background job processor
  job-queue:
    name: "Job Queue Manager"
    type: service
    runtime: node
    main: "./modules/job-queue/index.js"
    config:
      redis:
        host: "${REDIS_HOST:-localhost}"
        port: 6379
        password: "${REDIS_PASSWORD}"
      queues:
        - name: default
          concurrency: 5
        - name: priority
          concurrency: 2
      retention: 604800  # 7 days in seconds
    autoStart: true
    restartPolicy: always
    enabled: true
    description: "Background job processing"

  # WebAssembly module
  wasm-compute:
    name: "WASM Compute Engine"
    type: wasm
    source: "./modules/compute/compute.wasm"
    runtime: wasmtime
    config:
      memory: 256  # MB
      threads: 4
      imports:
        - module: env
          functions:
            - log
            - error
    enabled: false  # Disabled by default
    description: "High-performance WASM computations"

  # Plugin system module
  plugin-manager:
    name: "Plugin Manager"
    type: core
    singleton: true
    config:
      pluginDirectory: "./plugins"
      allowedTypes:
        - filter
        - transform
        - output
      sandbox:
        enabled: true
        permissions:
          - read
          - write:temp
      autoDiscover: true
    hooks:
      - beforeLoad
      - afterLoad
      - beforeUnload
    enabled: true
    description: "Dynamic plugin management system"

  # Development tools module
  dev-tools:
    name: "Developer Tools"
    type: local
    path: "./modules/dev-tools"
    config:
      features:
        - hotReload
        - debugging
        - profiling
      port: 9229
    condition: "${NODE_ENV} == 'development'"
    enabled: "${DEV_MODE:-false}"
    description: "Development and debugging tools"

# Global module configuration
config:
  # Module installation directory
  modulesDir: "./extensions/modules"
  
  # Auto-install missing modules
  autoInstall: true
  
  # Module loading order (for dependencies)
  loadOrder:
    - plugin-manager
    - auth-custom
    - job-queue
  
  # Security settings
  security:
    # Verify module signatures
    verifySignatures: true
    
    # Allowed module sources
    allowedSources:
      - npm
      - local
      - "https://github.com/systemprompt/*"
    
    # Sandbox untrusted modules
    sandboxEnabled: true
  
  # Performance settings
  performance:
    # Maximum module initialization time (ms)
    initTimeout: 30000
    
    # Module memory limits (MB)
    maxMemory: 512
    
    # CPU usage monitoring
    cpuThreshold: 80
  
  # Update settings
  updates:
    # Check for updates
    checkInterval: 86400  # 24 hours
    
    # Auto-update modules
    autoUpdate: false
    
    # Update strategy (major, minor, patch)
    strategy: minor