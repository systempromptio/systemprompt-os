/**
 * CLI validation schemas for agents module using autogenerated types.
 * @file CLI validation schemas for agents module.
 * @module modules/core/agents/cli/schemas
 */

import { z } from 'zod';
import {
  AgentCreateDataSchema,
  AgentUpdateDataSchema
} from '@/modules/core/agents/types/agents.module.generated';
import { AgentsStatusSchema } from '@/modules/core/agents/types/database.generated';

// Base CLI schema with common format option
const cliBaseSchema = z.object({
  format: z.enum(['text', 'json']).default('text')
});

// Create command schema - extends autogenerated schema with CLI-specific fields
export const createCommandArgsSchema = AgentCreateDataSchema.extend({
  format: z.enum(['text', 'json']).default('text'),
  // Transform comma-separated strings to arrays
  capabilities: z.union([
    z.string().transform(s => { return s.split(',').map(item => { return item.trim() })
.filter(item => { return item.length > 0 }) }),
    z.array(z.string())
  ]).optional(),
  tools: z.union([
    z.string().transform(s => { return s.split(',').map(item => { return item.trim() })
.filter(item => { return item.length > 0 }) }),
    z.array(z.string())
  ]).optional(),
  // Parse JSON config string
  config: z.union([
    z.string().transform((s, ctx) => {
      try {
        const parsed = JSON.parse(s);
        if (typeof parsed === 'object' && parsed !== null && !Array.isArray(parsed)) {
          return parsed;
        }
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: 'Config must be a JSON object'
        });
        return z.NEVER;
      } catch {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: 'Invalid JSON format for config'
        });
        return z.NEVER;
      }
    }),
    z.record(z.unknown())
  ]).optional()
});

// Update command schema - extends autogenerated schema with CLI-specific fields
export const updateCommandArgsSchema = AgentUpdateDataSchema.extend({
  id: z.string().min(1, 'Agent ID is required'),
  format: z.enum(['text', 'json']).default('text'),
  // Transform comma-separated strings to arrays
  capabilities: z.union([
    z.string().transform(s => { return s.split(',').map(item => { return item.trim() })
.filter(item => { return item.length > 0 }) }),
    z.array(z.string())
  ]).optional(),
  tools: z.union([
    z.string().transform(s => { return s.split(',').map(item => { return item.trim() })
.filter(item => { return item.length > 0 }) }),
    z.array(z.string())
  ]).optional(),
  // Parse JSON config string
  config: z.union([
    z.string().transform((s, ctx) => {
      try {
        const parsed = JSON.parse(s);
        if (typeof parsed === 'object' && parsed !== null && !Array.isArray(parsed)) {
          return parsed;
        }
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: 'Config must be a JSON object'
        });
        return z.NEVER;
      } catch {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: 'Invalid JSON format for config'
        });
        return z.NEVER;
      }
    }),
    z.record(z.unknown())
  ]).optional()
}).refine(
  (data) => {
    const {
 id, format, ...updateFields
} = data;
    return Object.keys(updateFields).some(key => {
      const value = updateFields[key as keyof typeof updateFields];
      return value !== undefined;
    });
  },
  {
    message: 'At least one field must be provided for update'
  }
);

// List command schema
export const listCommandArgsSchema = z.object({
  status: AgentsStatusSchema.optional(),
  format: z.enum(['text', 'json']).default('text')
});

// Show command schema
export const showCommandArgsSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  format: z.enum(['text', 'json']).default('text')
}).refine(
  (data) => { return data.id || data.name },
  {
    message: 'Either agent ID or name must be provided'
  }
);

// Delete command schema
export const deleteCommandArgsSchema = z.object({
  id: z.string().min(1, 'Agent ID is required'),
  force: z.boolean().default(false),
  format: z.enum(['text', 'json']).default('text')
});

// Status command schema
export const statusCommandArgsSchema = cliBaseSchema;

// Type inference for TypeScript
export type CreateCommandArgs = z.infer<typeof createCommandArgsSchema>;
export type UpdateCommandArgs = z.infer<typeof updateCommandArgsSchema>;
export type ListCommandArgs = z.infer<typeof listCommandArgsSchema>;
export type ShowCommandArgs = z.infer<typeof showCommandArgsSchema>;
export type DeleteCommandArgs = z.infer<typeof deleteCommandArgsSchema>;
export type StatusCommandArgs = z.infer<typeof statusCommandArgsSchema>;
