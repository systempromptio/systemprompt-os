/**
 * Agent types using ONLY autogenerated database types.
 * Everything comes from database schema - no manual definitions.
 */

// All database types are imported from the autogenerated file
import type {
  AgentLogsLevel,
  AgentTasksPriority,
  AgentsType,
  IAgentCapabilitiesRow,
  IAgentConfigRow,
  IAgentLogsRow,
  IAgentMetricsRow,
  IAgentTasksRow,
  IAgentToolsRow,
  IAgentsRow
} from '@/modules/core/agents/types/database.generated';

// Type aliases for status fields (these are string literals in the schema, not enums)
export type AgentsStatus = 'idle' | 'active' | 'stopped' | 'error';
export type AgentTasksStatus = 'pending' | 'assigned' | 'running' | 'completed' | 'failed' | 'cancelled';

// Re-export all database types
export type {
  AgentsType,
  AgentsStatus,
  AgentTasksPriority,
  AgentTasksStatus,
  AgentLogsLevel,
  IAgentsRow,
  IAgentCapabilitiesRow,
  IAgentToolsRow,
  IAgentConfigRow,
  IAgentTasksRow,
  IAgentLogsRow,
  IAgentMetricsRow
};

// Additional compatibility aliases for task types
export type TaskPriority = AgentTasksPriority;
export type TaskStatus = AgentTasksStatus;

// Compatibility type aliases for legacy code
export type AgentType = AgentsType;
export type AgentStatus = AgentsStatus;

// Extended agent interface with related data
export interface IAgent extends IAgentsRow {
  capabilities: string[];
  tools: string[];
  config: Record<string, unknown>;
}

// DTO interfaces
export interface ICreateAgentDto {
  name: string;
  description: string;
  instructions: string;
  type: AgentsType;
  capabilities?: string[];
  tools?: string[];
  config?: Record<string, unknown>;
}

export interface IUpdateAgentDto {
  name?: string;
  description?: string;
  instructions?: string;
  type?: AgentsType;
  status?: AgentsStatus;
  capabilities?: string[];
  tools?: string[];
  config?: Record<string, unknown>;
}

// Module exports interface - only thing not in database
export interface IAgentsModuleExports {
  service: () => import('@/modules/core/agents/services/agent.service').AgentService;
  repository: () => import('@/modules/core/agents/repositories/agent.repository').AgentRepository;
}
