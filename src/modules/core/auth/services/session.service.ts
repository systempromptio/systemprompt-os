/**
 * Session service - manages user sessions and tokens.
 * Handles session lifecycle using only autogenerated database types.
 * @module auth/services/session
 */

import {
 createHash, randomBytes, randomUUID
} from 'crypto';
import { type ILogger, LogSource } from '@/modules/core/logger/types/index';
import { LoggerService } from '@/modules/core/logger/services/logger.service';
import type { DatabaseService } from '@/modules/core/database/services/database.service';
import { EventBusService } from '@/modules/core/events/services/event-bus.service';
import {
  AuthEvents,
  type SessionCreatedEvent,
} from '@/modules/core/events/types/index';
import {
  type IAuthSessionsRow,
} from '@/modules/core/auth/types/database.generated';

const SESSION_EXPIRY_HOURS = 24;
const REFRESH_EXPIRY_DAYS = 30;

/**
 * Session creation input.
 */
interface ISessionCreateInput {
  userId: string;
  ipAddress?: string;
  userAgent?: string;
  type?: 'web' | 'api' | 'oauth';
}

/**
 * Session service for managing user sessions.
 * Associates sessions with users via user_id field in auth_sessions table.
 */
export class SessionService {
  private static instance: SessionService;
  private dbService?: DatabaseService;
  private eventBusService?: EventBusService;
  private loggerService?: ILogger;

  /**
   * Private constructor for singleton.
   */
  private constructor() {}

  /**
   * Get singleton instance.
   */
  static getInstance(): SessionService {
    SessionService.instance ||= new SessionService();
    return SessionService.instance;
  }

  /**
   * Initialize with database and logger.
   * @param database
   * @param logger
   */
  static initialize(database: DatabaseService, logger: ILogger): SessionService {
    const instance = SessionService.getInstance();
    instance.dbService = database;
    instance.loggerService = logger;
    return instance;
  }

  /**
   * Get database connection.
   */
  private getDb(): DatabaseService {
    if (!this.dbService) {
      throw new Error('SessionService not properly initialized with database');
    }
    return this.dbService;
  }

  /**
   * Get event bus (lazy initialization).
   */
  private getEventBus(): EventBusService {
    this.eventBusService ||= EventBusService.getInstance();
    return this.eventBusService;
  }

  /**
   * Get logger (lazy initialization).
   */
  private getLogger(): ILogger {
    this.loggerService ||= LoggerService.getInstance();
    return this.loggerService;
  }

  /**
   * Create a new session for a user.
   * @param input
   */
  async createSession(input: ISessionCreateInput): Promise<IAuthSessionsRow> {
    const sessionId = randomUUID();
    const token = this.generateToken();
    const refreshToken = this.generateToken();
    const tokenHash = this.hashToken(token);
    const refreshTokenHash = this.hashToken(refreshToken);

    const now = new Date();
    const expiresAt = new Date(now.getTime() + SESSION_EXPIRY_HOURS * 60 * 60 * 1000);
    const refreshExpiresAt = new Date(now.getTime() + REFRESH_EXPIRY_DAYS * 24 * 60 * 60 * 1000);

    const session: IAuthSessionsRow = {
      id: sessionId,
      user_id: input.userId,
      token_hash: tokenHash,
      refresh_token_hash: refreshTokenHash,
      type: input.type || 'web',
      ip_address: input.ipAddress || null,
      user_agent: input.userAgent || null,
      expires_at: expiresAt.toISOString(),
      refresh_expires_at: refreshExpiresAt.toISOString(),
      revoked_at: null,
      created_at: now.toISOString(),
      last_activity_at: now.toISOString(),
    };

    await this.getDb().execute(
      `INSERT INTO auth_sessions 
       (id, user_id, token_hash, refresh_token_hash, type, ip_address, user_agent, 
        expires_at, refresh_expires_at, created_at, last_activity_at)
       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        session.id,
        session.user_id,
        session.token_hash,
        session.refresh_token_hash,
        session.type,
        session.ip_address,
        session.user_agent,
        session.expires_at,
        session.refresh_expires_at,
        session.created_at,
        session.last_activity_at,
      ]
    );

    const event: SessionCreatedEvent = {
      sessionId,
      userId: input.userId,
      type: input.type || 'web',
      expiresAt,
      timestamp: now,
    };
    this.getEventBus().emit(AuthEvents.SESSION_CREATED, event);

    this.getLogger().info(LogSource.AUTH, 'Session created', {
      sessionId,
      userId: input.userId,
      type: input.type || 'web',
    });

    return session;
  }

  /**
   * Validate a session token and return the associated user ID.
   * @param token
   */
  async validateSession(token: string): Promise<{ userId: string; sessionId: string } | null> {
    const tokenHash = this.hashToken(token);

    const sessions = await this.getDb().query<IAuthSessionsRow>(
      `SELECT * FROM auth_sessions 
       WHERE token_hash = ? AND revoked_at IS NULL 
       AND datetime(expires_at) > datetime('now')`,
      [tokenHash]
    );

    if (sessions.length === 0) {
      return null;
    }

    const session = sessions[0]!;

    await this.getDb().execute(
      `UPDATE auth_sessions SET last_activity_at = datetime('now') WHERE id = ?`,
      [session.id]
    );

    return {
      userId: session.user_id,
      sessionId: session.id,
    };
  }

  /**
   * Refresh a session using refresh token.
   * @param refreshToken
   */
  async refreshSession(refreshToken: string): Promise<{
    accessToken: string;
    refreshToken: string;
    sessionId: string;
  }> {
    const refreshTokenHash = this.hashToken(refreshToken);

    const sessions = await this.getDb().query<IAuthSessionsRow>(
      `SELECT * FROM auth_sessions 
       WHERE refresh_token_hash = ? AND revoked_at IS NULL 
       AND datetime(refresh_expires_at) > datetime('now')`,
      [refreshTokenHash]
    );

    if (sessions.length === 0) {
      throw new Error('Invalid refresh token');
    }

    const session = sessions[0]!;

    const newAccessToken = this.generateToken();
    const newRefreshToken = this.generateToken();
    const newAccessTokenHash = this.hashToken(newAccessToken);
    const newRefreshTokenHash = this.hashToken(newRefreshToken);

    await this.getDb().execute(
      `UPDATE auth_sessions 
       SET token_hash = ?, refresh_token_hash = ?, last_activity_at = datetime('now')
       WHERE id = ?`,
      [newAccessTokenHash, newRefreshTokenHash, session.id]
    );

    this.getLogger().info(LogSource.AUTH, 'Session refreshed', {
      sessionId: session.id,
      userId: session.user_id,
    });

    return {
      accessToken: newAccessToken,
      refreshToken: newRefreshToken,
      sessionId: session.id,
    };
  }

  /**
   * Revoke a specific session.
   * @param sessionId
   */
  async revokeSession(sessionId: string): Promise<void> {
    await this.getDb().execute(
      `UPDATE auth_sessions SET revoked_at = datetime('now') WHERE id = ?`,
      [sessionId]
    );

    this.getEventBus().emit(AuthEvents.SESSION_REVOKED, {
      sessionId,
      timestamp: new Date(),
    });

    this.getLogger().info(LogSource.AUTH, 'Session revoked', { sessionId });
  }

  /**
   * Get all active sessions for a user.
   * @param userId
   */
  async getUserSessions(userId: string): Promise<IAuthSessionsRow[]> {
    return await this.getDb().query<IAuthSessionsRow>(
      `SELECT * FROM auth_sessions 
       WHERE user_id = ? AND revoked_at IS NULL 
       AND datetime(expires_at) > datetime('now')
       ORDER BY last_activity_at DESC`,
      [userId]
    );
  }

  /**
   * Revoke all sessions for a user.
   * @param userId
   */
  async revokeUserSessions(userId: string): Promise<number> {
    const result = await this.getDb().execute(
      `UPDATE auth_sessions 
       SET revoked_at = datetime('now') 
       WHERE user_id = ? AND revoked_at IS NULL`,
      [userId]
    );

    this.getLogger().info(LogSource.AUTH, 'All user sessions revoked', {
      userId,
      count: result.changes || 0
    });

    return result.changes || 0;
  }

  /**
   * Get session by ID.
   * @param sessionId
   */
  async getSession(sessionId: string): Promise<IAuthSessionsRow | null> {
    const sessions = await this.getDb().query<IAuthSessionsRow>(
      `SELECT * FROM auth_sessions WHERE id = ?`,
      [sessionId]
    );

    return sessions[0] || null;
  }

  /**
   * Clean up expired sessions.
   */
  async cleanupExpiredSessions(): Promise<number> {
    const result = await this.getDb().execute(
      `UPDATE auth_sessions 
       SET revoked_at = datetime('now')
       WHERE revoked_at IS NULL 
       AND (datetime(expires_at) <= datetime('now') 
            OR datetime(refresh_expires_at) <= datetime('now'))`
    );

    const count = result?.changes || 0;
    if (count > 0) {
      this.getLogger().info(LogSource.AUTH, 'Expired sessions cleaned up', { count });
    }

    return count;
  }

  /**
   * Get session statistics for a user.
   * @param userId
   */
  async getUserSessionStats(userId: string): Promise<{
    total: number;
    active: number;
    expired: number;
    revoked: number;
  }> {
    const [totalResult, activeResult, expiredResult, revokedResult] = await Promise.all([
      this.getDb().query<{ count: number }>(
        `SELECT COUNT(*) as count FROM auth_sessions WHERE user_id = ?`,
        [userId]
      ),
      this.getDb().query<{ count: number }>(
        `SELECT COUNT(*) as count FROM auth_sessions 
         WHERE user_id = ? AND revoked_at IS NULL AND datetime(expires_at) > datetime('now')`,
        [userId]
      ),
      this.getDb().query<{ count: number }>(
        `SELECT COUNT(*) as count FROM auth_sessions 
         WHERE user_id = ? AND revoked_at IS NULL AND datetime(expires_at) <= datetime('now')`,
        [userId]
      ),
      this.getDb().query<{ count: number }>(
        `SELECT COUNT(*) as count FROM auth_sessions 
         WHERE user_id = ? AND revoked_at IS NOT NULL`,
        [userId]
      ),
    ]);

    return {
      total: totalResult[0]?.count || 0,
      active: activeResult[0]?.count || 0,
      expired: expiredResult[0]?.count || 0,
      revoked: revokedResult[0]?.count || 0,
    };
  }

  /**
   * Generate a random token.
   */
  private generateToken(): string {
    return randomBytes(32).toString('hex');
  }

  /**
   * Hash a token using SHA-256.
   * @param token
   */
  private hashToken(token: string): string {
    return createHash('sha256').update(token)
.digest('hex');
  }
}
