/**
 * Auth module types - only non-database types.
 * Database types are autogenerated in database.generated.ts.
 * @module auth/types
 */

// Re-export autogenerated database types for convenience
export type {
  IAuthSessionsRow,
  IAuthTokensRow,
  IAuthTokenScopesRow,
  IAuthOauthIdentitiesRow,
  IAuthAuthorizationCodesRow,
  IAuthProvidersRow,
  AUTH_TABLES,
} from '@/modules/core/auth/types/database.generated';

// Service layer input/output types (not stored in database)

/**
 * Simplified user interface for auth module (no roles/permissions).
 * Authorization is handled by the permissions module.
 */
export interface IUser {
  id: string;
  email: string;
  name?: string;
  avatarUrl?: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
  lastLoginAt?: string;
}

/**
 * Login input parameters.
 */
export interface LoginInput {
  email: string;
  password?: string;
  provider?: string;
  ipAddress?: string;
  userAgent?: string;
}

/**
 * Authentication result.
 */
export interface LoginResult {
  success: boolean;
  userId?: string;
  sessionId?: string;
  accessToken?: string;
  refreshToken?: string;
  reason?: string;
  session?: IAuthSessionsRow;
}

/**
 * Token creation input.
 */
export interface TokenCreateInput {
  user_id: string;
  name: string;
  type: 'api' | 'personal' | 'service';
  scopes: string[];
  expires_in?: number; // TTL in seconds
}

/**
 * Token validation result.
 */
export interface TokenValidationResult {
  valid: boolean;
  userId?: string;
  scopes?: string[];
  reason?: string;
}

/**
 * Identity provider interface (for OAuth providers).
 */
export interface IdentityProvider {
  id: string;
  name: string;
  enabled: boolean;
  config: Record<string, unknown>;
}

/**
 * Tunnel status interface.
 */
export interface ITunnelStatus {
  active: boolean;
  type: 'cloudflared' | 'permanent' | 'none';
  url?: string;
  error?: string;
}

/**
 * Auth module exports interface.
 */
export interface IAuthModuleExports {
  service: () => import('@/modules/core/auth/services/auth.service').AuthService;
  sessionService: () => import('@/modules/core/auth/services/session.service').SessionService;
  tokenService: () => import('@/modules/core/auth/services/token.service').TokenService;
  oauth2ConfigService: () => import('@/modules/core/auth/services/oauth2-config.service').OAuth2ConfigurationService;
  authCodeService: () => import('@/modules/core/auth/services/auth-code.service').AuthCodeService;
  getProvider: (id: string) => IdentityProvider | undefined;
  getAllProviders: () => Promise<IdentityProvider[]>;
  hasProvider: (id: string) => boolean;
  getProvidersService: () => import('@/modules/core/auth/services/providers.service').ProvidersService;
  reloadProviders: () => Promise<void>;
  createProvider: (input: any) => Promise<any>;
  updateProvider: (id: string, input: any) => Promise<any>;
  deleteProvider: (id: string) => Promise<boolean>;
  getTunnelService: () => import('@/modules/core/auth/services/tunnel.service').TunnelService | null;
  getTunnelStatus: () => ITunnelStatus;
  createToken: (input: TokenCreateInput) => Promise<IAuthTokensRow>;
  validateToken: (token: string) => Promise<TokenValidationResult>;
  listUserTokens: (userId: string) => Promise<IAuthTokensRow[]>;
  revokeToken: (tokenId: string) => Promise<void>;
  revokeUserTokens: (userId: string, type?: string) => Promise<void>;
  cleanupExpiredTokens: () => Promise<number>;
  login: (input: LoginInput) => Promise<LoginResult>;
  logout: (sessionId: string) => Promise<void>;
  refreshAccessToken: (refreshToken: string) => Promise<{
    accessToken: string;
    refreshToken: string;
  }>;
}
