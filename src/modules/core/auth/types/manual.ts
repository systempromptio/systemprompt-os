/**
 * Manual types for auth module - types that cannot be auto-generated.
 * @file Manual auth types that require manual maintenance.
 * @module auth/types/manual
 * JUSTIFICATION FOR MANUAL TYPES:
 * - Complex OAuth provider interfaces that vary by provider
 * - Legacy type compatibility for existing auth flows
 * - CLI-specific types that don't map to database structures
 */

// Re-export autogenerated database types for convenience
export type {
  IAuthSessionsRow,
  IAuthTokensRow,
  IAuthTokenScopesRow,
  IAuthOauthIdentitiesRow,
  IAuthAuthorizationCodesRow,
  IAuthProvidersRow,
  AUTH_TABLES,
} from '@/modules/core/auth/types/database.generated';

/**
 * OAuth provider interface - varies significantly by provider implementation.
 * Cannot be auto-generated due to dynamic configuration requirements.
 */
export interface IOAuthProvider {
  id: string;
  name: string;
  enabled: boolean;
  clientId: string;
  clientSecret: string;
  discoveryUrl?: string;
  authorizationUrl?: string;
  tokenUrl?: string;
  userInfoUrl?: string;
  scopes: string[];
  config: Record<string, unknown>;
}

/**
 * Identity provider interfaces for OAuth2 integration.
 */
export interface IIdentityProvider {
  id: string;
  name: string;
  getAuthorizationUrl(state: string, redirectUri: string): string;
  exchangeCodeForTokens(code: string, redirectUri: string): Promise<IdpTokens>;
  getUserInfo(tokens: IdpTokens): Promise<IIdpUserInfo>;
}

export interface IIdpUserInfo {
  id: string;
  email: string;
  name?: string;
  avatarUrl?: string;
  username?: string;
}

export interface IdpTokens {
  accessToken: string;
  refreshToken?: string;
  expiresIn?: number;
  tokenType?: string;
}

/**
 * OAuth2 configuration types.
 */
export interface IGenericOAuth2Config {
  clientId: string;
  clientSecret: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userInfoEndpoint?: string;
  scopes: string[];
  issuer?: string;
  userinfoMapping?: Record<string, unknown>;
  authorizationParams?: Record<string, unknown>;
}

export interface IOIDCDiscoveryConfig {
  issuer: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userInfoEndpoint: string;
  jwksUri: string;
  scopes: string[];
}

export interface ITokenResponseData {
  access_token: string;
  token_type: string;
  expires_in?: number;
  refresh_token?: string;
  scope?: string;
}

/**
 * Auth code types for OAuth2 flow.
 */
export interface IAuthCodeCreate {
  code: string;
  provider: string;
  user_id: string;
  redirect_uri: string;
  scopes: string[];
  expires_at: Date;
}

export interface IAuthCodeValidation {
  valid: boolean;
  userId?: string;
  provider?: string;
  scopes?: string[];
  error?: string;
}

/**
 * Extended module exports interface that includes TokenService and ProvidersService.
 * This extends the auto-generated IAuthModuleExports to include additional services needed by CLI.
 */
export interface IAuthModuleExportsExtended {
  service: () => import('@/modules/core/auth/services/auth.service').AuthService;
  tokenService: () => import('@/modules/core/auth/services/token.service').TokenService;
  providersService: () => import('@/modules/core/auth/services/providers.service').ProvidersService;
}

/**
 * CLI context interface - used by CLI commands.
 */
export interface ICliContext {
  cwd: string;
  args: {
    type?: string;
    output?: string;
    algorithm?: string;
    format?: string;
    user?: string;
    role?: string;
    [key: string]: unknown;
  };
}

/**
 * CLI command types - specific to command-line interface requirements.
 * Cannot be auto-generated as they don't map to database structures.
 */
export interface IAuthCliTypes {
  generateKeyOptions: {
    algorithm: 'RS256' | 'ES256' | 'HS256';
    keySize?: number;
    outputPath?: string;
  };
  providerStatus: {
    id: string;
    name: string;
    enabled: boolean;
    configured: boolean;
    lastUsed?: Date;
  };
}

/**
 * Token management types - used by TokenService.
 */
export interface TokenCreateInput {
  user_id: string;
  name: string;
  type: 'api' | 'personal' | 'service';
  scopes: string[];
  expires_in?: number;
}

export interface TokenValidationResult {
  valid: boolean;
  token?: IAuthTokensRow;
  payload?: any;
  error?: string;
  userId?: string;
  reason?: string;
}

/**
 * Base identity provider configuration interface.
 */
export interface IdpConfig {
  clientId: string;
  clientSecret: string;
  redirectUri: string;
  scopes?: string[];
}

// Alias for backward compatibility
export type IDPConfig = IdpConfig;

/**
 * Google OAuth provider specific types.
 */
export interface IGoogleConfig {
  clientId: string;
  clientSecret: string;
  redirectUri: string;
  scopes: string[];
}

export interface IGoogleUserInfo {
  id: string;
  email: string;
  verified_email?: boolean;
  name?: string;
  given_name?: string;
  family_name?: string;
  picture?: string;
  locale?: string;
}

/**
 * Legacy compatibility types - maintained for backward compatibility.
 * Will be deprecated in future versions.
 */
export interface ILegacyAuthTypes {
  // Legacy user interface - use new user types from users module instead
  oldUser: {
    id: string;
    email: string;
    name?: string;
    avatarUrl?: string;
    roles?: string[];
  };
}
