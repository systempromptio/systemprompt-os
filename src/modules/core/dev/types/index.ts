import type { IDevProfilesRow, IDevSessionsRow } from '@/modules/core/dev/types/database.generated';

/**
 * Development session types - from database enum values.
 */
export const enum DevSessionType {
  REPL = 'repl',
  PROFILE = 'profile',
  TEST = 'test',
  WATCH = 'watch',
  LINT = 'lint',
  TYPECHECK = 'typecheck'
}

/**
 * Development session status types - from database enum values.
 */
export const enum DevSessionStatus {
  ACTIVE = 'active',
  COMPLETED = 'completed',
  FAILED = 'failed',
  CANCELLED = 'cancelled'
}

/**
 * Development profile config interface - structured representation.
 */
export interface IDevProfileConfig {
  enabled: boolean;
  autoSave: boolean;
  debugMode: boolean;
}

/**
 * Development session metadata interface - structured representation.
 */
export interface IDevSessionMetadata {
  exitCode: number | null;
  outputLines: number;
  errorCount: number;
}

/**
 * Development service interface using autogenerated types.
 */
export interface IDevService {
  initialize(): Promise<void>;
  createProfile(
    name: string,
    description?: string,
    config?: IDevProfileConfig
  ): Promise<IDevProfilesRow>;
  getProfile(name: string): Promise<IDevProfilesRow | null>;
  startSession(
    type: DevSessionType,
    profileId?: number
  ): Promise<IDevSessionsRow>;
  endSession(
    sessionId: number,
    status: DevSessionStatus,
    metadata?: IDevSessionMetadata
  ): Promise<void>;
}

import type { DevService } from '@/modules/core/dev/services/dev.service';

/**
 * Strongly typed exports interface for Dev module.
 */
export interface IDevModuleExports {
  readonly service: () => DevService;
}

/**
 * Module generator options.
 */
export interface IModuleGeneratorOptions {
  name: string;
  type: 'service' | 'utility' | 'integration';
  description: string;
  needsDatabase: boolean;
  needsCli: boolean;
  dependencies: string[];
  isCustom?: boolean;
}

/**
 * Module file template.
 */
export interface IModuleFileTemplate {
  path: string;
  content: string;
}

/**
 * Module generator service interface.
 */
export interface IModuleGeneratorService {
  generateModule(options: IModuleGeneratorOptions): Promise<void>;
  validateModuleName(name: string): boolean;
  getModulePath(name: string, isCustom?: boolean): string;
}
