{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "import"],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended"
  ],
  "rules": {
    // Module structure enforcement
    "import/no-restricted-paths": [
      "error",
      {
        "zones": [
          {
            "target": "./src/modules/core/*",
            "from": "./src/modules/core/*",
            "except": ["./types", "./registry.ts", "./loader.ts"],
            "message": "Modules should not import from other modules directly. Use dependency injection."
          }
        ]
      }
    ],
    
    // Naming conventions
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^I?[A-Z]",
          "match": true
        }
      },
      {
        "selector": "class",
        "format": ["PascalCase"],
        "custom": {
          "regex": "Module$",
          "match": true
        },
        "filter": {
          "regex": "Module$",
          "match": true
        }
      }
    ],
    
    // Module interface implementation
    "@typescript-eslint/explicit-function-return-type": [
      "error",
      {
        "allowExpressions": false,
        "allowTypedFunctionExpressions": true,
        "allowHigherOrderFunctions": true
      }
    ],
    
    // Required methods
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ClassDeclaration[id.name=/Module$/]:not(:has(MethodDefinition[key.name='initialize']))",
        "message": "Module classes must implement the 'initialize' method"
      },
      {
        "selector": "ClassDeclaration[id.name=/Module$/]:not(:has(MethodDefinition[key.name='start']))",
        "message": "Module classes must implement the 'start' method"
      },
      {
        "selector": "ClassDeclaration[id.name=/Module$/]:not(:has(MethodDefinition[key.name='stop']))",
        "message": "Module classes must implement the 'stop' method"
      },
      {
        "selector": "ClassDeclaration[id.name=/Module$/]:not(:has(MethodDefinition[key.name='healthCheck']))",
        "message": "Module classes must implement the 'healthCheck' method"
      }
    ],
    
    // Error handling
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/no-misused-promises": "error",
    
    // Type safety
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/explicit-module-boundary-types": "error",
    
    // Documentation
    "require-jsdoc": [
      "error",
      {
        "require": {
          "FunctionDeclaration": true,
          "MethodDefinition": true,
          "ClassDeclaration": true,
          "ArrowFunctionExpression": false,
          "FunctionExpression": false
        }
      }
    ],
    
    // Consistent structure
    "import/order": [
      "error",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index"
        ],
        "pathGroups": [
          {
            "pattern": "@/**",
            "group": "internal"
          }
        ],
        "newlines-between": "always",
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ]
  },
  "overrides": [
    {
      "files": ["*.test.ts", "*.spec.ts"],
      "rules": {
        "@typescript-eslint/no-explicit-any": "off",
        "require-jsdoc": "off"
      }
    },
    {
      "files": ["cli/*.ts"],
      "rules": {
        "no-restricted-syntax": [
          "error",
          {
            "selector": "ExportNamedDeclaration[declaration.id.name='command']:not(:has(Property[key.name='name']))",
            "message": "CLI commands must have a 'name' property"
          },
          {
            "selector": "ExportNamedDeclaration[declaration.id.name='command']:not(:has(Property[key.name='description']))",
            "message": "CLI commands must have a 'description' property"
          }
        ]
      }
    }
  ]
}