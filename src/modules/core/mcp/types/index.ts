/**
 * MCP Module Types
 * Export all types for the Model Context Protocol module.
 */

// Export auto-generated database types and enums
export type {
  IMcpContextsRow,
  IMcpSessionsRow,
  IMcpMessagesRow,
  IMcpResourcesRow,
  IMcpPromptsRow,
  IMcpPromptMessagesRow,
  IMcpPromptArgumentsRow,
  IMcpResourceTemplatesRow,
  McpDatabaseRow,
} from '@/modules/core/mcp/types/database.generated';

export {
  MCP_TABLES,
  McpMessagesRole,
  McpSessionsStatus,
  McpResourcesContentType,
  McpPromptMessagesRole,
} from '@/modules/core/mcp/types/database.generated';

// Legacy export for backward compatibility
export { McpMessagesRole as MCPRoleEnum } from '@/modules/core/mcp/types/database.generated';

/*
 * Use autogenerated enums instead of manual ones:
 * McpMessagesRole (replaces MCPRoleEnum)
 * McpSessionsStatus (replaces MCPSessionStatusEnum)
 */

/**
 * MCP service interface using autogenerated types.
 */
export interface IMCPService {
  createContext(
    name: string,
    model: string,
    options?: {
      description?: string;
      maxTokens?: number;
      temperature?: number;
      topP?: number;
      frequencyPenalty?: number;
      presencePenalty?: number;
      stopSequences?: string;
      systemPrompt?: string;
    }
  ): Promise<import('./database.generated').IMcpContextsRow>;
  getContext(id: string): Promise<import('./database.generated').IMcpContextsRow | null>;
  listContexts(): Promise<import('./database.generated').IMcpContextsRow[]>;
  deleteContext(id: string): Promise<void>;
  createSession(contextId: string, options?: {
    sessionName?: string;
    userId?: string;
  }): Promise<import('./database.generated').IMcpSessionsRow>;
  addMessage(
    sessionId: string,
    role: import('./database.generated').McpMessagesRole,
    content: string,
    options?: {
      tokenCount?: number;
      cost?: number;
      modelUsed?: string;
      processingTimeMs?: number;
    }
  ): Promise<import('./database.generated').IMcpMessagesRow>;
  getSessionMessages(sessionId: string): Promise<import('./database.generated').IMcpMessagesRow[]>;
}

/**
 * MCP resource data interface for scanning resources.
 */
export interface IResourceScanData {
  uri: string;
  name: string;
  description?: string;
  mimeType?: string;
  contentType: import('./database.generated').McpResourcesContentType;
  content?: string;
  blobContent?: Buffer;
  size?: number;
  category?: string;
  tags?: string[]; // Will be converted to comma-separated string
  author?: string;
  version?: string;
  checksum?: string;
}

/**
 * MCP prompt data interface for scanning prompts.
 */
export interface IPromptScanData {
  name: string;
  description?: string;
  category?: string;
  tags?: string[]; // Will be converted to comma-separated string
  author?: string;
  version?: string;
  messages?: Array<{
    role: import('./database.generated').McpPromptMessagesRole;
    content: string;
    order: number;
  }>;
  arguments?: Array<{
    name: string;
    description?: string;
    required?: boolean;
    order: number;
  }>;
}

/**
 * File information interface for scanned files.
 */
export interface IFileInfo {
  path: string;
  relativePath: string;
  stats: Record<string, unknown>;
  hash?: string;
}

/**
 * MCP content scanner service interface.
 */
export interface IContentScanner {
  scanModule(moduleName: string, modulePath: string): Promise<void>;
  removeModuleContent(moduleName: string): Promise<void>;
}

/**
 * Strongly typed exports interface for MCP module.
 */
export interface IMCPModuleExports {
  readonly service: () => import('../services/mcp.service').MCPService;
  readonly resources: import('@/modules/types/index').IResourceModuleExports;
  readonly prompts: import('@/modules/types/index').IPromptModuleExports;
  readonly tools: import('@/modules/types/index').IToolModuleExports;
}
