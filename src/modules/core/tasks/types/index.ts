/**
 * Tasks module type exports.
 * Uses autogenerated database types directly.
 */

import type { ITaskRow, TaskStatus } from '@/modules/core/tasks/types/database.generated';

// Re-export autogenerated types
export type { ITaskRow, ITaskMetadataRow } from '@/modules/core/tasks/types/database.generated';
export { TaskStatus } from '@/modules/core/tasks/types/database.generated';

/**
 * Task execution status enum representing the runtime states of task execution.
 */
export enum TaskExecutionStatus {
  RUNNING = 'running',
  SUCCESS = 'success',
  FAILED = 'failed',
  TIMEOUT = 'timeout',
  CANCELLED = 'cancelled'
}

/**
 * Task priority enum representing the urgency levels for task execution.
 */
export enum TaskPriority {
  LOW = -1,
  NORMAL = 0,
  HIGH = 1,
  URGENT = 2,
  CRITICAL = 3
}

/**
 * Defines the contract for task handlers that process specific task types.
 */
export interface ITaskHandler {
  type: string;
  priority?: number;
  validate(payload: unknown): Promise<boolean>;
  execute(task: ITaskRow): Promise<ITaskResult>;
  onError?(task: ITaskRow, error: Error): Promise<void>;
  onSuccess?(task: ITaskRow, result: ITaskResult): Promise<void>;
  onTimeout?(task: ITaskRow): Promise<void>;
}

/**
 * Represents the result of a task execution.
 */
export interface ITaskResult {
  success: boolean;
  resultData?: unknown;
  error?: string;
  nextTask?: Partial<ITaskRow>;
}

/**
 * Service interface for managing tasks in the system.
 */
export interface ITaskService {
  addTask(task: Partial<ITaskRow>): Promise<ITaskRow>;
  receiveTask(types?: string[]): Promise<ITaskRow | null>;
  updateTaskStatus(taskId: number, status: TaskStatus): Promise<void>;
  updateTask(taskId: number, updates: Partial<ITaskRow>): Promise<ITaskRow>;
  getTaskById(taskId: number): Promise<ITaskRow | null>;
  listTasks(filter?: ITaskFilter): Promise<ITaskRow[]>;
  cancelTask(taskId: number): Promise<void>;
  registerHandler(handler: ITaskHandler): Promise<void>;
  unregisterHandler(type: string): Promise<void>;
  getStatistics(): Promise<ITaskStatistics>;
  assignTaskToAgent(taskId: number, agentId: string): Promise<void>;
  unassignTask(taskId: number): Promise<void>;
  getTasksByAgent(agentId: string): Promise<ITaskRow[]>;
  getTasksByStatus(status: TaskStatus): Promise<ITaskRow[]>;
  updateTaskProgress(taskId: number, progress: number): Promise<void>;
  getTaskMetadata(taskId: number): Promise<Record<string, string>>;
  setTaskMetadata(taskId: number, key: string, value: string): Promise<void>;
}

/**
 * Filter criteria for querying tasks.
 */
export interface ITaskFilter {
  status?: TaskStatus;
  type?: string;
  module_id?: string;
  limit?: number;
  offset?: number;
}

/**
 * Statistics about tasks in the system.
 */
export interface ITaskStatistics {
  total: number;
  pending: number;
  inProgress: number;
  completed: number;
  failed: number;
  cancelled: number;
  averageExecutionTime?: number;
  tasksByType: Record<string, number>;
}

/**
 * Module exports for the tasks module.
 */
export interface ITasksModuleExports {
  service: () => ITaskService;
  TaskStatus: typeof TaskStatus;
  TaskExecutionStatus: typeof TaskExecutionStatus;
  TaskPriority: typeof TaskPriority;
}

/**
 * Represents an error report for lint or typecheck tasks.
 */
export interface IErrorReport {
  id: string;
  path: string;
  errors: number;
  type: 'lint' | 'typecheck';
  timestamp: string;
}
