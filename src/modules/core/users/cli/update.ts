/**
 * Update user CLI command.
 * @file Update user CLI command.
 * @module modules/core/users/cli/update
 */

import type { ICLICommand, ICLIContext } from '@/modules/core/cli/types/index';
import { z } from 'zod';
import { UsersService } from '@/modules/core/users/services/users.service';
import { CliOutputService } from '@/modules/core/cli/services/cli-output.service';
import { LoggerService } from '@/modules/core/logger/services/logger.service';
import { LogSource } from '@/modules/core/logger/types/index';
import {
  type IUser,
  UserUpdateDataSchema
} from '@/modules/core/users/types/users.module.generated';
import { UsersStatusSchema } from '@/modules/core/users/types/database.generated';

// Update command arguments schema
const updateUserArgsSchema = z.object({
  id: z.string().uuid('Invalid user ID format'),
  format: z.enum(['text', 'json']).default('text'),
  // Optional update fields from the autogenerated schema
  username: z.string().optional(),
  email: z.string().email()
.optional(),
  display_name: z.string().nullable()
.optional(),
  avatar_url: z.string().url()
.nullable()
.optional(),
  bio: z.string().nullable()
.optional(),
  timezone: z.string().nullable()
.optional(),
  language: z.string().nullable()
.optional(),
  status: UsersStatusSchema.optional(),
  email_verified: z.enum(['true', 'false']).transform(v => { return v === 'true' })
.optional(),
  preferences: z.string().nullable()
.optional(),
  metadata: z.string().nullable()
.optional()
}).refine(data => {
  const updateFields = Object.keys(data).filter(key => { return key !== 'id' && key !== 'format' && data[key] !== undefined });
  return updateFields.length > 0;
}, {
  message: 'At least one field must be provided for update'
});

export const command: ICLICommand = {
  description: 'Update user information',
  options: [
    {
 name: 'id',
type: 'string',
description: 'User ID (UUID)',
required: true
},
    {
 name: 'username',
alias: 'u',
type: 'string',
description: 'Username'
},
    {
 name: 'email',
alias: 'e',
type: 'string',
description: 'Email address'
},
    {
 name: 'display_name',
alias: 'd',
type: 'string',
description: 'Display name'
},
    {
 name: 'avatar_url',
type: 'string',
description: 'Avatar URL'
},
    {
 name: 'bio',
type: 'string',
description: 'User bio'
},
    {
 name: 'timezone',
type: 'string',
description: 'Timezone'
},
    {
 name: 'language',
type: 'string',
description: 'Language'
},
    {
 name: 'status',
type: 'string',
description: 'User status',
choices: ['active', 'inactive', 'suspended']
},
    {
 name: 'email_verified',
type: 'string',
description: 'Email verified status',
choices: ['true', 'false']
},
    {
 name: 'format',
alias: 'f',
type: 'string',
choices: ['text', 'json'],
default: 'text',
description: 'Output format'
}
  ],
  execute: async (context: ICLIContext): Promise<void> => {
    const { args } = context;
    const logger = LoggerService.getInstance();
    const cliOutput = CliOutputService.getInstance();

    try {
      const validatedArgs = updateUserArgsSchema.parse(args);

      const usersService = UsersService.getInstance();

      const {
 id, format, ...updateData
} = validatedArgs;

      const cleanedUpdateData = Object.fromEntries(
        Object.entries(updateData).filter(([_, value]) => { return value !== undefined })
      );

      const user = await usersService.updateUser(id, cleanedUpdateData);

      if (format === 'json') {
        cliOutput.json(user);
      } else {
        cliOutput.success('User updated successfully');
        cliOutput.keyValue({
          'ID': user.id,
          'Username': user.username,
          'Email': user.email,
          'Display Name': user.display_name || 'N/A',
          'Status': user.status,
          'Email Verified': user.email_verified ? 'Yes' : 'No',
          'Updated At': user.updated_at ? new Date(user.updated_at).toLocaleString() : 'N/A'
        });
      }

      process.exit(0);
    } catch (error) {
      if (error instanceof z.ZodError) {
        cliOutput.error('Invalid arguments:');
        error.errors.forEach(err => {
          cliOutput.error(`  ${err.path.join('.')}: ${err.message}`);
        });
        process.exit(1);
      }

      const errorMessage = error instanceof Error ? error.message : String(error);
      cliOutput.error(`Error updating user: ${errorMessage}`);
      logger.error(LogSource.USERS, 'Error updating user', { error: error instanceof Error ? error : new Error(String(error)) });
      process.exit(1);
    }
  },
};
