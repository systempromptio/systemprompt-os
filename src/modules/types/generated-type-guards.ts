/**
 * Auto-generated type guards for module exports
 * Generated on: 2025-07-31T13:04:45.799Z
 * DO NOT EDIT - Generated by TypeGuardGenerator.
 */

import type { IWebhooksModuleExports } from '@/modules/core/webhooks/types/index';
import type { ITasksModuleExports } from '@/modules/core/tasks/types/index';
import type { ISystemModuleExports } from '@/modules/core/system/types/index';
import type { IPermissionsModuleExports } from '@/modules/core/permissions/types/index';
import type { IMonitorModuleExports } from '@/modules/core/monitor/types/index';
import type { IModulesModuleExports } from '@/modules/core/modules/types/modules-exports.types';
import type { IMCPModuleExports } from '@/modules/core/mcp/types/index';
import type { ILoggerModuleExports } from '@/modules/core/logger/types/logger-module.types';
import type { IEventsModuleExports } from '@/modules/core/events/types/index';
import type { IDevModuleExports } from '@/modules/core/dev/types/index';
import type { IDatabaseModuleExports } from '@/modules/core/database/types/database-module.types';
import type { IConfigModuleExports } from '@/modules/core/config/types/index';
import type { ICLIModuleExports } from '@/modules/core/cli/types/index';
import type { IAuthModuleExports } from '@/modules/core/auth/types/index';
import type { IAgentsModuleExports } from '@/modules/core/agents/types/index';
import { ModuleName } from '@/modules/types/module-names.types';
import type { IModule } from '@/modules/core/modules/types';

/**
 * Type guard to check if a module is the webhooks module with proper exports.
 * @param mod - Module to check.
 * @returns True if module is the webhooks module with valid exports.
 */
export const isWebhooksModuleExports = (
  mod: unknown
): mod is IModule<IWebhooksModuleExports> => {
  const candidate = mod as IModule<IWebhooksModuleExports>;
  return candidate?.name === ModuleName.WEBHOOKS
    && Boolean(candidate.exports)
    && typeof candidate.exports === 'object'
    && typeof candidate.exports.service === 'function';
};

/**
 * Type guard to check if a module is the tasks module with proper exports.
 * @param mod - Module to check.
 * @returns True if module is the tasks module with valid exports.
 */
export const isTasksModuleExports = (
  mod: unknown
): mod is IModule<ITasksModuleExports> => {
  const candidate = mod as IModule<ITasksModuleExports>;
  return candidate?.name === ModuleName.TASKS
    && Boolean(candidate.exports)
    && typeof candidate.exports === 'object'
    && typeof candidate.exports.service === 'function'
    && candidate.exports.TaskStatus !== undefined
    && candidate.exports.TaskExecutionStatus !== undefined
    && candidate.exports.TaskPriority !== undefined;
};

/**
 * Type guard to check if a module is the system module with proper exports.
 * @param mod - Module to check.
 * @returns True if module is the system module with valid exports.
 */
export const isSystemModuleExports = (
  mod: unknown
): mod is IModule<ISystemModuleExports> => {
  const candidate = mod as IModule<ISystemModuleExports>;
  return candidate?.name === ModuleName.SYSTEM
    && Boolean(candidate.exports)
    && typeof candidate.exports === 'object'
    && typeof candidate.exports.service === 'function'
    && typeof candidate.exports.urlConfigService === 'function';
};

/**
 * Type guard to check if a module is the permissions module with proper exports.
 * @param mod - Module to check.
 * @returns True if module is the permissions module with valid exports.
 */
export const isPermissionsModuleExports = (
  mod: unknown
): mod is IModule<IPermissionsModuleExports> => {
  const candidate = mod as IModule<IPermissionsModuleExports>;
  return candidate?.name === ModuleName.PERMISSIONS
    && Boolean(candidate.exports)
    && typeof candidate.exports === 'object'
    && typeof candidate.exports.service === 'function';
};

/**
 * Type guard to check if a module is the monitor module with proper exports.
 * @param mod - Module to check.
 * @returns True if module is the monitor module with valid exports.
 */
export const isMonitorModuleExports = (
  mod: unknown
): mod is IModule<IMonitorModuleExports> => {
  const candidate = mod as IModule<IMonitorModuleExports>;
  return candidate?.name === ModuleName.MONITOR
    && Boolean(candidate.exports)
    && typeof candidate.exports === 'object'
    && candidate.exports.MonitorService !== undefined;
};

/**
 * Type guard to check if a module is the modules module with proper exports.
 * @param mod - Module to check.
 * @returns True if module is the modules module with valid exports.
 */
export const isModulesModuleExports = (
  mod: unknown
): mod is IModule<IModulesModuleExports> => {
  const candidate = mod as IModule<IModulesModuleExports>;
  return candidate?.name === ModuleName.MODULES
    && Boolean(candidate.exports)
    && typeof candidate.exports === 'object'
    && typeof candidate.exports.service === 'function'
    && typeof candidate.exports.scanForModules === 'function'
    && typeof candidate.exports.getEnabledModules === 'function'
    && typeof candidate.exports.getModule === 'function'
    && typeof candidate.exports.enableModule === 'function'
    && typeof candidate.exports.disableModule === 'function'
    && typeof candidate.exports.registerCoreModule === 'function'
    && typeof candidate.exports.loadCoreModule === 'function'
    && typeof candidate.exports.startCoreModule === 'function'
    && typeof candidate.exports.getCoreModule === 'function'
    && typeof candidate.exports.getAllCoreModules === 'function'
    && typeof candidate.exports.registerPreLoadedModule === 'function'
    && typeof candidate.exports.getRegistry === 'function'
    && typeof candidate.exports.getLoader === 'function'
    && typeof candidate.exports.getManager === 'function'
    && typeof candidate.exports.validateCoreModules === 'function';
};

/**
 * Type guard to check if a module is the mcp module with proper exports.
 * @param mod - Module to check.
 * @returns True if module is the mcp module with valid exports.
 */
export const isMCPModuleExports = (
  mod: unknown
): mod is IModule<IMCPModuleExports> => {
  const candidate = mod as IModule<IMCPModuleExports>;
  return candidate?.name === ModuleName.MCP
    && Boolean(candidate.exports)
    && typeof candidate.exports === 'object'
    && typeof candidate.exports.service === 'function'
    && candidate.exports.resources !== undefined
    && candidate.exports.prompts !== undefined
    && candidate.exports.tools !== undefined;
};

/**
 * Type guard to check if a module is the logger module with proper exports.
 * @param mod - Module to check.
 * @returns True if module is the logger module with valid exports.
 */
export const isLoggerModuleExports = (
  mod: unknown
): mod is IModule<ILoggerModuleExports> => {
  const candidate = mod as IModule<ILoggerModuleExports>;
  return candidate?.name === ModuleName.LOGGER
    && Boolean(candidate.exports)
    && typeof candidate.exports === 'object'
    && typeof candidate.exports.service === 'function'
    && typeof candidate.exports.getInstance === 'function';
};

/**
 * Type guard to check if a module is the events module with proper exports.
 * @param mod - Module to check.
 * @returns True if module is the events module with valid exports.
 */
export const isEventsModuleExports = (
  mod: unknown
): mod is IModule<IEventsModuleExports> => {
  const candidate = mod as IModule<IEventsModuleExports>;
  return candidate?.name === ModuleName.EVENTS
    && Boolean(candidate.exports)
    && typeof candidate.exports === 'object'
    && candidate.exports.eventBus !== undefined
    && candidate.exports.EventNames !== undefined;
};

/**
 * Type guard to check if a module is the dev module with proper exports.
 * @param mod - Module to check.
 * @returns True if module is the dev module with valid exports.
 */
export const isDevModuleExports = (
  mod: unknown
): mod is IModule<IDevModuleExports> => {
  const candidate = mod as IModule<IDevModuleExports>;
  return candidate?.name === ModuleName.DEV
    && Boolean(candidate.exports)
    && typeof candidate.exports === 'object'
    && typeof candidate.exports.service === 'function';
};

/**
 * Type guard to check if a module is the database module with proper exports.
 * @param mod - Module to check.
 * @returns True if module is the database module with valid exports.
 */
export const isDatabaseModuleExports = (
  mod: unknown
): mod is IModule<IDatabaseModuleExports> => {
  const candidate = mod as IModule<IDatabaseModuleExports>;
  return candidate?.name === ModuleName.DATABASE
    && Boolean(candidate.exports)
    && typeof candidate.exports === 'object'
    && typeof candidate.exports.service === 'function'
    && typeof candidate.exports.schemaService === 'function'
    && typeof candidate.exports.migrationService === 'function'
    && typeof candidate.exports.schemaImportService === 'function'
    && typeof candidate.exports.sqlParserService === 'function'
    && typeof candidate.exports.cliHandlerService === 'function'
    && typeof candidate.exports.createModuleAdapter === 'function';
};

/**
 * Type guard to check if a module is the config module with proper exports.
 * @param mod - Module to check.
 * @returns True if module is the config module with valid exports.
 */
export const isConfigModuleExports = (
  mod: unknown
): mod is IModule<IConfigModuleExports> => {
  const candidate = mod as IModule<IConfigModuleExports>;
  return candidate?.name === ModuleName.CONFIG
    && Boolean(candidate.exports)
    && typeof candidate.exports === 'object'
    && typeof candidate.exports.service === 'function'
    && typeof candidate.exports.get === 'function'
    && typeof candidate.exports.set === 'function';
};

/**
 * Type guard to check if a module is the cli module with proper exports.
 * @param mod - Module to check.
 * @returns True if module is the cli module with valid exports.
 */
export const isCLIModuleExports = (
  mod: unknown
): mod is IModule<ICLIModuleExports> => {
  const candidate = mod as IModule<ICLIModuleExports>;
  return candidate?.name === ModuleName.CLI
    && Boolean(candidate.exports)
    && typeof candidate.exports === 'object';
};

/**
 * Type guard to check if a module is the auth module with proper exports.
 * @param mod - Module to check.
 * @returns True if module is the auth module with valid exports.
 */
export const isAuthModuleExports = (
  mod: unknown
): mod is IModule<IAuthModuleExports> => {
  const candidate = mod as IModule<IAuthModuleExports>;
  return candidate?.name === ModuleName.AUTH
    && Boolean(candidate.exports)
    && typeof candidate.exports === 'object'
    && typeof candidate.exports.authService === 'function'
    && typeof candidate.exports.sessionService === 'function'
    && typeof candidate.exports.tokenService === 'function'
    && typeof candidate.exports.providersService === 'function'
    && typeof candidate.exports.oauth2ConfigService === 'function'
    && typeof candidate.exports.authCodeService === 'function';
};

/**
 * Type guard to check if a module is the agents module with proper exports.
 * @param mod - Module to check.
 * @returns True if module is the agents module with valid exports.
 */
export const isAgentsModuleExports = (
  mod: unknown
): mod is IModule<IAgentsModuleExports> => {
  const candidate = mod as IModule<IAgentsModuleExports>;
  return candidate?.name === ModuleName.AGENTS
    && Boolean(candidate.exports)
    && typeof candidate.exports === 'object'
    && typeof candidate.exports.service === 'function'
    && typeof candidate.exports.repository === 'function';
};
